<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[CSS预处理器之Less]]></title>
    <url>%2F2019%2F10%2F29%2FB-16-CSS%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8%E4%B9%8BLess%2F</url>
    <content type="text"><![CDATA[1.Less初识1.1 less介绍 less是一种动态样式语言，属于css预处理器的范畴，它扩展了 CSS 语言，增加了变量、Mixin、函数等特性，使 CSS 更易维护和扩展。 LESS 既可以在 客户端 上运行 ，也可以借助Node.js在服务端运行。 less的中文官网：http://lesscss.cn/ bootstrap中less教程：http://www.bootcss.com/p/lesscss/1.2 使用 第一种：运行时编译 在body标签后面引入less文件：&lt;script src=&quot;less/less.min.js&quot;&gt;&lt;/script&gt; 修改包裹less的style标签的类型：&lt;style type=&quot;text/less&quot;&gt;less代码&lt;/style&gt; 这种方法不好，我们一般希望的是预编译！ 第二种：使用考拉编译less（koala 官网:www.koala-app.com） 使用外部样式表引入css文件：&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css/02.css&quot;/&gt; 打开考拉，把css文件拖进去(拖文件的目录而不是文件)，然后点击刷新即可。 这种方法是线下编译，运行与less没有关系。 2.Less语法2.1 less中的注释 以//开头的注释，不会被编译到css文件中。 以/**/包裹的注释会被编译到css文件中。 2.2 less中的变量 使用@来申明一个变量，例如：@pink：pink; 1.作为普通属性值只来使用：直接使用@pink 2.作为选择器和属性名：@{selector的值}的形式 3.作为URL：@{url} 变量的延迟加载： less里面的变量都是块级作用域，一个大括号代表一个作用域。 less中变量的延时加载：就是它会等作用域中所有的值都加载完毕，再去给变量赋值。 例如：由于@var: 2和@var: 3是比three: @var优先加载的，所以最终@var的值是3，然后再赋值给three中的变量。12345678910111213141516171819&lt;!-- less --&gt;@var: 0;.class &#123;@var: 1; .brass &#123; @var: 2; three: @var;//3 @var: 3; &#125;one: @var; &#125;&lt;!-- less编译结果(css) --&gt;.class &#123; one: 1;&#125;.class .brass &#123; three: 3;&#125; 2.3 less中的嵌套规则 基本嵌套规则(父子嵌套)：子在父内。 &amp;的使用(平级嵌套)：例如要用伪类时，使用&amp;就不会有空格。 2.4 less中的混合(minxin) 一般使用时会在css文件夹里放一个mixin文件夹，专门用来放混合。用@import &quot;mixin/juzhong.less&quot;; 混合就是将一系列属性从一个规则集引入到另一个规则集的方式。 1.普通混合 定义混合：.混合名{一些声明}，定义一个混合以点开头。 调用混合：混合名;。 缺点：会使原生的css文件变得很大。 2.不带输出的混合 定义混合：.混合名(){一些声明}，在混合名后面加上小括号，在css中就不会输出混合自己了。 调用混合：混合名;。 3.带参数的混合 定义混合：.混合名(形参1,形参2,...){一些包含变量的声明} 调用混合：混合名(实参1,实参2,...);，带参混合调用时一定要传入实参，否则报错。 4.带参数并且有默认值的混合 定义混合：.混合名(形参1:默认值,形参2:默认值,...){一些包含变量的声明} 调用混合：调用混合：混合名()/混合名(实参1,实参2,...);，可以传入实参(使用传入的实参)，也可以不传入(使用默认值)。 5.带多个参数的混合 略。见4 6.命名参数 调用混合时使用的：混合名(形参n: 实参);，给指定形参传入实参。 7.匹配模式(重点) 自定义三角形。 @import &quot;./triangle.less&quot;;，导入 8.arguments变量 arguments是一个实参列表，伪数组（具有length属性的对象）。 代码示例：123456.border(@w,@style,@c)&#123; border: @arguments;&#125;#wrap .sjx&#123; .border(1px,solid,black)&#125; 2.5 less运算 在less中可以进行加减乘除的运算 在less里面计算的双方有一方带单位即可。 代码示例： 1234@rem:100rem;#wrap .sjx&#123;width:(100 + @rem)&#125; 2.6 less避免编译 语法：~&quot;不需要编译的代码&quot;。 代码示例： 1234*&#123; margin: 100 * 10px; padding: ~&quot;cacl(100px + 100)&quot;;&#125; 这里cacl()是js中计算的。 ###2.7 less继承 语法1： #wrap{.inner{&amp;:extend(.juzhong all);}}，这种方法推荐使用，all就是继承居中类的所有状态(包括hover等状态)。 #wrap{.inner:extend(.juzhong)}，这种方法不推荐使用。 引入外部css文件（引入混合）。 继承与混合的区别： 继承可以做到混合做不到的功能（比如css选择器中的组合选择器[,]，因为混合的本质是复制粘贴）。 继承的性能比混合高，灵活度比混合低。]]></content>
      <categories>
        <category>前端</category>
        <category>CSS</category>
        <category>CSS预处理器</category>
      </categories>
      <tags>
        <tag>预处理器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[B-15-CSS3之布局扩展]]></title>
    <url>%2F2019%2F10%2F28%2FB-15-CSS3%E4%B9%8B%E5%B8%83%E5%B1%80%E6%89%A9%E5%B1%95%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[CSS3之变形]]></title>
    <url>%2F2019%2F10%2F28%2FB-14-CSS3%E4%B9%8B%E5%8F%98%E5%BD%A2%2F</url>
    <content type="text"><![CDATA[1. 2d变形 transform 属性允许你修改CSS视觉格式模型的坐标空间. transform 属性 , 只对 block 级元素(一般都是div)生效！ 变形与过渡一般一起使用。 1.1 ！旋转（rotate） transform:rotate(角度); 正值:顺时针旋转 rotate(360deg) 负值:逆时针旋转 rotate(-360deg) 只能设单值。正数表示顺时针旋转，负数表示逆时针旋转。 1.2 ！平移（translate） 带单位！ X方向平移:transform: translateX(tx) Y方向平移:transform: translateY(ty) 二维平移：transform: translate(tx[, ty])； 如果ty没有指定，它的值默认为0。 可设单值，也可设双值。 正数表示XY轴正向位移，负数为反向位移。设单值表示只X轴位移，Y轴坐标不变。例如transform: translate(100px);等价于transform: translate(100px,0); 1.3倾斜/斜切（skew） transform:skewX(45deg); X方向倾斜:transform: skewX(angle) skewX(45deg):参数值以deg为单位，代表与y轴之间的角度。 Y方向倾斜:transform: skewY(angle) skewY(45deg):参数值以deg为单位，代表与x轴之间的角度。 二维倾斜:transform: skew(ax[, ay]); 如果ay未提供，在Y轴上没有倾斜。 skew(45deg,15deg):参数值以deg为单位。 第一个参数代表与y轴之间的角度。 第二个参数代表与x轴之间的角度。 单值时表示只X轴扭曲，Y轴不变，如transform: skew(30deg);等价于transform: skew(30deg, 0);。 考虑到可读性，不推荐用单值，应该用transform: skewX(30deg);。skewY表示只Y轴扭曲，X轴不变 。 正值:拉正斜杠方向的两个角 负值:拉反斜杠方向的两个角 1.4 缩放（scale） transform:scale(2); X方向缩放:transform: scaleX(sx); Y方向缩放:transform: scaleY(sy); 二维缩放 :transform: scale(sx[, sy]); (如果sy 未指定，默认认为和sx的值相同) 。 要缩小设0.01～0.99之间的值，要放大设超过1的值。 例如： 缩小一倍可以transform: scale(.5); 放大一倍可以transform: scale(2); 只想X轴缩放，可以用scaleX(.5)相当于scale(.5, 1)。 只想Y轴缩放，可以用scaleY(.5)相当于scale(1, .5)。 正值:缩放的程度。 负值:不推荐使用（有旋转效果）。 单值时表示只X轴,Y轴上缩放力度一样，如transform: scale(2);等价于transform: scale(2,2);。 1.5 基点的变换 transform-origin CSS属性更改一个元素变形的基点。 基点的变换对平移没有影响（因为位移参照的是自己原来的位置）！ transform-origin属性可以使用一个，两个或三个值来指定，其中每个值都表示一个偏移量。 没有明确定义的偏移将重置为其对应的初始值。 取值： 关键字：left、center、right、top、bottom 百分比：自身尺寸的百分比。 数值 1.6 矩阵（matrix）（了解即可） 在 2D变换 中，矩阵变换函数 matrix() 接受 6个值，语法形式：transform: matrix(a, b, c, d, e, f); ，这相当于，对元素应用一个变换矩阵。 旋转 对某一元素应用旋转变换 rotate(θ)，等价于矩阵变换函数 matrix(cosθ, sinθ, -sinθ, cosθ, 0, 0)。 平移 对某一元素应用旋转变换 translate(X, Y)，等价于使用矩阵变换函数 matrix(1, 0, 0, 1, X, Y)。 倾斜 对某一元素应用倾斜变换 skew(α, β)，等价于使用矩阵变换函数matrix(1, tanβ, tanα,1, 0, 0)。 缩放 对某一元素应用缩放变换 scale(scaleX, scaleY)，等价于使用矩阵变换函数 matrix(scaleX, 0, 0, scaleY, 0, 0)。 1.7 ！变换组合 变换组合的顺序不同，变换结果不同（因为底层原理是矩阵，矩阵的运算是不可逆的）。 变换组合时,底层是矩阵，计算方向是从右往左进行继续的。 移动和缩放 顺序不同，结果不同 执行顺序从右往左 理解： 方便理解可以按照从左往右的顺序进行变换。 缩放时坐标系也跟着缩放。 移动和旋转 顺序不同，结果不同 执行顺序从右往左 理解： 方便理解可以按照从左往右的顺序进行变换。 旋转时坐标系跟着旋转。2. 3d变形 在浏览器中，X轴是从左到右，Y轴是从上到下，Z轴是从里到外。 3d变形中有缩放、平移、旋转，没有倾斜/斜切（因为没有意义）。 3d场景的两个要点： 近大远小：由景深实现。 层次感：由transfrom-style实现。 2.1 3D旋转 CSS3中的3D旋转主要包括四个功能函数 rotateX(angle) rotateY(angle) rotateZ(angle)等价于rotate(angle) rotate3d(x,y,z,angle) x, y, z分别接受一个数值(number),用来计算矢量方向(direction vector)，矢量方向是三维空间中的一条线, 从坐标系原点到x, y, z值确定的那个点，元素围绕这条线旋转angle指定的值。 怎么判断绕着谁转？绕着圆心到指定点所形成的射线进行旋转。 2.2 3D平移 transform: translateZ(length)是3D Transformaton特有的，其他两个2D中就有。 translateZ: 它不能是 百分比 值，那样的移动是没有意义的。 例如：transform: translate3d(translateX[50%],translateY[50%],translateZ[值]);中translateZ 也不能是百分比值，那样的没有变形了。 2.3 3D缩放 transform: scale3d(scaleX,scaleY,scaleZ); 单独使用scaleZ()是没有意义的，使用scale3d时使用的。 如果只设置scaleZ(number)，你会发现元素并没有被扩大或压缩，scaleZ(number)需要和translateZ(length)配合使用，number乘以length得到的值，是元素沿Z轴移动的距离，从而使得感觉被扩大或压缩 。 例如： transform: translateZ(100px) scaleZ(2);往前走100px。 transform: scaleZ(2) translateZ(100px);往前走200px，相当于transform: translateZ(200px); 2.4景深（perspective） 景深介绍： 简单理解：景深就是我们的肉眼距离显示器的距离，景深越大，元素离我们越远，效果就不好。在CSS3中，perspective用于激活一个3D空间，属性值就是景深大小（默认none无景深）。 应用景深的元素称为“舞台元素”，舞台元素的所有后代元素都会受影响，（如果后代元素中也添加了perspective属性，效果会叠加而不是覆盖）。景深是设置给包裹元素的，作用给包裹里面的设置了3d变换的子元素的。 子元素的变换（X/Y）为正值：按着头/右手往里推，提着脚/左手往外拉。 景深: （英语：Depth of field, DOF）景深是指相机对焦点前后相对清晰的成像范围。在光学中，尤其是录影或是摄影，是一个描述在空间中，可以清楚成像的距离范围。虽然透镜只能够将光聚 到某一固定的距离，远离此点则会逐渐模糊，但是在某一段特定的距离内，影像模糊的程度是肉眼无法察觉的，这段距离称之为景深。当焦点设在超焦距处时，景深 会从超焦距的一半延伸到无限远，对一个固定的光圈值来说，这是最大的景深。（了解即可） 景深的两种方式： transform: perspective(depth);这样写是作用于自身的，不是作用于子元素。 transform里面有一个perspective(depth)函数。 此时应该跟变换组合一起使用：transform: perspective(depth) rotateX(度数);）。 使用perspective()函数，那么他必须被放置在transform属性的首位，如果放在其他函数之后，则会被忽略。 depth的默认值是none，可以设置为一个长度值，这个长度是沿着Z轴距离坐标原点的距离。1000px被认为是个正常值 一般不会使用！ perspective: depth; 同perspective()函数一样，depth的默认值是none，可以设置为一个长度值，这个长度是沿着Z轴距离坐标原点的距离。 他们唯一的区别是，perspective属性是被用于元素的后代元素，而不是元素本身；就是说，为某个元素设置perspective属性后，是对这个元素的子元素起作用，而不是这个元素本身。 与灭点的关系(原理)： 景深越大，灭点越远，元素变形越小； 景深越小，灭点越近，元素变形越大。 作用： 让3d场景有近大远小的效果（我们肉眼距离屏幕的距离）。 是一个不可继承的属性，但是作用于后代元素 景深基点：perspective-origin 控制视角的位置，是由两个属性控制的。 默认值：perspective-origin:50% 50%; 这个属性来设置你在X, Y轴坐标确定的那个点来看这个元素，Z轴是被perspective属性设置的。 同perspective属性，也是设置在父元素上，对后代元素起作用。 景深叠加： 爷父子中，如果爷父都设置的有景深，作用到子身上以后不是父身上的景深了，而且不同的浏览器叠加计算的方式也不同。 所以要尽量避免景深叠加！ 2.5 灭点 指的是立体图形各条边的延伸线所产生的相交点。透视点的消失点。 一点透视、二点透视、多点透视、成角透视 2.6 transform-style 这个属性指定了子元素如何在空间中展示，可以营造有层级的3d舞台。 只有两个属性值：flat（默认）和preserve-3d flat 表示所有子元素在2D平面呈现； preserve-3d 表示所有子元素在3D平面呈现。 是一个不可继承属性，它作用于子元素。 如果被扁平化，则子元素不会独立的存在于三维空间。 因为该属性不会被（自动）继承，所以必须为元素所有非后代节点设置该属性。 景深负责近大远小的感觉，transform-style则负责层次感。 2.7 backface-visibility backface-visibility属性用来设置，是否显示元素的背面，默认是显示的。 backface-visibility: keyword; keyword有两个值，hidden和visible，默认值是visible。]]></content>
      <categories>
        <category>前端</category>
        <category>CSS</category>
        <category>CSS3</category>
      </categories>
      <tags>
        <tag>变形</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS3之动画]]></title>
    <url>%2F2019%2F10%2F28%2FB-13-CSS3%E4%B9%8B%E5%8A%A8%E7%94%BB%2F</url>
    <content type="text"><![CDATA[1. 介绍 2.使用 2.2、2.3、2.4、2.6、2.7 是动画内的属性；2.5、2.8是动画外的属性 2.1 关键帧（@keyframes） 整个关键帧是作用于动画帧的 语法： 12345 @keyframes animiationName&#123; keyframes-selector&#123; css-style; &#125;&#125; animiationName:必写项，定义动画的名称。 keyframes-selector：必写项，动画持续时间的百分比。 from：0% to：100% css-style：css声明 例如： 123456789101112131415161718// ！这里的百分比代表的是时间点 @keyframes move&#123; 0%&#123; transform: translateY(-100px); &#125; 25%&#123; transform: translateY(-90px); &#125; 50%&#123; transform: translateY(0px); &#125; 75%&#123; transform: translateY(90px); &#125; 100%&#123; transform: translateY(100px); &#125; &#125; animation-timing-function作用于一个关键帧周期每个阶段。使用step会少走一步 关键帧代表的是整个动画周期。 2.2 animation-name 关键帧的名字，与transition-property(产生过渡动画的属性)有区别。 animation-name属性指定应用的一系列动画，每个名称代表一个由@keyframes定义的动画序列 值: none：特殊关键字，表示无关键帧。 keyframename：标识动画的字符串。 2.3 animation-duration animation-duration属性指定一个动画周期的时长。 默认值为0s，表示无动画。 值： 一个动画周期的时长，单位为秒(s)或者毫秒(ms)，无单位值无效。 注意：负值无效，浏览器会忽略该声明，但是一些早期的带前缀的声明会将负值当作0s2.4 animation-timing-function animation-timing-function属性定义CSS动画在每一动画周期中执行的节奏。 对于关键帧动画来说，timing function作用于一个关键帧周期而非整个动画周期，即从关键帧开始，到关键帧结束。 动画的默认效果：由慢变快再变慢 linear:线性过渡，等同于贝塞尔曲线（0,0,1,1） ease:平滑过渡，等同于贝塞尔曲线（0.25,0.1,0.25,1.0） ease-in:由慢到快，等同于贝塞尔曲线（0.42,0,1,1） ease-out:由快到慢，等同于贝塞尔曲线（0,0,0.58,1） ease-in-out:由慢到快再到慢，等同于贝塞尔曲线（0.42,0,0.58,1） cubic-bezier(1,1,2,3) steps(n,[start|end]) 传入一到两个参数，第一个参数意思是把动画分成 n 等分，然后动画就会平均地运行。 第二个参数 start 表示从动画的开头开始运行，相反，end 就表示从动画的结尾开始运行， 默认值为 end。 2.5 animation-delay 定义动画开始前等待的时间,以秒或毫秒计(属于动画外的范畴)。 值: 从动画样式应用到元素上到元素开始执行动画的时间差。 可用单位为秒(s)和毫秒(ms)。 如果未设置单位，定义无效！2.6 animation-iteration-count 定义了动画执行的次数（属于动画内的范畴），重复的是关键帧！ 只作用于动画内的属性，对animation-delay无效(不起作用)! 值 infinite：无限循环播放动画。 ： 动画播放的次数 不可为负值。 2.7 animation-direction 定义了动画执行的方向。 值： normal：每个循环内动画向前循环，换言之，每个动画循环结束，动画重置到起点重新开始，这是默认值。 alternate：动画交替反向运行，反向运行时，动画按步后退，同时，带时间功能的函数也反向。 比如，ease-in 在反向时成为ease-out。计数取决于开始时是奇数迭代还是偶数迭代。 reverse：反向运行动画，每周期结束动画由尾到头运行。 ！反转的是关键帧和animation-timing-function。 alternate-reverse：反向交替， 反向开始交替。 2.8 animation-fill-mode 属于动画外的范畴，定义动画在动画外的状态。 用来控制元素在动画外（from之前，to之后）的状态 值： animation-fill-mode: none; animation-fill-mode: backwards; from之前的状态与from保持一致（动画开始时从from开始的，延时也是在from位置开始的，动画结束后回到原来位置） animation-fill-mode: forwards; to之后的状态与to保持一致（动画结束后停留在结束时的位置） animation-fill-mode: both; 延时从from位置开始，结束时停留在结束时的位置。 2.9 animation-play-state 定义了动画执行的运行和暂停 值： running：当前动画正在运行（默认值）。 paused：当前动画以被停止。]]></content>
      <categories>
        <category>前端</category>
        <category>CSS</category>
        <category>CSS3</category>
      </categories>
      <tags>
        <tag>动画</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS3之过渡]]></title>
    <url>%2F2019%2F10%2F28%2FB-12-CSS3%E4%B9%8B%E8%BF%87%E6%B8%A1%2F</url>
    <content type="text"><![CDATA[1. transition介绍1.1 注意！ ！过渡在CSS3中比较重要。 并不是所有的属性都有过渡。 查看地址：https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_animated_properties 1.2 概述 众所周知，css效率极高，其变化的过程往往都是在一瞬间完成，速度极快。 CSS transition 提供了一种在更改CSS属性时控制动画速度的方法。 其可以让属性变化成为一个持续一段时间的过程，而不是立即生效的。比如，将一个元素的颜色从白色改为黑色，通常这个改变是立即生效的，使用 CSS transitions 后该元素的颜色将逐渐从白色变为黑色，按照一定的曲线速率变化。这个过程可以自定义。 1.3 简写属性transition transition是一个简写属性，用于 transition-property,transition-duration,transition-timing-function, 和transition-delay。 CSS过渡由简写属性 transition 定义是最好的方式，可以避免属性值列表长度不一，节省调试时间 。 默认值： transition-delay: 0s transition-duration: 0s transition-property: all transition-timing-function: ease ！注意 在transition属性中，各个值的书写顺序是很重要的：第一个可以解析为时间的值会被赋值给transition-duration，第二个可以解析为时间的值会被赋值给transition-delay。 只写一个时间，会给周期；延时会使用默认值（不延时）。 给多个属性设置不同的过渡周期/延时：每个属性前面写一个/两个时间（其它的使用默认值），前一个属性与后一个属性之间用逗号隔开。 推荐抒写顺序：transition: 过渡时间 过渡样式 过渡形式 延迟时间 [，过渡时间 过渡样式 过渡形式 延迟时间] 兼容性 transition 可以不用厂商前缀，不过鉴于标准刚刚稳定，对于基于 Webkit的浏览器仍然需要厂商前缀。如果想兼容旧版本的浏览器那么也需要厂商前缀（例如Firefox 15 及之前版本, Opera 12 及之前版本)。 2.使用2.1 transition-property 指定应用过渡属性的名称。 默认值：all，表示所有可被动画的属性都表现出过渡动画。 可以指定多个 property 。 属性值： none：没有过渡动画。 all：所有可被动画的属性都表现出过渡动画。 IDENT：属性名称 （可以指定多个）。 2.2transition-duration 属性以秒或毫秒为单位指定过渡动画所需的时间。 默认值：0s ，表示不出现过渡动画。 可以指定多个时长，每个时长会被应用到由 transition-property 指定的对应属性上。 如果指定的时长个数小于属性个数，那么时长列表会重复。 如果时长列表更长，那么该列表会被裁减。 两种情况下，属性列表都保持不变。 属性值 以毫秒或秒为单位的数值 类型。 表示过渡属性从旧的值转变到新的值所需要的时间。 如果时长是 0s ，表示不会呈现过渡动画，属性会瞬间完成转变。不接受负值。 ！一定要加单位(不能写0 一定要写0s 1s,0s,1s)！ 2.3 transition-timing-function CSS属性受到 transition的影响，会产生不断变化的中间值，而 CSS transition-timing-function 属性用来描述这个中间值是怎样计算的。 实质上，通过这个函数会建立一条加速度曲线，因此在整个transition变化过程中，变化速度可以不断改变。 默认值：ease 可以规定多个timing function,通过使用 transition-property属性，可以根据主列表(transition property的列表)给每个CSS属性应用相应的timing function。 如果timing function的个数比主列表中数量少，缺少的值被设置为初始值（ease）。 如果timing function比主列表要多，timing function函数列表会被截断至合适的大小。这两种情况下声明的CSS属性都是有效的。 属性值： 1、ease：（加速然后减速）默认值，ease函数等同于贝塞尔曲线(0.25, 0.1, 0.25, 1.0)。 2、linear：（匀速），linear 函数等同于贝塞尔曲线(0.0, 0.0, 1.0, 1.0)。 3、ease-in：(加速)，ease-in 函数等同于贝塞尔曲线(0.42, 0, 1.0, 1.0)。 4、ease-out：（减速），ease-out 函数等同于贝塞尔曲线(0, 0, 0.58, 1.0)。 5、ease-in-out：（加速然后减速），ease-in-out 函数等同于贝塞尔曲线(0.42, 0, 0.58, 1.0)。 6、cubic-bezier： 贝塞尔曲线（https://cubic-bezier.com/#.17,.67,.83,.67） 7、是跳动着变化的。 step-start：等同于steps(1,start) step-end：等同于steps(1,end) steps(,[,[start|end]]?)– 第一个参数：必须为正整数，指定函数的步数– 第二个参数：指定每一步的值发生变化的时间点（默认值end） 2.4 transition-delay transition-delay属性规定了在过渡效果开始作用之前需要等待的时间。 默认值：0s 可以指定多个延迟时间，每个延迟将会分别作用于你所指定的相符合的css属性。 如果指定的时长个数小于属性个数，那么时长列表会重复。 如果时长列表更长，那么该列表会被裁减。两种情况下，属性列表都保持不变 属性值：值以秒（s）或毫秒（ms）为单位，表明动画过渡效果将在何时开始。 取值为正时会延迟一段时间来响应过渡效果。 取值为负时会导致过渡立即开始。 2.5 当属性值的列表长度不一致时 transition-property: background,width,height;transition-duration: 3s,2s;transition-delay:3s,2s;transition-timing-function:linear; transition-property: background,width,height;transition-duration: 3s,2s,3s;transition-delay:3s,2s,3s;transition-timing-function:linear,ease,ease; ！超出的情况下是会被全部截掉的！ ！不够的时候，关于时间的会重复列表，transition-timing-function的时候使用的是默认值(ease)。 2.6 检测过渡是否完成 当过渡完成时触发一个事件，在符合标准的浏览器下，这个事件是 transitionend, 在 WebKit 下是webkitTransitionEnd。 每一个拥有过渡的属性在其完成过渡时都会触发一次transitionend事件。 在transition完成前设置 display: none，事件同样不会被触发。 详细代码： 1234567window.onload=function()&#123; var testNode = document.querySelector(&quot;#test&quot;); //dom2事件 testNode.addEventListener(&quot;transitionend&quot;,function()&#123; alert(&quot;over&quot;) &#125;)&#125; 3. 过渡的天坑3.1 坑1 此坑是由异步和css的快速解析造成的(浏览器的渲染机制造成的)。 如下一段代码： 1234567891011121314151617181920212223242526272829body&#123; width: 60%; height: 60%; border: 1px solid; margin: 100px auto 0;&#125;#test&#123; width: 100px; height: 100px; background: pink; text-align: center; position: absolute; left: 0; right: 0; bottom: 0; top: 0; margin: auto; transition-property: width; transition-duration: 2s; transition-timing-function: linear;&#125;body:hover #test&#123; transition-property: height; width: 200px; height: 200px;&#125; 上述代码中的注意点（分析）： 鼠标移入body时，width会瞬间变成200px(因为来不及过渡，过渡就变成了height)，height会发生过渡。 鼠标移除body时，widyh会发生过渡(从200px到100px的过渡),而height不会再发生过渡（因为body没有处于hover状态）。 3.1 坑2 此坑与解析有关 ！transition在元素首次渲染还没有结束的情况下是不会被触发的。 如下一段代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051 body&#123; width: 60%; height: 60%; border: 1px solid; margin: 100px auto 0; &#125; #test&#123; width: 100px; height: 100px; background: pink; text-align: center; position: absolute; left: 0; right: 0; bottom: 0; top: 0; margin: auto; transition-property: width; transition-duration: 2s; transition-timing-function: linear; &#125; // 在body标签后加此内容，过渡是不会触发的。 &lt;script type=&quot;text/javascript&quot;&gt; var test = document.querySelector(&quot;#test&quot;); test.style.width=&quot;300px&quot;;&lt;/script&gt; // 在body标签后的script标签中加此内容，过渡会触发。 window.onload=function()&#123; setTimeout(function()&#123; var test = document.querySelector(&quot;#test&quot;); test.style.width=&quot;300px&quot;; &#125;,3000) &#125; // 在body标签后的script标签中加此内容，过渡不会触发。 window.onload=function()&#123; var test = document.querySelector(&quot;#test&quot;); test.style.width=&quot;300px&quot;; test.style.width=&quot;100px&quot;; &#125; // 在body标签后的script标签中加此内容，过渡不会触发。 window.onload=function()&#123; var test = document.createElement(&quot;div&quot;); test.id=&quot;test&quot;; document.documentElement.appendChild(test); setTimeout(function()&#123; test.style.width=&quot;300px&quot;; &#125;,2000) &#125; 上述代码中的注意点（分析）： 第一段代码不会产生过渡 分析：因为这两行代码是同步代码，解析时就会执行(alert等只是会阻塞)，此时页面并没有渲染完毕，过渡在页面首次渲染之前(实际上只是在初始化)，所以不会发生。 第二段代码会产生过渡 分析：因为这段代码是异步代码（单独的window.onload或者是单独的定时器也可以），解析时页面已经渲染完毕. 第三段代码不会产生过渡 分析：因为宽度没有改变（上面的样式直接被下面的样式覆盖）。 第四段代码不会产生过渡 分析：因为是新加进去的节点，所以过渡时页面并没有渲染完毕，所以不会发生过渡。（如果把过渡的代码放入定时器中过渡就可以发生了）]]></content>
      <categories>
        <category>前端</category>
        <category>CSS</category>
        <category>CSS3</category>
      </categories>
      <tags>
        <tag>过渡</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Node.js之Node基础]]></title>
    <url>%2F2019%2F10%2F25%2FF-02-Node-js%E4%B9%8BNode%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[1. node 简介1.1 介绍 Node.js是一个能够在服务器端运行JavaScript的开放源代码、 跨平台JavaScript运行环境。 Node采用Google开发的V8引擎运行js代码，使用事件驱动、非阻塞和异步I/O模型等技术来提高性能，可优化应用程序的传输量和规模。 Node大部分基本模块都用JavaScript编写。 Node主要用于编写像Web服务器一样的网络应用，这和 PHP 和 Python 是类似的。 Node.js允许通过JS和一系列模块来编写服务器端应用和网络相关的应用。 核心模块包括文件系统I/O、网络（HTTP、TCP、UDP、DNS、 TLS/SSL等）、二进制数据流、加密算法、数据流等等。Node模块的API形式简单，降低了编程的复杂度。 使用框架可以加速开发。常用的框架有Express.js、Socket.IO 和Connect等。Node.js的程序可以在Microsoft Windows、 Linux、Unix、Mac OS X等服务器上运行。 Node.js也可以使用CoffeeScript、TypeScript、Dart语言，以及其他能够编译成JavaScript的语言编程。 1.2 用途 Web服务API，比如REST 实时多人游戏 后端的Web服务，例如跨域、服务器端的请求 基于Web的应用 多客户端的通信，如即时通信1.2 下载 中文官网：http://nodejs.cn/ 2. COMMONJS规范2.1 出现环境 ECMAScript标准的缺陷 没有模块系统 标准库较少 没有标准接口 ！缺乏管理系统 模块化 如果程序设计的规模达到了一定程度，则必须对其进行模块化。 模块化可以有多种形式，但至少应该提供能够将代码分割为多个源文件的机制。 CommonJS 的模块功能可以帮我们解决该问题。 CommonJS规范 CommonJS规范的提出，主要是为了弥补当前JavaScript没有模块化标准的缺陷。 CommonJS规范为JS指定了一个美好的愿景，希望JS能够在任何地方运行。 CommonJS对模块的定义十分简单： 模块引用 、模块定义 、模块标识2.2 模块 模块引用 require()方法：这个方法接受模块标识，以此将一个模块引入到当前运行环境中。 模块引用的示例代码： var math = require(&#39;math&#39;); 模块定义 exports对象用于导出当前模块的方法或者变量，并且它是唯一的导出的出口。 在模块中还存在一个module对象，它代表模块自身，而exports是module的属性。 在Node中一个文件就是一个模块。 模块标识 模块标识其实就是模块的名字，也就是传 递给require()方法的参数，它必须是符合 驼峰命名法的字符串，或者是以.、..开头的 相对路径、或者绝对路径。 模块的定义十分简单，接口也十分简洁。每个模块具有独立的空间，它们互不干扰，在引用时也干净利落。 Node的模块实现 Node中虽然使用的是CommonJS规范，但是其自身也对规范做了一些取舍。 在Node中引入模块，需要经历如下3个步骤：路径分析 —&gt; 文件定位 —&gt; 编译执行 在Node中，模块分为三类：一类是底层由 C++编写的内建模块；一类是Node提供的核心模块；还有一类是用户编写的模块，称为文件模块。2.3 包（package） 将多个模块组合为一个完整的功能，就是一个包。包实际上就是一个压缩文件，解压以后还原为目录。 CommonJS的包规范允许我们将一组相关的模块组合到一起，形成一组完整的工具。 CommonJS的包规范由 包结构 和 包描述文件 两个部分组成。 包结构(符合规范的目录，应该包含如下文件： )： bin- 二进制的可执行文件，一般都是一些工具包中才有 lib- js文件 doc- 文档 test- 测试代码 package.json- 包的描述文件 包描述文件用于表达非代码相关的信息， 它是一个JSON格式的文件(package.json)，位于包的根目录下，是包的重要组成部分。 package.json：它是一个json格式的文件，在它里面保存了包各种相关的信息。 package.json中的一些字段：name(包名)、version(版本)、dependencies(依赖)、main(包的主要的文件)、bin(运行的代码)2.4 npm（Node Package Manager node的包管理器） CommonJS包规范是理论，NPM是其中一种实践。 对于Node而言，NPM帮助其完成了第三 方模块的发布、安装和依赖等。借助NPM， Node与第三方模块之间形成了很好的一个生态系统。 通过npm可以对node中的包进行上传、下载、搜索等操作。 npm会在安装完node以后，自动安装。 npm命令 npm -v 查看npm的版本 npm 帮助说明 npm search 包名 搜索模块包 npm install 包名 在当前目录安装指定的包 npm install 包名 -g 全局安装模式安装包（一般都是一些工具） npm r/remove 包名 删除一个包 npm install 文件路径 从本地安装 npm install 包名 –registry=地址 从镜像源安装 npm config set registry 地址 设置镜像源 npm的常用指令 npm -v 查看npm的版本 npm version 查看所有模块的版本 npm init 初始化项目（创建package.json） npm i 包名 安装指定的包 npm i 包名 --save 安装指定的包并添加依赖 npm i 包名 -g 全局安装 （一般都是一些工具） npm i 安装当前项目所依赖的包 npm s 包名 搜索包 npm r 包名 删除一个包 2.5 Buffer Buffer(缓冲区) 从结构上看Buffer非常像一个数组，Buffer是用来存储二进制数据的,它的元素(显示)为16进制的两位数。 实际上一个元素就表示内存中的一个字节。 实际上Buffer中的内存不是通过JavaScript分配的，而是在底层通过C++申请的。 也就是我们可以直接通过Buffer来创建内存中的空间。 Buffer的操作 使用Buffer保存字符串 let str = &quot;你好 wcy&quot;; let buf = Buffer.from(str , &quot;utf-8&quot;); 创建指定大小的Buffer对象 let buf = Buffer.alloc(1024*8); Buffer的方法： Buffer.from(字符串)：将一个字符串中内容保存到一个buffer中 buf.toString()： 将buffer转换为一个字符串 Buffer.alloc(size)：创建一个指定大小的buffer对象 Buffer.allocUnsafe(size)：创建一个指定大小的buffer对象，可以包含敏感数据 buf.write()； 向缓冲区中写入字符串 buf.fill()：将指定值填入到缓冲区的指定位置 buf.copy()：复制缓冲区 buf.slice()： 对缓冲区切片 Buffer.concat()：拼接缓冲区 2.6 文件系统（File System） fs模块： 在Node中，与文件系统的交互是非常重要的，服务器的本质就将本地的文件发送给远程的客户端。 在Node通过fs模块来对系统中的文件进行操作，fs模块是node中已经继承好了，不需要在使用npm下载，直接引入即可 引入fs：var fs = require(&quot;fs&quot;); 同步和异步调用： fs模块中的大部分操作都提供了两种方法，同步方法和异步方法。(同步方法带sync，异步方法没有sync，都需要回调函数) 同步文件系统会阻塞程序的执行，也就是除非操作完毕，否则不会向下执行代码。 异步文件系统不会阻塞程序的执行，而是在操作完成时，通过回调函数将结果返回。 打开和关闭文件： 打开文件 fs.open(path, flags[, mode], callback) fs.openSync(path, flags[, mode]) 关闭文件 `fs.close(fd,callback)` `fs.closeSync(fd);` 打开状态 – r：读取文件, 文件不存在则出现异常 – r+：读写文件, 文件不存在则出现异常 – rs：在同步模式下打开文件用于读取 – rs+：在同步模式下打开文件用于读写 – w：打开文件用于写操作 , 如果不存在则创建，如果存在则截断 – wx：打开文件用于写操作 , 如果 存在 则打开失败 – w+：打开文件用于读写 ,如果不存在则创建 ,如果存在则截断 – wx+：打开文件用于读写 , 如果 存在 则打开失败 – a：打开文件用于追加 , 如果不存在则创建 – ax：打开文件用于追加 , 如果路径存在则失败 – a+：打开文件进行读取和追加 , 如果不存在则创建该文件 – ax+：打开文件进行读取和追加 , 如果路径存在则失败 写入文件(同步写入、异步写入、简单写入、流式写入)。 读取文件(同步读取、异步读取、简单读取、流式读取)。 方法 打开文件 fs.open(path, flags[, mode], callback) fs.openSync(path, flags[, mode]) 读写文件 fs.write(fd, string[, position[, encoding]], callback) fs.writeSync(fd, string[, position[, encoding]]) fs.read(fd, buffer, offset, length, position, callback) fs.readSync(fd, buffer, offset, length, position) 关闭文件 fs.close(fd,callback) fs.closeSync(fd); 简单文件读取和写入 fs.writeFile(file, data[, options], callback) fs.writeFileSync(file, data[, options]) fs.readFile(path[, options], callback) fs.readFileSync(path[, options]) - 流式文件读取和写入 - 流式读取和写入适用于一些比较大的文件 `fs.createWriteStream(path[, options])` `fs.createReadStream(path[, options])`​​​​​​​​​​​]]></content>
      <categories>
        <category>前端</category>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MongoDB之基础]]></title>
    <url>%2F2019%2F10%2F25%2FF-01-MongoDB%E4%B9%8B%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[1. MongoDB简介1.1 数据库（Database） 概述： 数据库是按照数据结构来组织、存储和管理数据的仓库。 程序都是在内存中运行的，一旦程序运行结束或者计算机断电，程序运行中的数据都会丢失。所以就需 要将一些程序运行的数据持久化到硬盘之中，以确保数据的安全性。 数据库就是数据持久化的最佳选择。 数据库就是存储数据的仓库。 分类： 关系型数据库 – MySQL、Oracle、DB2、SQL Server 、… – 关系数据库中全都是表。 非关系型数据库 – MongoDB、Redis 、…) – 键值对数据库 – 文档数据库MongoDB 1.2 MongoDB 简介 MongoDB是为快速开发互联网Web应用 而设计的数据库系统。 MongoDB的设计目标是极简、灵活、作为Web应用栈的一部分。 MongoDB的数据模型是面向文档的，所谓文档是一种类似于JSON的结构，简单理解 MongoDB这个数据库中存的是各种各样的 JSON。（BSON） 下载 官网：https://www.mongodb.com 下载地址：https://www.mongodb.org/dl/win32/ MongoDB的版本偶数版本为稳定版，奇数 版本为开发版。 MongoDB对于32位系统支持不佳，所以 3.2版本以后没有再对32位系统的支持。 2. MongoDB基本操作2.1 介绍 MongoDB是一个NoSQL的数据库。 MongoDB是一款文档型数据库。 数据库指的就是一个存储数据的仓库，数据库可以使我们完成对数据的持久化的操作。 MongoDB数据库中存储的数据的基本单位就是文档，MongoDB中存储的就是文档，所谓文档其实就是一个“JSON”。 MongoDB中的“JSON”我们称为BSON，比普通的JSON的功能要更加的强大。 MongoDB数据库使用的是JavaScript进行操作的，在MongoDB含有一个对ES标准实现的引擎，在MongoDB中所有ES中的语法中都可以使用。 2.2 MongoDB的基本的指令 启动服务器：mongod --dbpath 路径 --port 端口号 启动客户端：mongo 2.3 MongoDB的CRUD的操作 基本操作 use 数据库：进入指定的数据库 show dbs：显示所有的数据库 show collections：显示数据库中所有的集合 db： 显示当前所在的数据库 向数据库中插入文档(这里collection指的是集合名) db.collection.insert() insert()可以向集合中插入一个或多个文档。 当向集合中插入文档时，如果没有给文档指定_id属性，则数据库会自动为文档添加_id，该属性用来作为文档的唯一标识。 _id可以自己指定，如果指定了数据库就不会在添加了。如果指定_id ，也必须确保它的唯一性。 示例： 1234567891011&lt;!-- 用insert()插入一个数据 --&gt;db.students.insert(&#123;name:&quot;wcy&quot;,age:20,gender:&quot;男&quot;&#125;);&lt;!-- 用insert()插入多个数据 --&gt;db.students.insert([ &#123;name:&quot;way&quot;,age:19,gender:&quot;男&quot;&#125;, &#123;name:&quot;wby&quot;,age:20,gender:&quot;女&quot;&#125;, &#123;name:&quot;wcy&quot;,age:21,gender:&quot;女&quot;&#125;]); db.collection.insertOne() 向集合中插入一个文档。 db.collection.insertMany() 向集合中插入多个文档。 查询数据库中的文档(这里collection指的是集合名) db.collection.find() 可以根据指定条件从集合中查询所有符合条件的文档。 find({}) 表示查询集合中所有的文档 返回的是一个数组。 示例： 123&lt;!-- 用find()查询数据 --&gt;db.students.find(&#123;age:19 , name:&quot;way&quot;&#125;);db.students.find(&#123;age:21&#125;); db.collection.findOne() 查询第一个符合条件的文档 返回的是一个对象 db.collection.find().count() 查询符合条件的文档的数量 修改数据库中的文档 db.collection.update(查询条件,新对象) 可以修改、替换集合中的一个或多个文档 update()默认情况下会使用新对象来替换旧的对象 update()默认只会修改一个 如果需要修改指定的属性，而不是替换需要使用修改操作符来完成修改。$set 可以用来修改文档中的指定属性$unset 可以用来删除文档的指定属性 示例： 1234567891011121314151617 // 替换db.students.update(&#123;name:&quot;wby&quot;&#125;,&#123;age:20&#125;); // 修改 db.stus.update( &#123;&quot;_id&quot; : ObjectId(&quot;59c219689410bc1dbecc0709&quot;)&#125;, &#123;$set:&#123; gender:&quot;男&quot;, address:&quot;流沙河&quot; &#125;&#125; ) // 删除 db.stus.update( &#123;&quot;_id&quot; : ObjectId(&quot;59c219689410bc1dbecc0709&quot;)&#125;, &#123;$unset:&#123; address:1 &#125;&#125; ) db.collection.updateOne() 修改集合中的一个文档 db.collection.updateMany() 修改集合中的多个文档 db.collection.replaceOne() 替换集合中的一个文档 删除集合中的文档 db.collection.remove() 删除集合中的一个或多个文档（默认删除多个） db.collection.deleteOne() 删除集合中的一个文档 db.collection.deleteMany() 删除集合中的多个文档 清空一个集合 db.collection.remove({}) 删除一个集合 db.collection.drop() 删除一个数据库 db.dropDatabase() 一般数据库中的数据都不会删除，所以删除的方法很少调用。]]></content>
      <tags>
        <tag>mongo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[E-02-ES6之其它]]></title>
    <url>%2F2019%2F10%2F24%2FE-02-ES6%E4%B9%8B%E5%85%B6%E5%AE%83%2F</url>
    <content type="text"><![CDATA[1. 字符串扩展1.1 介绍 includes(str) : 判断是否包含指定的字符串 startsWith(str) : 判断是否以指定字符串开头 endsWith(str) : 判断是否以指定字符串结尾 repeat(count) : 重复指定次数1.2 使用 2. 数值扩展2.1 介绍 二进制与八进制数值表示法: 二进制用0b, 八进制用0o Number.isFinite(i) : 判断是否是有限大的数 Number.isNaN(i) : 判断是否是NaN Number.isInteger(i) : 判断是否是整数 Number.parseInt(str) : 将字符串转换为对应的数值 Math.trunc(i) : 直接去除小数部分 3. 数组扩展3.1 介绍 Array.from(v) : 将伪数组对象或可遍历对象转换为真数组 Array.of(v1, v2, v3) : 将一系列值转换成数组 find(function(value, index, arr){return true}) : 找出第一个满足条件返回true的元素 findIndex(function(value, index, arr){return true}) : 找出第一个满足条件返回true的元素下标 4. 对象扩展4.1 介绍 Object.is(v1, v2) 判断2个数据是否完全相等 Object.assign(target, source1, source2..) 将源对象的属性复制到目标对象上 直接操作 __proto__ 属性 let obj2 = {}; obj2.__proto__ = obj1; 5. 深度克隆5.1 介绍 数据类型：数据分为基本的数据类型(String, Number, boolean, Null, Undefined)和对象数据类型 基本数据类型： 特点： 存储的是该对象的实际数据 对象数据类型： 特点： 存储的是该对象在栈中引用，真实的数据存放在堆内存里 复制数据 基本数据类型存放的就是实际的数据，可直接复制 let number2 = 2; let number1 = number2; 克隆数据：对象/数组 区别： 浅拷贝/深度拷贝 判断： 拷贝是否产生了新的数据还是拷贝的是数据的引用 知识点：对象数据存放的是对象在栈内存的引用，直接复制的是对象的引用 let obj = {username: &#39;kobe&#39;} let obj1 = obj; // obj1 复制了obj在栈内存的引用 常用的拷贝技术 arr.concat(): 数组浅拷贝 arr.slice(): 数组浅拷贝 JSON.parse(JSON.stringify(arr/obj)): 数组或对象深拷贝 但不能处理函数数据 浅拷贝包含函数数据的对象/数组 深拷贝包含函数数据的对象/数组 6. Set和Map数据结构6.1 介绍 Set容器 : 无序不可重复的多个value的集合体 Set() Set(array) add(value) delete(value) has(value) clear() size Map容器 : 无序的 key不重复的多个key-value的集合体 Map() Map(array) set(key, value)//添加 get(key) delete(key) has(key) clear() size 7. for of 循环7.1 介绍 for(let value of target){}循环遍历 遍历数组 遍历Set 遍历Map 遍历字符串 遍历伪数组]]></content>
      <categories>
        <category>前端</category>
        <category>ECMAScript</category>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ES6之常用]]></title>
    <url>%2F2019%2F10%2F24%2FE-01-ES6%E4%B9%8B%E5%B8%B8%E7%94%A8%2F</url>
    <content type="text"><![CDATA[1. let关键字1.1 介绍 作用：与var类似, 用于声明一个变量 特点: 在块作用域内有效 不能重复声明 不会预处理, 不存在提升 应用: 循环遍历加监听 使用let取代var是趋势 1.2 代码示例2. const关键字2.1 介绍 作用：定义一个常量 特点: 不能修改 其它特点同let 应用：保存不用改变的数据2.2 3. 变量的解构赋值3.1 总结 理解：从对象或数组中提取数据, 并赋值给变量(多个) 对象的解构赋值：let {n, a} = {n:&#39;tom&#39;, a:12} 数组的解构赋值：let [a,b] = [1, &#39;wcy&#39;]; 用途：给多个形参赋值。3.2 4. 模板字符串4.1 介绍 作用：简化字符串的拼接 模板字符串必须用 ` ` 包含 变化的部分使用${xxx}定义4.2 5. 简化的对象写法5.1 介绍 省略同名的属性值 省略方法的function 例如:1234567let x = 1;let y = 2;let point = &#123; x, y, setX (x) &#123;this.x = x&#125;&#125;; 5.26. 箭头函数6.1 介绍 作用: 定义匿名函数 基本语法: 没有参数：() =&gt; console.log(&#39;xxxx&#39;) 一个参数：i =&gt; i+2 大于一个参数：(i,j) =&gt; i+j 函数体不用大括号: 默认返回结果 函数体如果有多个语句, 需要用{}包围，若有需要返回的内容，需要手动返回。 使用场景：定义回调函数。 箭头函数的特点： 简洁。 箭头函数没有自己的this，箭头函数的this不是调用的时候决定的，而是在定义的时候处在的对象就是它的this。 扩展理解： 箭头函数的this看外层的是否有函数，如果有，外层函数的this就是内部箭头函数的this，如果没有，则this是window。6.2 7. 三点运算符7.1 用途 rest(可变)参数： 用来取代arguments 但比arguments灵活,只能是最后部分形参参数。1234567function add(...values) &#123; let sum = 0; for(value of values) &#123; sum += value; &#125; return sum;&#125; 扩展运算符： let arr1 = [1,3,5]; let arr2 = [2,...arr1,6]; arr2.push(...arr1); 7.2 8. 形参默认值8.1 介绍 当不传入参数的时候默认使用形参里的默认值。 1234function Point(x = 1,y = 2) &#123;this.x = x;this.y = y;&#125; 8.29. Promise对象9.1 介绍 理解： Promise对象: 代表了未来某个将要发生的事件(通常是一个异步操作) 有了promise对象, 可以将异步操作以同步的流程表达出来, 避免了层层嵌套的回调函数(俗称’回调地狱’) ES6的Promise是一个构造函数, 用来生成promise实例 使用promise基本步骤(2步)： 创建promise对象： 调用promise的then() promise对象的3个状态： pending：初始化状态 fullfilled：成功状态 rejected：失败状态 应用： 使用promise实现超时处理 使用promise封装处理ajax请求9.2 10. Symbol10.1 介绍前言：ES5中对象的属性名都是字符串，容易造成重名，污染环境 概念：ES6中的添加了一种原始数据类型symbol(已有的原始数据类型：String, Number, boolean, null, undefined, 对象) 特点： Symbol属性对应的值是唯一的，解决命名冲突问题 Symbol值不能与其他数据进行计算，包括同字符串拼串 for in, for of遍历时不会遍历symbol属性。 使用： 调用Symbol函数得到symbol值 let symbol = Symbol(); let obj = {}; obj[symbol] = &#39;hello&#39;; 传参标识 let symbol = Symbol(&#39;one&#39;); let symbol2 = Symbol(&#39;two&#39;); console.log(symbol);// Symbol(&#39;one&#39;) console.log(symbol2);// Symbol(&#39;two&#39;) 内置Symbol值 除了定义自己使用的Symbol值以外，ES6还提供了11个内置的Symbol值，指向语言内部使用的方法。Symbol.iterator 对象的Symbol.iterator属性，指向该对象的默认遍历器方法(后边讲)10.2 11. Iterator遍历器11.1 概念： iterator是一种接口机制，为各种不同的数据结构提供统一的访问机制 作用： 1、为各种数据结构，提供一个统一的、简便的访问接口； 2、使得数据结构的成员能够按某种次序排列 3、ES6创造了一种新的遍历命令for…of循环，Iterator接口主要供for…of消费。 作原理： 创建一个指针对象，指向数据结构的起始位置。 第一次调用next方法，指针自动指向数据结构的第一个成员 接下来不断调用next方法，指针会一直往后移动，直到指向最后一个成员 每调用next方法返回的是一个包含value和done的对象，{value: 当前成员的值,done: 布尔值} value表示当前成员的值，done对应的布尔值表示当前的数据的结构是否遍历结束。 当遍历结束的时候返回的value值是undefined，done值为false 生具备iterator接口的数据(可用for of遍历) 1、Array 2、arguments 3、set容器 4、map容器 5、String … 12. Generator函数12.1 概念： ES6提供的解决异步编程的方案之一 Generator函数是一个状态机，内部封装了不同状态的数据， 用来生成遍历器对象 可暂停函数(惰性求值), yield可暂停，next方法可启动。每次返回的是yield后的表达式结果 点： function 与函数名之间有一个星号 内部用yield表达式来定义不同的状态 generator函数返回的是指针对象(接11章节里iterator)，而不会执行函数内部逻辑 调用next方法函数内部逻辑开始执行，遇到yield表达式停止，返回{value: yield后的表达式结果/undefined, done:false/true} 再次调用next方法会从上一次停止时的yield处开始，直到最后 yield语句返回结果通常为undefined， 当调用next方法时传参内容会作为启动时yield语句的返回值。 13. async函数13.1async函数(源自ES2017) 概念： 真正意义上去解决异步回调的问题，同步流程表达异步操作 本质： Generator的语法糖 语法： async function foo(){await 异步操作;await 异步操作 } 特点： 不需要像Generator去调用next方法，遇到await等待，当前的异步操作完成就往下执行。 返回的总是Promise对象，可以用then方法进行下一步操作。 async取代Generator函数的星号*，await取代Generator的yield。 语意上更为明确，使用简单，经临床验证，暂时没有任何副作用。 14. class14.1 通过class定义类/实现类的继承 在类中通过constructor定义构造方法 通过new来创建类的实例 通过extends来实现类的继承 通过super调用父类的构造方法 重写从父类中继承的一般方法 15. Module JS模块化]]></content>
      <categories>
        <category>前端</category>
        <category>ECMAScript</category>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ES5之常用]]></title>
    <url>%2F2019%2F10%2F24%2FE-01-ES5%E4%B9%8B%E5%B8%B8%E7%94%A8%E7%82%B9%2F</url>
    <content type="text"><![CDATA[1. ECMA简介 它是一种由ECMA组织（前身为欧洲计算机制造商协会）制定和发布的脚本语言规范。 JavaScript 是ECMA的实现, 但术语ECMAScript和JavaScript平时表达同一个意思。 JS包含三个部分： ECMAScript（核心） 扩展==&gt;浏览器端 BOM（浏览器对象模型） DOM（文档对象模型） 扩展==&gt;服务器端 Node ES的几个重要版本 ES5 : 09年发布 ES6(ES2015) : 15年发布, 也称为ECMA2015 ES7(ES2016) : 16年发布, 也称为ECMA2016 (变化不大) 2. ES5 常用点2.1 严格模式 理解: 除了正常运行模式(混杂模式)，ES5添加了第二种运行模式：”严格模式”（strict mode）。 这种模式使得Javascript在更严格的语法条件下运行。 目的/作用 消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为。 消除代码运行的一些不安全之处，为代码的安全运行保驾护航。 为未来新版本的Javascript做好铺垫。 使用 在全局或函数的第一条语句定义为: &#39;use strict&#39;; 如果浏览器不支持, 只解析为一条简单的语句, 没有任何副作用。 语法和行为改变 必须用var声明变量。 禁止自定义的函数中的this指向window。 创建eval作用域。 对象不能有重名的属性。 2.2 JSON对象 JSON：传输数据的一种格式。JSON字符串只有JSON对象和JSON数组两种形式。 JSON.stringify(obj/arr) js对象(数组)转换为json对象(数组) JSON.parse(json) json对象(数组)转换为js对象(数组) 2.3 Object扩展ES5给Object扩展了好一些静态方法, 常用的2个： Object.create(prototype, [descriptors]) 作用: 以指定对象为原型创建新的对象。 为新的对象指定新的属性, 并对属性进行描述： – value：指定值 – writable：标识当前属性值是否是可修改的, 默认为false – configurable：标识当前属性是否可以被删除 默认为false – enumerable：标识当前属性是否能用for in 枚举 默认为false Object.defineProperties(object, descriptors) 作用: 为指定对象定义扩展多个属性。 get ：用来获取当前属性值得回调函数。 set ：修改当前属性值得触发的回调函数，并且实参即为修改后的值。 存取器属性：setter,getter一个用来存值，一个用来取值。 Object本身的两个方法： get propertyName(){} 用来得到当前属性值的回调函数 set propertyName(){} 用来监视当前属性值变化的回调函数 2.4 Array扩展 Array.prototype.indexOf(value): 得到值在数组中的第一个下标 Array.prototype.lastIndexOf(value) : 得到值在数组中的最后一个下标 Array.prototype.forEach(function(item, index){}) : 遍历数组 Array.prototype.map(function(item, index){}) : 遍历数组返回一个新的数组，返回加工之后的值 Array.prototype.filter(function(item, index){}) : 遍历过滤出一个新的子数组， 返回条件为true的值 2.5 Function扩展 Function.prototype.bind(obj)： 作用: 将函数内的this绑定为obj, 并将函数返回 面试题: 区别bind()与call()和apply()? 都能指定函数中的this call()/bind()传入的参数是值，apply()传入的参数是数组 call()/apply()是立即调用函数 bind()是将函数返回]]></content>
      <categories>
        <category>前端</category>
        <category>ECMAScript</category>
        <category>ES5</category>
      </categories>
      <tags>
        <tag>ES5</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Zepto.js之zepto基础]]></title>
    <url>%2F2019%2F10%2F23%2FD-02-Zepto%E4%B9%8BZepto%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[1. zepto入门1.1 什么是zepto？ 概念：移动端开发框架,是jquery的轻量级代替品；API及语句同jquery相似，但文件更小(可压缩至8KB)。 是目前功能完备的库中，最小的一个。 zepto是轻量级的JavaScript库，专门为移动端定制的框架。 与jquery有着类似的API，俗称：会jquery就会用zepto。 1.2 zepto的特点 针对移动端。 轻量级，压缩版本只有8kb左右。 响应，执行快。 语法，API大部分同jquery一样，学习难度低，上手快。 同jquery一样以$作为核心函数和核心对象。 目前API完善的框架中体积最小的一个 1.3 zepto官网 http://zeptojs.com/(官网) https://github.com/madrobby/zepto(github下载地址) 2. zepto与jquery的前世今生2.1 相同点 zepto与jquery 都是优秀的js函数库 语法，API大部分都一样（zepto是按照jquery的思路来设计的） zepto相当于jquery的子集 同jquery一样都是以$为核心函数 2.2 不同点 jquery: 针对的更多的是PC端 体积较重 API较为完善 zepto: 针对的是移动端 体积较轻 有自己独特的移动端事件 3. zepto core(核心)3.1 核心函数 jQuery核心函数$ 1.作为函数调用：(参数) 参数为函数function 参数为选择器字符串 参数为DOM code 参数为html标签字符串 2.作为对象使用：(方法) 发送ajax请求($.ajax()、$.get()、$.post()) 其他api方法($.each()、$.isArray()、$.isFunction()、$.trim()、…) zepto： 以上jquery的特性zepto同样适用 3.2 与jquery相同的API jQuery对象 1.概念：jquery核心函数$()调用返回的对象就是jquery对象,而且时一个伪数组（可能有只有一个）； 2.使用： addClass() removeClass() show() find() append() add() css() index() … 3.3 与jquery不同的API attr与prop jQuery：attr与prop的区别 1、prop多用在标签的固有属性，布尔值属性。比如：a标签的href，class，selected等。 2、attr多用在自定义属性上。 3、在jquery中如果用attr去获取布尔值属性且该布尔值属性在标签体内没有定义的时候，会返回undefined zepto： 在zepto中用attr也可以获取布尔值属性。 prop在读取属性的时候优先级高于attr，布尔值属性的读取还是建议用prop。 坑！——zepto中removeProp()的方法。在1.2及以上才支持。 DOM操作 jQuery： jquery中插入DOM元素的时候添加配置对象（属性选择器：id，class…)的时候不会显示。 配置对象：就是在主体上再添加一些修饰。 zepto： 插入DOM元素的时候添加配置对象的时候可以添加进去，并且添加的配置对象的内容会直接反应在标签属性内，且可以操作，影响对应的DOM元素。 each方法: $.each(collection, function(index, item){ … }) jQuery： 可以遍历数组,以index，item的形式， 可以遍历对象，以key-value的形式 不可以遍历字符串。 不可以遍历json字符串 zepto: 可以遍历数组,以index，tiem的形式， 可以遍历对象，以key-value的形式， 可以遍历字符串同对数组的遍历方法一样以index-item的形式。 offset()的区别 jQuery： 获取匹配元素在当前视口的相对偏移。 返回的对象包含两个整型属性：top 和 left。此方法只对可见元素有效。 获取width，height时为undefined。 zepto: 获得当前元素相对于视口的位置。 返回一个对象含有： top, left, width和height(获取的宽高是盒模型可见区域的宽高)。 获取宽高的区别 jQuery获取宽高的方法: width(),height(),.css() —&gt; 返回的是content内容区的宽高，没有单位px; .css(‘width’) —&gt; 可以获取content内容区的宽高，padding，border的值，有单位px; 也可以利用innerHeight(),outerHeight(),innerWidth(),outerWidth()等来获取padding和border的值。 zepto: 用width(),height()是根据盒模型决定的，并且不包含单位px，包含padding的值,border的值。 zepto中没有innerHeight(),innerWidth()，outerHeight(),outerWidth() 用.css(‘width’)获取的是content的宽高。也可以用.css(‘padding’)，.css(‘border-width’)单独获取padding，border的值。 事件委托 jQuery： 在jquery中事件委托只是找相应的event.target触发元素进行的回调函数执行,其他的并不关心。 live： 三个参数：触发元素 触发的事件类型 触发事件的回调函数 1.7以后已经不 支持live了。 $(&#39;#a&#39;).live(&#39;click&#39;,function(){alert(&#39;a&#39;);}) delegate： 三个参数：触发元素 触发的事件类型 触发事件的回调函数 $(&#39;#box&#39;).delegate(&#39;.a&#39;,&#39;click&#39;,function(){alert(&#39;delegate&#39;);}) zepto: 在zepto的官网表示已经废除了live，delegate等。 用on(): 三个参数：触发的事件类型 触发元素 触发事件的回调函数 $(&#39;#box&#39;).on(&quot;click&quot;,&#39;.b&#39;,function(){alert(&#39;b事件&#39;);}); 委托的事件先被依次放入数组队列里，然后由自身开始往后找直到找到最后，期间符合条件的元素委托的事件都会执行。 坑!在zepto中事件委托,同时满足以下四个会踩坑！ 1、委托在同一个父元素,或者触发的元素的事件范围小于同类型事件(冒泡能冒到自身范围) 2、同一个事件 3、委托关联 操作的类要进行关联 4、绑定顺序—从当前的位置往后看 了解：重排比重绘要快得多，因为重排是主线程，重绘线程还未来得及开启，就已经重排了。 事件委托: 将子元素的事件委托给父元素。 原理：冒泡原理 好处：只需要绑定一次，新添加的子元素也可以拥有这个事件（一次绑定，终生受用）。 绑定在父元素身上，子元素触发（event.target指向触发事件的子元素）。 隐藏元素 jQuery： jquery可以获取隐藏元素的宽高 用width()和height() zepto: zepto无法获取隐藏元素宽高。 4. zepto事件机制4.1 touch Event 同jQuery类似事件： on() —&gt; 绑定事件处理程序。 off() —&gt; 方法移除用目标oon绑定的事件处理程序。 bind() —&gt; 为每个匹配元素的特定事件绑定事件处理函数，可同时绑定多个事件，也可以自定义事件。 one() —&gt; 为每一个匹配元素的特定事件（像click）绑定一个一次性的事件处理函数。只执行一次。 trigger() —&gt; 触发有bind定义的事件（通常是自定义事件，自定义事件是在页面加载的时候触发的）。 unbind() —&gt; bind的反向操作，删除匹配元素所绑定的bind事件。 zepto 的 touch方法 tap() —&gt; 点击事件 利用在document上绑定touch事件来模拟tap事件的，并且tap事件会冒泡到document上 singleTap() —&gt; 单击事件 doubleTap() —&gt; 双击事件 longTap() —&gt; 当一个元素被按住超过750ms触发。 swipe, swipeLeft, swipeRight, swipeUp, swipeDown —&gt; 当元素被划过(同一个方向滑动距离大于30px)时触发。(可选择给定的方向)在一个方向滑动大于30px即为滑动。否则算点击。 touch-action: none;/* 用通配符设置这个为auto以后btn点击事件不能触发了，设置none以后滑动事件不能触发了，所以可以只静止#btn，而不是用通配符*/。 4.2 Event zepto有自己的一套事件机制，并且对不同的浏览器做了兼容的内部的封装处理。 新版本的zepto中舍弃了bind，delegate，die，同样jquery中舍弃了live，delegate等 统一使用on，off等标准事件来绑定事件。 5. form5.1 serialize() 在Ajax post请求中将用作提交的表单元素的值编译成 URL-encoded 字符串。—key(name)/value 5.2 serializeArray() 将用作提交的表单元素的值编译成拥有name和value对象组成的数组。 不能使用的表单元素，buttons，未选中的radio buttons/checkboxs 将会被跳过。 5.3 submit() 为 “submit” 事件绑定一个处理函数，或者触发元素上的 “submit” 事件。 当参数function没有给出时，触发当前表单“submit”事件，并且执行默认的提交表单行为，除非阻止默认行为。 6. ajax细节剖析 请求验证码案例分析]]></content>
      <categories>
        <category>前端</category>
        <category>js库</category>
        <category>Zepto.JS</category>
      </categories>
      <tags>
        <tag>zepto</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AngularJS之Angular基础]]></title>
    <url>%2F2019%2F10%2F23%2FD-01-AngularJS%E4%B9%8BAngular%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[1. AngularJS入门1.1 AngularJS是什么? Google开源的前端JS结构化框架： https://angularjs.org/ AngularJS特性和优点： 双向数据绑定。 声明式依赖注入。 解耦应用逻辑, 数据模型和视图。 完善的页面指令。 定制表单验证。 Ajax封装。 与jQuery的比较： jQuery：是一个JS函数库，封装简化dom操作。 Angular：是一个JS结构化框架，主体不再是DOM, 而是页面中的动态数据。 AngularJS能做什么项目 构建单页面(SPA)Web应用或Web App应用 单页面应用（SPA）：single page application 单页面应用的特点： – 1.将所有的活动局限于一个页面。 – 2.当页面有部分数据发生了变化不会去刷新整个页面，而是局部刷新 – 3.利用ajax技术，路由。 应用： – 饿了吗: https://www.ele.me/home/ – 微信网页版: https://wx.qq.com/ – 知乎周报: https://zhuanlan.zhihu.com/Weekly – 后台管理应用: 阿里云, 土豆后台, 唯品会… 1.2 开发一个Angular应用的步骤 引入AnaularJS文件：&lt;script type=’text/javascript’ src=”路径”&gt;&lt;/script&gt; 使用AngularJS的语法。 使用ng-inspector插件（不必须）。 2. 四个重要概念2.1 双向数据绑定 数据绑定：数据从一个地方A转移(传递)到另一个地方B, 而且这个操作由框架来完成。 双向数据绑定：双向数据绑定: 数据可以从View(视图层)流向Model（模型）, 也可以从Model流向View。 视图(View): 也就是我们的页面(主要是Andular指令和表达式) 模型(Model) : 作用域对象(当前为$rootScope), 它可以包含一些属性或方法 当改变View中的数据, Model对象的对应属性也会随之改变: ng-model指令 数据从View —&gt; Model 当Model域对象的属性发生改变时, 页面对应数据随之更新: 表达式中的数据从Model —&gt; View 2.2 依赖注入(DI) 依赖对象：完成某个特定的功能需要某个对象才能实现，这个对象就是依赖对象。 依赖注入：依赖的对象以形参的形式被注入进来使用，这种方式就是依赖注入。 ！！！构造函数的形参必须是特定的名称($scope), 否则Angular无法注入，会抛出异常。 隐式声明依赖注入：模块名.contrller(‘作用域对象名’,function ($scope) {一些变量和方法}); 显式声明依赖注入：模块名.controller(‘作用域对象名’，[‘$scope’,function (a) {一些变量和方法}]); angular的 ‘$scope’对象就是依赖对象，并且是依赖注入的形式进行使用。 回调函数的event的就是依赖对象，回调函数有形参就是依赖注入。 2.3 MVC模式2.4 M-V-VM模式3. 三个重要对象3.1 作用域(scope) 作用域对象: 一个js实例对象, ng-app指令默认会创建一个根作用域对象($rootScope) 它的属性和方法与页面中的指令或表达式是关联的。 3.2 控制器(controller) 控制器: 用来控制AngularJS应用数据的 实例对象 ng-controller : 指定控制器构造函数, Angular会自动new此函数创建控制器对象 同时Angular还有创建一个新的域对象$scope, 它是$rootScope的子对象 在控制器函数中声明$scope形参, Angular会自动将$scope传入。 3.3 模块(module) 1.创建模块对象： 语法：angular.module: (ng-app = “模块名”) 1.可以在全局位置创建、注册、获取Angular模块。 2.所有模块都必须使用这个机制注册才能在应用中生效。 3.创建模块示例：var myModule = angular.module(‘模块名’,[放置第三方模块，没有就写空数组]); 2.使用模块对象：定义控制器、定义服务、定义指令、… 3.4 一起使用详情 1.创建模块对象：用全局变量angular对象 语法：angular.module: (ng-app = “模块名”) 1.可以在全局位置创建、注册、获取Angular模块。 2.所有模块都必须使用这个机制注册才能在应用中生效。 3.创建模块示例：var myModule = angular.module(‘模块名’,[放置第三方模块，没有就写空数组]); 2.生成作用域对象： 语法：controller(名称，constructor【构造函数】); —&gt; 返回值是模块对象. 1.用法示例：mymodule.contrller(‘作用域对象名’,function ($scope) {一些变量和方法});【这种方法叫隐式声明依赖注入】。 2.给要创建模块的元素添加：ng-controller = “生成的作用域对象名”。 3.也可以链式调用。 3.补充： $scope：构造函数中必须传入$scope形参，而且这个形参必须是$scope。 1.形参只能写固定的变量名$scope。 2.一旦文件压缩，将不能使用，会报错。 3.推荐写法：controller(名称，[‘$scope’,function (a) {一些变量和方法}]); 【这种方法叫显式声明依赖注入】 。 4. 两个页面语法4.1 表达式 使用Angular表达式： 语法: 作用: 显示表达式的结果数据。 是单向数据绑定，用来显示数据的，从作用域对象的指定属性名上取值。 注意: 表达式中引用的变量必须是当前域对象有的属性(包括其原型属性)。 通常有一个返回值，可以放在任何需要值得地方，比如函数调用的参数，一个变量名，一个运算…。 操作的数据： 基本类型数据: number/string/boolean undefined, Infinity, NaN, null解析为空串: “”, 不显示任何效果 对象的属性或方法 数组 表达式和语句的区别： 1、表达式：通常有一个返回值，可以放在任何需要值得地方，比如函数调用的参数，一个变量名，一个运算。 2、语句：通常表示一个完整的执行单位，一段完整的js可执行的代码，有的语句也可以用表达式来执行，叫做表达式语句。 3、区别：语句用封号结尾，有些语句我们没有加封号，比如console.log虽然我们没有加封号，但也是语句，因为js引擎会自动解析并且加上封号。js引擎在解析的时候会自动的加上封号。 4、特例：if语句，就不用加封号 可也是完整的语句。 4.2 指令 Angular指令介绍： Angular为HTML页面扩展的: 自定义标签属性或标签。 与Angular的作用域对象(scope)交互,扩展页面的动态表现力。 Angular常用指令： ！构造函数中的方法和变量都必须写成：$scope.变量名 / $scope.方法名。 ng-app: 指定模块名，angular管理的区域。(ng-app(指令) : 告诉angular核心它管理当前标签所包含的整个区域,并且会自动创建$rootScope根作用域对象) 使用1：在body标签(当前作用域的标签)中添加：ng-app = &quot;模块名&quot; 使用2：没有模块的时候在body标签(当前作用域的标签)中添加：ng-app ng-model： 双向绑定，输入相关标签。(ng-model : 将当前输入框的值与谁关联(属性名:属性值), 并作为当前作用域对象($rootScope)的属性) 使用：在标签中添加：ng-model = &quot;变量名&quot; ng-model是双向数据绑定。 ng-init： 初始化数据 使用：在当前作用域的标签内添加：ng-init = &quot;变量名 = &#39;初始值&#39;&quot; ng-init 用来初始化当前作用域变量，单向数据绑定（内存到页面）。 ng-click： 调用作用域对象的方法（点击时） 使用：在标签中添加：ng-click = &quot;方法名()&quot; ng-controller: 指定控制器构造函数名，内部会自动创建一个新的子作用域（外部的） 使用：给要创建模块的元素添加：ng-controller = &quot;作用域对象名&quot; ng-bind： 解决使用表达式时显示数据闪屏（在很短时间内显示语法） 使用：在标签中添加：ng-bind = &quot;表达式里面的内容&quot; ng-repeat： 遍历数组显示数据， 数组有几个元素就会产生几个新的作用域. $index(索引), $first, $last, $middle, $odd, $even —–&gt; 剩下的对应的都是布尔值. 使用：ng-repeat = &quot;一个变量（例如：person，相当于var person） in persons&quot; ng-show: 布尔类型， 如果为true才显示 使用：在标签中写上: ng-show = &quot;布尔值/返回布尔值的变量名（方法名）&quot;，标签中的内容就会【true】/不会【false】显示 ng-hide: 布尔类型， 如果为true就隐藏 使用：在标签中写上: ng-hidden = &quot;布尔值/返回布尔值的变量名（方法名）&quot;，标签中的内容就不会【true】/会【false】显示 ng-class: 动态引用定义的样式 {aClass:true, bClass:false} 使用：在标签中添加 :`ng-class = ng-style = {类名1: true/falase , 类名2：true/falase}` `ng-class = &quot;对象名&quot;` `ng-class = ng-style = {类名1: $odd , 类名2：$evev} // 隔行变色` ng-style: 动态引用通过js指定的样式对象 {color:’red’, background:’blue’} 使用：在标签中添加: ng-style = {属性名: &#39;属性值&#39;} 或者 ng-style = &quot;对象名【如：myStyle】&quot; ng-click: 点击监听, 值为函数调用, 可以传$event 使用：在标签中添加: ng-click = &quot;方法名()&quot; ng-mouseenter: 鼠标移入监听, 值为函数调用, 可以传$event 使用：在标签中添加: ng-mouseenter = &quot;方法名()&quot; ng-mouseleave: 鼠标移出监听, 值为函数调用, 可以传$event 使用：在标签中添加: ng-mouseleave = &quot;方法名()&quot; 5. 面试题 面试题1：开发的两种方式及区别： 1.声明式：注重结果。声明式是对命令的局部包装。（像考试的选择/填空题） 2.命令式：注重过程。（像考试的解答题） 面试题2： $(function(){}) = document.ready 文档（结构）加载完毕。 window.onload 整个页面加载完毕，包括图片。]]></content>
      <categories>
        <category>前端</category>
        <category>框架</category>
        <category>AngularJS</category>
      </categories>
      <tags>
        <tag>angular</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS2.1之字体与文本]]></title>
    <url>%2F2019%2F10%2F22%2FB-26-CSS2-1%E4%B9%8B%E6%96%87%E6%9C%AC%2F</url>
    <content type="text"><![CDATA[1. 字体1.0 字体：font 是否可继承：是 用法：font: 加粗 斜体 小型大写 大小/行高 字体 使用顺序：前边几个加粗、斜体和小型大写的顺 序无所谓，也可以不写，但是 大小和字体 必须写且必须写到后两个。 1.1 字体大小：font-size 默认值：浏览器默认字体大小 是否可继承：是 常用取值： /* &lt;length&gt;，长度值 */ font-size: 12px; font-size: 0.8em; 可取值： /* &lt;absolute-size&gt;，绝对大小值 */ font-size: xx-small; font-size: x-small; font-size: small; font-size: medium; font-size: large; font-size: x-large; font-size: xx-large; /* &lt;relative-size&gt;，相对大小值 */ font-size: larger; font-size: smaller; /* &lt;length&gt;，长度值 */ font-size: 12px; font-size: 0.8em; /* &lt;percentage&gt;，百分比值(占父元素字体大小的百分比) */ font-size: 80%; font-size: inherit; // 继承100% 1.2 字体样式：font-style 默认值：font-style: normal; 是否继承：是 取值： font-style: normal; // 常规字形 font-style: italic; // 斜体（常规字形的倾斜） font-style: oblique; // 倾斜体 font-style: oblique 40deg; // 倾斜指定度数 1.3 字体加粗：font-weight 默认值：font-weight: normal; 是否继承：是 常用取值： font-weight: normal; font-weight: bold; font-weight: lighter; font-weight: bolder; 可取值： /* Keyword values */ font-weight: normal; font-weight: bold; /* Keyword values relative to the parent */ font-weight: lighter; font-weight: bolder; /* Numeric keyword values */ font-weight: 1 font-weight: 100; font-weight: 100.6; font-weight: 123; font-weight: 200; font-weight: 300; font-weight: 321; font-weight: 400; font-weight: 500; font-weight: 600; font-weight: 700; font-weight: 800; font-weight: 900; font-weight: 1000; /* Global values */ – font-weight: inherit; – font-weight: initial; – font-weight: unset; 1.4 字体族：font-family 默认值：浏览器默认字体 是否继承：是 常用取值：font-family: Arial, Helvetica, sans-serif; 可取值：略 1.5 小型大写字母：font-variant（不是css2.1的内容） 默认值：font-variant: normal; 是否继承：是 常用取值：font-variant:small-caps 可取值：(文档上这样写的) font-variant: normal; font-variant: no-common-ligatures proportional-nums; font-variant: common-ligatures tabular-nums; font-variant: small-caps slashed-zero; 2. 文本2.1 文本颜色：color 默认值：浏览器默认文本颜色(黑色) 是否继承：是 常用取值：色彩关键字、rgb()、rgba() 可取值： 色彩关键字 color: pink; rgb() // 红-绿-蓝（red-green-blue (RGB)）模式` color: #ff0033; color: rgb(255, 0, 51);也可以百分比 hsl() // 色相-饱和度-明度模式` color: hsl(120, 60%,70%); 第一个是数值，后两个是百分比 rgba() // 红-绿-蓝-阿尔法模式(a 表示透明度：0=透明；1=不透明) color: rgba(255,0,0,0.4); hsla() // 色相-饱和度-明度-阿尔法模式(a 表示透明度：0=透明；1=不透明) color: hsla(240,100%,50%, 0.7); 2.2 水平对齐方式：text-align 默认值：text-align: start; 是否继承：是 常用取值： text-align: center; 可取值： text-align: start; // 如果内容方向是左至右，则等于left，反之则为right。 text-align: end; // 如果内容方向是左至右，则等于right，反之则为left。 text-align: left; // 行内内容向左侧边对齐。 text-align: right; // 行内内容向右侧边对齐。 text-align: center; // 行内内容居中。 text-align: justify; // 文字向两侧对齐，对最后一行无效。 text-align: justify-all; // 和justify一致，但是强制使最后一行两端对齐。 text-align: match-parent; // 和inherit类似，区别在于start和end的值根据父元素的direction确定，并被替换为恰当的left或right。 2.3 垂直对齐方式：vertical-align 一般设置垂直居中用：line-height = height ； 注意 vertical-align 只对行内元素、表格单元格元素生效：不能用它垂直对齐块级元素。 默认值：浏览器默认对齐方式 是否继承：是 常用取值： vertical-align: bottom; vertical-align: middle; vertical-align: top; 可取值： /* Keyword values */ 相对父元素的值: vertical-align: baseline; // 使元素的基线与父元素的基线对齐。 vertical-align: sub; // 使元素的基线与父元素的下标基线对齐。 vertical-align: super; // 使元素的基线与父元素的上标基线对齐。 vertical-align: text-top; // 使元素的顶部与父元素的字体顶部对齐。 vertical-align: text-bottom; // 使元素的底部与父元素的字体底部对齐。 vertical-align: middle; // 使元素的中部与父元素的基线加上父元素x-height（译注：x高度）的一半对齐。 相对行的值: vertical-align: top; // 使元素及其后代元素的顶部与整行的顶部对齐。 vertical-align: bottom; // 使元素及其后代元素的底部与整行的底部对齐。 /* values */ vertical-align: 10em; vertical-align: 4px; /* values */ vertical-align: 20%; 2.4 首行缩进：text-indent 默认值：不缩进 是否继承：是 常用取值： text-indent: 3mm; text-indent: 40px; 可取值： /* 长度值 */ text-indent: 3mm; text-indent: 40px; /* 百分比值取决于其包含块（containing block）的宽度*/ text-indent: 15%; /* 关键字 */ text-indent: 5em each-line; text-indent: 5em hanging; text-indent: 5em hanging each-line; 2.5 文本修饰：text-decoration 默认值：`text-decoration: none 是否继承：是 常用取值：(下划线、顶划线、删除线或者闪烁) text-decoration: none; text-decoration: underline; text-decoration: overline; text-decoration: line-through; 用法示例： text-decoration: underline red; // 红色下滑直线 text-decoration: wavy overline lime; // 绿色上划波浪线 text-decoration: line-through; // 黑色直的删除线 text-decoration: none; // 没有任何修饰 text-decoration: blink; // 闪烁 text-decoration: dashed underline overline; // 上下都有的黑色虚线 2.6 字符间距(英)：letter-spacing 默认值：letter-spacing: normal; // 于间距 0 是否继承：是 常用取值： letter-spacing: 0.3em; letter-spacing: 3px; 可取值： 关键字letter-spacing: normal; 长度letter-spacing: 0.3em; letter-spacing: 3px; letter-spacing: .3px; 2.7字符间距(中)：word-spacing 默认值：word-spacing: normal; // 于间距 0 是否继承：是 常用取值： word-spacing: 0.3em; word-spacing: 3px; 可取值： 关键字 word-spacing: normal; 长度 word-spacing: 0.3em; word-spacing: 3px; word-spacing: .3px; 百分比：通过指定受影响字符的宽度的百分比的方式来增加的间距。！我还不清楚怎么用 2.8 空白：white-space white-space CSS 属性是用来设置如何处理元素中的空白。 默认值：浏览器默认字体 是否继承：是 常用取值：font-family: Arial, Helvetica, sans-serif; 可取值： white-space: normal; // 连续的空白符会被合并，换行符会被当作空白符来处理。填充line盒子时，必要的话会换行。 white-space: nowrap; // 和 normal 一样，连续的空白符会被合并。但文本内的换行无效。 white-space: pre; // 连续的空白符会被保留。在遇到换行符或者&lt;br&gt;元素时才会换行。 white-space: pre-wrap; // 连续的空白符会被保留。在遇到换行符或者&lt;br&gt;元素，或者需要为了填充line盒子时才会换行。 white-space: pre-line; // 连续的空白符会被合并。在遇到换行符或者&lt;br&gt;元素，或者需要为了填充line盒子时会换行。 white-space: break-spaces;// 与 pre-wrap的行为相同，除了：！！！ ！任何保留的空白序列总是占用空间，包括在行尾。 ！每个保留的空格字符后都存在换行机会，包括空格字符之间。 ！这样保留的空间占用空间而不会挂起，从而影响盒子的固有尺寸（最小内容大小和最大内容大小）。 2.9 行高：line-height line-height CSS 属性用于设置多行元素的空间量，如多行文本的间距。对于块级元素，它指定元素行盒（line boxes）的最小高度。对于非替代的 inline 元素，它用于计算行盒（line box）的高度。 ！！！行高指的是行框的高，字体的大小指的是行内框的高。 （在前端开发中，如果要处理大量的文本，建议把行高设置的要比字体大） 默认值：line-height: normal;(浏览器默认，约为1.2) 是否继承：是 常用取值：常用line-height = height,h或者在设置font时：font-size/line-height 可取值： 关键词 normal line-height: normal; &lt;百分比&gt; line-height: 150%; // 与元素自身的字体大小有关。计算值是给定的百分比值乘以元素计算出的字体大小。百分比值可能会带来不确定的结果 &lt;数字&gt; line-height: 2.5; // 无单位数字&lt;数字&gt;乘以该元素的字体大小,这是设置line-height的推荐方法 &lt;长度&gt; line-height: 3em; // 以 em 为单位的值可能会产生不确定的结果 line-height: 32px;]]></content>
      <categories>
        <category>前端</category>
        <category>CSS</category>
        <category>CSS2.1</category>
      </categories>
      <tags>
        <tag>字体</tag>
        <tag>文本</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS2.1之margin重叠]]></title>
    <url>%2F2019%2F10%2F22%2FB-25-CSS2-1%E4%B9%8Bmargin%E9%87%8D%E5%8F%A0%2F</url>
    <content type="text"><![CDATA[1. margin重叠场景及解决办法：1.1 相邻兄弟盒子垂直外边距重叠： 解决方法一：在两个盒子之间加上 &lt;div style=&quot;height: 1px;&quot;&gt;&lt;/div&gt; 解决方法二：在两个盒子之间加上 &lt;br /&gt; 解决方法三：在下面的盒子外包裹一个div#wrap，并给#wrap设置overflow: hidden; 1.2 相邻父子盒子垂直外边距重叠 解决方法一：给父盒子添加上边框border: 1px solid; 解决方法二：给父盒子加上clearfix类： 12345.clearfix:before &#123; content:&quot;&quot;; display: table; clear: both;&#125;]]></content>
      <categories>
        <category>前端</category>
        <category>CSS</category>
        <category>CSS2.1</category>
      </categories>
      <tags>
        <tag>重叠</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS2.1之垂直水平居中]]></title>
    <url>%2F2019%2F10%2F22%2FB-24-CSS2-1%E4%B9%8B%E5%9E%82%E7%9B%B4%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD%2F</url>
    <content type="text"><![CDATA[1. 普通盒子水平垂直居中1.1 水平居中 普通盒子水平居中: margin: 0 auto; 盒子中的文本水平居中: text-align: center; 1.2 已知宽高的元素水平垂直居中： 方案： a.给父盒子开启相对定位：position: relative; b.给要垂直水平剧中的盒子开启绝对定位，并设置位置： position: absolute; left: 50%; top: 50%; margin-left: -50px; // 这里是 margin-left = 盒子宽度的一半 margin-top: -50px; // 这里是 margin-top = 盒子高度的一半 局限性：设置其它过渡动画时可能会受影响。 1.3 已知高度的元素水平垂直居中 开启绝对定位的子元素的宽高默认占父元素的100%；正常的div不给宽高，宽占父元素的100%，高度由内容撑开。 方案： a.给父盒子开启相对定位：position: relative; b.给要垂直水平剧中的盒子开启绝对定位，并设置位置： position: absolute; left: 0px; right: 0px; top: 0px; bottom: 0px; margin: auto; 原理： 绝对定位盒子的特性：高宽由内容撑开. 水平方向上： left(0) + right(0) + width(100) + padding(0) + margin(0) = 包含块padding区域的尺寸(400) 垂直方向上： top(0) + bottom(0) + height(100) + padding(0) + margin(0) = 包含块padding区域的尺寸(600) 1.4 未知高度的元素水平垂直居中 方案： a.给父盒子开启相对定位：position: relative; b.给要垂直水平剧中的盒子开启绝对定位，并设置位置： position: absolute; left: 50%; top: 50%; transform: translate3d(-50%,-50%,0); 2. 图片在盒子中水平垂直居中2.1 普通图片在盒子中水平垂直居中 方案1： a.给div设置：text-align: center;，此时图片水平居中； b.给盒子添加after伪元素，并设置#wrap:after{...}，此时图片下移了一段距离但不在正中间； content: &quot;&quot;;display: inline-block;height: 100%; vertical-align: middle; c.最后给图片设置：vertical-align: middle;，这时图片就在盒子中水平垂直居中了。]]></content>
      <categories>
        <category>前端</category>
        <category>CSS</category>
        <category>CSS2.1</category>
      </categories>
      <tags>
        <tag>居中</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS2.1之清除浮动]]></title>
    <url>%2F2019%2F10%2F22%2FB-23-CSS2-1%E4%B9%8B%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8%2F</url>
    <content type="text"><![CDATA[##清除浮动(解决高度塌陷) 让浮动的子元素撑开父级的高度 1. 给父级加高度 做法：直接给父级加高度: height: 100px; 缺点：扩展性不好。 2. 开启BFC 做法：触发bfc,利用浮动盒子的特点和定位盒子的特点:高宽都由内容撑开。 a.给父元素设置 overflow: hidden; b.给父元素设置 position: absolute; c.给父元素设置 float: left; 缺点： ie 6 7底下不支持BFC。 ! 其中b和c会影响页面的布局。 3. br标签 做法：在浮动的元素后面添加&lt;br clear=”all” /&gt;. 缺点： ie6 不支持. 违反了结构 行为 样式相分离的原则. 4. 空标签 做法：在浮动的元素后面添加&lt;div style=”clear: both;”&gt;&lt;/div&gt;。 缺点： 违反了结构 行为 样式相分离的原则. ie6下元素的最小高度为19px(可以尝试给元素的fontsize设为0—&gt; 2px). 5. 伪元素 + 开启haslayout 做法：用伪元素after清除浮动： 给父元素设置：.clearfix:after {content: “”; display: block/table; clear: both;} ie6给父元素设置：.clearfix {*zoom: 1;} 缺点：因为ie6 7 下不支持伪元素,所以要额外的去开启haslayout。]]></content>
      <categories>
        <category>前端</category>
        <category>CSS</category>
        <category>CSS2.1</category>
      </categories>
      <tags>
        <tag>高度塌陷</tag>
        <tag>清除浮动</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS2.1之一些小点]]></title>
    <url>%2F2019%2F10%2F21%2FB-22-CSS2-1%E4%B9%8B%E4%B8%80%E4%BA%9B%E6%B3%A8%E6%84%8F%E7%82%B9%2F</url>
    <content type="text"><![CDATA[1. 定位参照于谁来定位 没有定位: 包含块 相对定位: 元素本来的位置 固定定位: 视口 绝对定位：相对于包含块进行定位(没有开启定位的父元素，就相对于初始包含块进行定位；有开启定位的祖先元素，就相对于包含块进行定位)。 初始包含块是一个大小位置与视口相同的矩形，但并不等于视口，绝对定位也不是相对于浏览器视口进行定位的。 包含块：开启定位的祖先元素从内边距开始（内边距+内容去）的矩形区域。 2. width width属性的默认值是：auto (不写width属性与写 width:auto;效果一样) width属性的可继承性：否 width属性的值auto和100%的区别： auto包含了外边距，如果再加外边距，宽度不会变 100% 不包含外边距，如果再加外边距的话，宽度会变 另外： left、top、right、bottom、width、height 的默认值为auto； margin、padding 的默认值为0； boder-width ：如果不存在border-style 3. 百分比 不仅宽高可以使用百分比。 宽：占父元素宽度的百分之几。 高：占父元素高度的百分之几。 内外边距也可以使用百分比来表示： 内边距padding：不管是几个百分比值，都是padding = 父元素宽度的百分之几。 外边距margin：不管是几个百分比值，都是margin = 父元素宽度的百分之几。 百分比参照于谁？ width、margin、padding:包含块的width height:包含块的height left:包含块的width top :包含块的height 4. 浮动 浮动：img标签是一个行内块元素，浮动的初衷是让文字环绕图片。 注意： ！浮动提升半层，也就是说只是盒模型部分的脱离了文档流不占位置，其它的还在文档流中占位置。 ！当上面的元素浮动以后，下面的元素顶上来，但是没有浮动的元素的非盒模型内容被往外挤，而不是被遮挡。 5. 滚动条 滚动条出现规则： 页面内元素高度过高，自动出现系统滚动条（浏览器的滚动条）。 给html标签或者body标签中的其中一个加上overflow: scroll; ，滚动条出现在系统上（出现的是浏览器的滚动条）。 同时给html标签和body标签加上overflow: scroll; ，滚动条不仅出现在系统上（出现的是浏览器的滚动条），body上也出现滚动条。 移动端开发时一般都会静止系统的默认滚动条，使用自定义的body身上的滚动条。 静止系统默认滚动条： 1234html,body&#123; height: 100%; overflow: hidden;&#125; 用绝对定位模拟固定定位 静止系统滚动条，让body出现滚动条。 1.禁止系统滚动条 2.将滚动条加给body 3.让body的尺寸变为视口的尺寸 12345678910111213141516171819202122232425&lt;!-- css代码 --&gt;html&#123; height: 100%; overflow: hidden;&#125;body &#123; height: 100%; overflow: scroll; /*auto也可以*/&#125;#test &#123; position: absolute; left: 50px; top: 50px; width: 100px; height: 100px; background-color: pink;&#125; &lt;!-- html代码 --&gt;&lt;div id=&quot;test&quot;&gt;&lt;/div&gt;&lt;div style=&quot;height: 1000px;&quot;&gt; zi &lt;br /&gt;zi &lt;br /&gt;zi &lt;br /&gt; zi &lt;br /&gt;zi &lt;br /&gt;zi &lt;br /&gt; zi &lt;br /&gt;zi &lt;br /&gt;zi &lt;br /&gt;&lt;/div&gt; 6.]]></content>
      <categories>
        <category>前端</category>
        <category>CSS</category>
        <category>CSS2.1</category>
      </categories>
      <tags>
        <tag>css2.1</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue.js之vue基础指令]]></title>
    <url>%2F2019%2F10%2F21%2FC-02-Vue%E5%9F%BA%E7%A1%80%E6%8C%87%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[1. Vue基本代码和MVVM之间对应 Vue实例所控制的这个元素区域，就是MVVM中的 V。 new 出来的vm对象，就是MVVM中的 VM调度者。 Vue实例中的 data 就是MVVM中的 M。 代码示例及详细解析如下： 12345678910111213141516171819202122&lt;!-- html代码 --&gt;&lt;body&gt; &lt;!-- 后面new 的Vue实例，会控制这个元素中的所有内容。*Vue实例所控制的这个元素区域，就是MVVM中的 V* --&gt; &lt;div id=&quot;app&quot;&gt;&lt;p&gt;&#123;&#123; msg &#125;&#125;&lt;/p&gt;&lt;/div&gt; &lt;!-- js代码 --&gt; &lt;!-- 1.导入vue包 ，导入包之后，在浏览器内存中就多了一个Vue构造函数 --&gt; &lt;script src=&quot;./lib/vue-2.4.0.js&quot;&gt;&lt;/scrit&gt; &lt;script&gt; &lt;!-- 2.创建一个vue实例 --&gt; &lt;!-- *这里new出来的vm对象，就是MVVM中的 VM调度者* --&gt; var vm = new Vue(&#123; el: &apos;#app&apos;, // 表示当前new的这个Vue实例，要控制页面上的哪个区域 &lt;!-- *这里 data 就是MVVM中的 M*。 --&gt; data: &#123; // data属性中，存放的是el中要用到的数据 msg: &apos;欢迎学习Vue！&apos; // 通过vue提供的指令，很方便就能把数据渲染到页面上(前端的Vue之类的框架，不提倡手动操作DOM元素) &#125; &#125;); &lt;/scrit&gt;&lt;/body&gt; 2.指令2.1 插值表达式 语法： 用法示例：&lt;p&gt;&lt;/p&gt; 不会覆盖p标签中原有的内容，只会替换自己的合格占位符，不会清空元素内容。如：&lt;p&gt;这些内容可以显示这些内容也可以显示&lt;/p&gt; 如果网络比较慢，会出现闪烁的问题。 2.2 v-cloak 使用 v-cloak 能够解决插值表达式闪烁的问题。 用法示例：&lt;p v-cloak&gt;&lt;/p&gt; 2.3 v-text v-text 会覆盖元素中原本的内容(会清空元素内容)。 默认 v-text 是没有闪烁问题的。 用法示例：&lt;p v-text=&quot;msg&quot;&gt;一些会被覆盖的内容&lt;/p&gt; 2.4 v-html v-html 是用来显示html内容的 用法示例：&lt;p v-html=&quot;msg&quot;&gt;msg: &lt;h1&gt;这是html文本，但能正常显示为标题&lt;/h1&gt;&lt;/p&gt; 2.5 v-bind: v-bind 是Vue中提供的提供的属性绑定机制。 用法示例：&lt;input type=&quot;button&quot; value=&quot;&quot; v-bind:tittle=&quot;mytitle&quot;&gt;&lt;/p&gt; v-bind: 指令可以被简写为 :要绑定的属性 v-bind 中，可以写合法的js表达式，如：&lt;input type=&quot;button&quot; value=&quot;&quot; v-bind:title=&quot;mytitle + &#39;123&#39;&quot;&gt;mytitle是一个在Vue实例中的变量&lt;/p&gt; 2.6 v-on: v-on: 是Vue中提供的事件绑定机制。 用法示例：&lt;input type=&quot;button&quot; value=&quot;&quot; v-on:click=&quot;show&quot;&gt;show是一个在Vue实例中的方法&lt;/p&gt; v-on: 指令可以被简写为 @要绑定的事件 事件修饰符： .stop —&gt; 阻止冒泡 用法示例：&lt;input type=&quot;button&quot; value=&quot;戳它&quot; @click.stop=&quot;btnHandler&quot;&gt;btn在.inner的div中,btnHandler和divHandler是在Vue实例中的方法&lt;/p&gt; .prevent —&gt; 阻止默认事件 用法示例：&lt;a href=&quot;http://www.baidu.com&quot; @click.prevent=&quot;linkClick&quot;&gt;阻止链接跳转,linkClick是在Vue实例中的方法&lt;/p&gt; .capture —&gt; 添加事件侦听器时使用时间捕获模式 用法示例：&lt;input type=&quot;button&quot; value=&quot;戳它&quot; @click.capture=&quot;btnHandler&quot;&gt;btn在.inner的div中,btnHandler和divHandler是在Vue实例中的方法&lt;/p&gt; .self —&gt; 只当事件在该元素本身(比如不是子元素)触发时回调 用法示例： &lt;input type=&quot;button&quot; value=&quot;戳它&quot; @click.self=&quot;btnHandler&quot;&gt;btn在.inner的div中,btnHandler和divHandler是在Vue实例中的方法&lt;/p&gt; once —&gt; 事件只触发一次 用法示例1： (只阻止一次默认行为) &lt;a href=&quot;http://www.baidu.com&quot; @click.prevent.once=&quot;linkClick&quot;&gt;阻止链接跳转,linkClick是在Vue实例中的方法&lt;/p&gt; .self 和 .stop 的区别：.self 只会阻止自己身上冒泡行为的触发，并不会真正阻止 冒泡的行为；.stop是真正阻止 冒泡的行为的。 2.7 v-model 使用 v-model 指令，可以实现 表单元素和 Model 中数据的双向数据绑定。 v-model 只能运用在 表单元素(input[radio、text、address、email、…])、select、checkbox、textarea等中。 input 用法示例：&lt;input type=&quot;text&quot; style=&quot;width:100%;&quot; v-model=&quot;msg&quot;&gt;msg是一个在Vue实例中的变量&lt;/p&gt; 2.8 :style 直接在元素上通过 :style 的形式，书写样式对象 1&lt;h1 :style=&quot;&#123;color: &apos;red&apos;, &apos;font-size&apos;: &apos;40px&apos;&#125;&quot;&gt;这是一个标题&lt;/h1&gt; 将样式对象(对象就是无序键值对的集合)定义到data中，并直接引用到:style中 1&lt;h1 :style=&quot;h1StyleObj&quot;&gt;h1StyleObj:&#123;color: &apos;red&apos;, &apos;font-size&apos;: &apos;40px&apos;&#125;&lt;/h1&gt; 在:style中通过数组，引用多个data上的样式对象 1&lt;h1 :style=&quot;[h1StyleObj,h1StyleObj2]&quot;&gt;h1StyleObj2与h1StyleObj并列&lt;/h1&gt; 2.9 v-for2.10 v-if2.11 v-show]]></content>
      <categories>
        <category>前端</category>
        <category>框架</category>
        <category>Vue.js</category>
      </categories>
      <tags>
        <tag>指令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue.js之初识vue]]></title>
    <url>%2F2019%2F10%2F21%2FC-01-Vue%E4%B9%8B%E5%88%9D%E8%AF%86vue%2F</url>
    <content type="text"><![CDATA[1. 什么是Vue.js Vue.js 是目前最火的一个框架，React是最流行的一个框架(React除了开发网站，还可以开发手机App) Vue.js 是前端的主流框架之一，和Angular.js、React.js 一起，并称为前端三大主流框架！ Vue.js 是一套构建用户界面的框架，只关注视图层，它不仅易于上手，还便于与第三方库或既有项目整合。(Vue有配套的第三方类库，可以整合起来做大型项目的开发) 前端的主要工作？主要负责MVC中的V这一层；主要工作就是和界面打交道； 2. 为什么要学习流行框架 企业为了提高开发效率：在企业中，时间就是效率，效率就是金钱； 提高开发效率的发展历程：原生JS –&gt; jQuery之类的类库 –&gt; 前端模板引擎 –&gt; Angular.js / Vue.js (能够帮助我们减少不必要的DOM操作；提高渲染效率；双向数据绑定的概念【通过框架提供的指令，前端程序员只需要关心数据的业务逻辑，不用再关心DOM是如何渲染的了】) 在Vue中，一个核心的概念，就是让用户不再操作DOM元素，解放了用户的双手，让程序员可以更多的时间去关注业务逻辑； 增强自己就业时候的竞争力。 人无我有，人有我优 你平时不忙的时候，都在干嘛？ 3. 框架和库的区别 框架：是一套完整的解决方案；对项目的侵入性较大，项目如果需要更换框架，则需要重新架构整个项目。 node中的express； 库(插件)：提供某一个小功能，对项目的侵入性较小，如果某个库无法完成某些需求，可以很容易切换到其它库实现需求。 1.从jQuery切换到Zepto 从EJS切换到art-template 4. Node(后端)中的MVC与前端中的MVVM之间的区别 MVC是后端的分层开发概念； MVVM是前端视图层的概念，主要关注于视图层分离，也就是说：MVVM把前端的视图层分为了三部分： Module View VM ViewModule 为什么有了MVC还要有MVVM？详情见图解]]></content>
      <categories>
        <category>前端</category>
        <category>框架</category>
        <category>Vue.js</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS2.1之三列布局]]></title>
    <url>%2F2019%2F10%2F21%2FB-21-CSS2.1%E4%B9%8B%E4%B8%89%E5%88%97%E5%B8%83%E5%B1%80%2F</url>
    <content type="text"><![CDATA[1.布局1.1 圣杯布局1.2 双飞翼布局1.3 粘连布局 思想：将footer固定在最底部（没有滚动条的时候在屏幕的最底部，有滚动条的时候在整个页面的最底部） 做法： a.写出#content和#footer两个div，#content中包裹一个.main； b.首先设置html和body的高度为100%，再设置#content的高度为100%（为了把#footer挤到最下 边） c.设置.main的下内边距padding-bottom = #footer的高度; d.设置#footer的上外边距margin-top = .main的下内边距padding-bottom; 代码： 123456789101112131415161718192021222324&lt;!-- html代码 --&gt; html,body &#123; height: 100% &#125; #content &#123; background-color: pink; min-height: 100%; &#125; #content .main &#123; padding-bottom: 50px; &#125; #footer &#123; height: 50px; margin-top: -50px; background-color: aquamarine; &#125;&lt;!-- html代码 --&gt; &lt;div id=&quot;content&quot;&gt; &lt;div class=&quot;main&quot;&gt; 文本 &lt;br /&gt;文本 &lt;br /&gt;文本 &lt;br /&gt;文本 &lt;br /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div id=&quot;footer&quot;&gt;footer&lt;/div&gt; 2.详细分析2.1 三列布局1 满足条件： 1.两边固定，中间自适应 ---&gt; 1.1 1.2 2.中间列要完整显示 ---&gt; 2.1！只考虑这两点设计出来的三列布局的缺点是：中间列不能够优先渲染，用户体验比较差。 思路： 1.1 每一列用一个div,共分为left、center、right三列； 1.2 用绝对定位（必须相对于初始包含块进行定位），将left和right位置固定； 2.1 给中间列一个内边距 padding = 左右列的width； 代码： 1234567891011121314151617181920212223242526272829&lt;!-- css代码 --&gt;&lt;style&gt; * &#123; margin: 0; padding: 0; &#125; #left,#right &#123; width: 200px; background-color: pink; &#125; #left &#123; position: absolute; left: 0; top: 0 &#125; #right &#123; position: absolute; right: 0; top: 0; &#125; #center &#123; background-color: aquamarine; padding: 0px 200px; &#125;&lt;/style&gt; &lt;!-- html代码 --&gt; &lt;div id=&quot;left&quot;&gt;left&lt;/div&gt; &lt;div id=&quot;center&quot;&gt;center&lt;/div&gt; &lt;div id=&quot;right&quot;&gt;right&lt;/div&gt; 2.2 三列布局2 满足条件: 1.两边固定，中间自适应 ---&gt; 1.1 2.中间列要完整显示 ---&gt; 3.中间列要优先加载 ---&gt; 3.1 3.2！这样设计出来的三列布局的缺点是：中间列与左右两边的列直接有重叠，结构不干净。 思路： 1.1 每一列用一个div,共分为left、center、right三列； 3.1 使用浮动将left和right放到相应的位置； 3.2 使用浮动以后，由于left、center、right依次放置的，所以right浮不上去 1.为了保持左右一致，调换位置让两个都浮上去。(布局好了，但并没有达到想要的效果) 2.为了保持左右一致，调换位置让两个都浮不上去。—&gt; 为圣杯布局做准备 代码： 12345678910111213141516171819202122232425&lt;!-- css代码 --&gt;&lt;style&gt; * &#123; margin: 0; padding: 0; &#125; #left,#right &#123; width: 200px; background-color: pink; &#125; #left &#123; float: left; &#125; #right &#123; float: right; &#125; #center &#123; background-color: aquamarine; padding: 0px 200px; &#125;&lt;/style&gt; &lt;!-- html代码 --&gt; &lt;div id=&quot;left&quot;&gt;left&lt;/div&gt; &lt;div id=&quot;center&quot;&gt;center&lt;/div&gt; &lt;div id=&quot;right&quot;&gt;right&lt;/div&gt; 2.3 圣杯布局 满足条件: 1.两边固定，中间自适应---&gt; 1.1 1.2 2.中间列要完整显示---&gt; 2.1 3.中间列要优先加载---&gt; 3.1 3.2 思路： 1.1 每一列用一个div,共分为left、center、right三列； 3.1 使用浮动将left和right放到相应的位置； 3.2 使用浮动以后，由于left、center、right依次放置的，所以right浮不上去 2.为了保持左右一致，调换位置让两个都浮不上去。 3.3 让中间也浮动，把中间的宽度设置为100%,此时左右两边仍然像刚开始那样（两个都浮不上去）。 3.4 此时浮不上去是因为宽度不够了，所以利用margin-left(左外边距)为负值让三列布局到一行上。 3.5 使两边的列与中间的列没有重复。 1.给包裹三列布局的div一个左右的内边距（padding：0 左右两列的宽度） 2.使用相对定位：调整旁边两列的位置（使两列位置调整到两头）。 4.最后，设置页面（body）的最小宽度：min-width: (2 * (left宽 + right宽))px; ！这样设计出来的三列布局的缺点是：左右两列的高度与中间列的高度不能够同步改变。 5.使用伪等高布局原理实现高度同步： 1.设置左中右三列的padding-bottom: 10000px;用下内边距撑开高度需要同步的几个元素 2.设置左中右三列的margin-bottom: -1000px;再用负的下外边距收回盒子底部。 3.给包裹左中右三列的父div设置overflow: hidden; 伪等高原理: 用浮动使元素在同一列 padding-bottom: 10000px;用下内边距撑开高度需要同步的几个元素 margin-bottom: -1000px;再用负的下外边距收回盒子底部 给包裹的父div设置overflow: hidden; 代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364 &lt;!-- css代码 --&gt; &lt;style&gt; * &#123; margin: 0; padding: 0; &#125; body &#123; min-width: 600px; &#125; #header &#123; background-color: aqua; text-align: center; border: 1px solid deeppink; &#125; #footer &#123; background-color: gray; text-align: center; border: 1px solid deeppink; &#125; #content &#123; padding: 0px 200px; overflow: hidden; &#125; #content .left ,#content .right&#123; background-color: pink; width: 200px; &#125; #content .center,#content .left,#content .right&#123; padding-bottom: 10000px; margin-bottom: -10000px;&#125; #content .left &#123; position: relative; left: -200px; float: left; margin-left: -100%; &#125; #content .right &#123; position: relative; right: -200px; float: right; margin-left: -200px; &#125; #content .center &#123; float: left; width: 100%; background-color: aquamarine; &#125; .clearfix:after &#123; content: &quot;&quot;; display: table; clear: both; &#125; &lt;/style&gt; &lt;!-- html代码 --&gt; &lt;div id=&quot;header&quot;&gt;header&lt;/div&gt; &lt;div id=&quot;content&quot; class=&quot;clearfix&quot;&gt; &lt;div class=&quot;center&quot;&gt;center&lt;/div&gt; &lt;div class=&quot;left&quot;&gt; left&lt;br /&gt;left&lt;br /&gt;left&lt;br /&gt;left &lt;/div&gt; &lt;div class=&quot;right&quot;&gt;right&lt;/div&gt; &lt;/div&gt; &lt;div id=&quot;footer&quot;&gt;footer&lt;/div&gt; 2.4 双飞翼布局 满足条件： 同圣杯布局 思路： 同圣杯布局思路（只有3.5不同） 3.5 在center的里面放置一个div（.inner）用来放内容： 1.设置其内边距padding: 0 -200px; 2.或者设置其外边距margin: 0 -200px; 代码： 同圣杯布局代码,只需做如下修改：1234567891011&lt;!-- 添加如下css代码 --&gt;#content .center .inner &#123; /* margin: 0px 200px; */ padding: 0px 200px; &#125;&lt;!-- 修改html代码中center的结构 --&gt;&lt;div class=&quot;center&quot;&gt; &lt;div class=&quot;inner&quot;&gt; center里的inner &lt;/div&gt; &lt;/div&gt; 3.其它布局3.1 两列布局 左侧浮动，右侧宽度自适应。 应用场景：商品展示（商品一列，描述一列） 1.图片一列，描述一列(两列布局：一列浮动，一列只给高度) 2.将图片设置为左列的背景图片(方便调位置：background-position: 水平值 垂直值;)，右列放置文字说明（设置display: inline-block;,这样说明文字不会环绕在图片的右侧，只会出现在图片下方） 3.给右列设置文字过长的用省略号代替(这样的话就必须给右列设置高度)： white-space: nowrap; overflow: hidden; text-overflow:ellipsis; 包裹区域必须不能让子元素去撑开]]></content>
      <categories>
        <category>前端</category>
        <category>CSS</category>
        <category>CSS2.1</category>
      </categories>
      <tags>
        <tag>三列布局</tag>
        <tag>粘连布局</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git基本操作]]></title>
    <url>%2F2019%2F10%2F21%2Fgit%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[1. Git安装 git仓储有三个区：工作区、暂存区、版本库。 2. 初始化Git仓储/(仓库) 这个仓库会存放，git对我们项目代码进行备份的文件。 在项目目录右键打开 git bash。 命令：git init 3. 自报家门 就是在git中设置当前使用的用户是谁。 命令： 配置用户名：git config --global user.name &quot;你的的用户名&quot; 配置邮箱：git config --global user.email &quot;你的邮箱&quot; 4. 把代码存储到.git仓储中 1.把代码放到仓储的门口。 git add ./文件名 2.把仓储门口的代码放到里面的房间中去。 git commit -m &quot;对这次添加内容的说明&quot; 也可以一次性把修改的代码放到房间里(版本库)。 git add ./ git commit --all &quot;说明&quot; –all 表示把所有修改的文件提交到版本库。 5. 查看当前的状态 命令：git status 可以用来查看当前代码有没有被放到仓储中去。 一共有三种状态： 红色：工作区的代码没有放入暂存区，更没有到版本库中。 绿色：工作区的代码放入了暂存区，还没有保存到版本库。 工作区干净 (版本库保存的代码与工作区的代码一致)。 6. git中的忽略文件 .gitignore,在这个文件中可以设置要被忽略的文件或者目录。 被忽略的文件不会被提交到仓储里去。 在.gitignore中可以书写要被忽略的文件的路径。以/开头，一行写一个路径，这些路径所对应的文件都会被忽略，不会被提交到仓储中去。 写法： /.idea 会忽略.idea文件 /js 会忽略js目录里的所有文件 /js/*.js 会忽略js目录下的所有js文件 7. 查看日志 git log 查看历史提交的日志。 git log --oneline 可以看到简洁版的历史提交日志 就是查看提交过的历史（每一次提交的东西都会被git备份）。 8. 回退到指定的版本 git reset --hard Head~0 表示回退到上一次代码提交时的状态。 git reset --hard Head~1 表示回退到上上次代码提交时的状态。 git reset --hard [版本号] 可以通过版本号精确的回退到某一次提交时的状态。 需要先查看日志，然后看每一个日志前面的版本号(每个版本号都是唯一的)。 git reflog 可以看到每一次切换版本的记录：可以看到所有提交的版本号。 9. 分支 默认是有一个主分支 master。 9.1 创建分支 git branch dev 创建了一个dev分支。 在刚创建的dev分支里的东西和master分支里的东西是一样的。 9.2 切换分支 git checkout dev 切换到指定的分支，这里切换到名为dev的分支。 git branch 可以查看当前所在的分支。 9.3 合并分支 git merge dev 合并分支内容，把当前分支与指定的分支(dev)，进行合并。 当前分支是指 git branch 命令输出的前面有*号的分支 合并时如果有冲突，需要手动去处理，处理还需要再提交一次。 手动处理：git会自动合并冲突，然后需要自己去那个文件里面看哪个内容需要就留下，不需要的就手动从文件内容里面删除，然后再存储 10. GitHub https://github.com 不是git，只是一个网站 只不过这个网站提供了允许别人通过git上传代码的功能 10.1 github准备工作 在github中新建一个仓库(用来存储项目),仓库新建好之后有一个地址(点击HTTP会显示)，后面内容中的 [地址1] 为这个地址。 ! 用这个地址需要输入账号密码，可能会不安全，也比较麻烦，所以还可以使用密钥。 在github中新建一个密钥，将用git生成的密钥中的公钥文件中的内容添加到github中新建的密钥中。这个密钥也有一个地址(点击SSH会显示)，后面内容中的 [地址2] 为这个地址。 10.1 提交代码到github(当作git服务器来使用) git push [地址1] master 示例：git push https://github.com/huoqishi/test112.git 会把当前分支的内容传到远程的master分支上 git pull [地址1] master 示例：git pull https://github.com/huoqishi/test112.git 会把远程分支(master)的数据得到：(注意本地要初始化一个仓库) git clone [地址1] 会得到远程仓储相同的数据，如果多次执行会覆盖本地内容。 10.2 ssh方式上传代码 公钥、私钥，两者之间是有关联的。 用git生成公钥和私钥： ssh-keygen -t rsa -C &quot;邮箱&quot; 上传代码或者获取数据： git push [地址2] master git pull [地址2] master git clone [地址2] master 10.3 更简洁的上传方式 git remote add origin [地址2] 将地址用一个变量(这里用的origin)代替 git push origin -u master 在push时，加上-u参数，那么再下一次push时，就只需要写git push就能上传代码。 加上-u之后，git会将当前分支与远程的分支进行关联。 上传代码或者获取数据： git push git pull git clone 10.4 在push和pull操作冲突时 先pull,再push。]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS3之面试题]]></title>
    <url>%2F2019%2F10%2F15%2FB-11-CSS3%E4%B9%8B%E9%9D%A2%E8%AF%95%E9%A2%98%2F</url>
    <content type="text"><![CDATA[1. css基本问题 CSS名字：层叠样式表 CSS全拼：Cascading Style Sheets 样式表的组成： – 样式表由 规则 组成 – 规则由 选择器+声明块 组成 – 声明块由 一条一条的 声明 组成 – 声明由 CSS合法的属性名+属性值 组成 浏览器渲染样式表的顺序：从右往左 – 原因：算法的复杂程度低，性能比较高 阐述对CSS选择器优先级的的理解： ！详细说明见 CSS3之选择器 中的3.css声明的优先级。 CSS声明的优先级（CSS选择器的优先级说法是是错误的） 层叠：先按来源进行刷选；如果来源相同，按选择器的特殊性继续刷选；选择器的特殊性如果相同，按顺序继续刷选。 2. 用css做选项卡 用target伪类 代码如下： 12345678910111213141516171819202122232425262728293031323334&lt;!-- css代码： --&gt;&lt;style&gt; * &#123; margin: 0; padding: 0; &#125; a &#123; text-decoration: none; color: paleturquoise; &#125; div &#123; background-color:pink; width: 100px; height: 100px; text-align: center; font: bold 20px/100px &quot;微软雅黑&quot;; /* 大小和字体必须写在最后 */ display:none; &#125; :target &#123; display: block; &#125;&lt;/style&gt;&lt;!-- html代码： --&gt;&lt;body&gt; &lt;a href=&quot;#div1&quot;&gt;div1&lt;/a&gt; &lt;a href=&quot;#div2&quot;&gt;div2&lt;/a&gt; &lt;a href=&quot;#div3&quot;&gt;div3&lt;/a&gt; &lt;div id=&quot;div1&quot;&gt;div1&lt;/div&gt; &lt;div id=&quot;div2&quot;&gt;div2&lt;/div&gt; &lt;div id=&quot;div3&quot;&gt;div3&lt;/div&gt;&lt;/body&gt; 3. 制作自定义按钮 用表单伪类checked 代码如下： 1234567891011121314151617181920212223242526272829303132333435363738394041&lt;!-- css代码： --&gt; &lt;style&gt; * &#123; margin: 0; padding: 0; &#125; label &#123; float: left; &#125; label&gt;span &#123; display: inline-block; width: 100px; height: 100px; background-color: aqua; border-radius: 50%; &#125; input &#123; display: none; &#125; input:checked + span &#123; background-color: pink; &#125; &lt;/style&gt; &lt;!-- html代码： --&gt; &lt;body&gt; &lt;label &gt; &lt;input type=&quot;radio&quot; name=&quot;zi&quot;&gt; &lt;span&gt;&lt;/span&gt; &lt;/label&gt; &lt;label &gt; &lt;input type=&quot;radio&quot; name=&quot;zi&quot;&gt; &lt;span&gt;&lt;/span&gt; &lt;/label&gt; &lt;label &gt; &lt;input type=&quot;radio&quot; name=&quot;zi&quot;&gt; &lt;span&gt;&lt;/span&gt; &lt;/label&gt; &lt;/body&gt; 4. 导航栏最后一个不加边框 用not伪类 代码如下： 12345678910111213141516171819202122232425&lt;!-- css代码： --&gt;&lt;style&gt; * &#123; margin: 0; padding: 0; &#125; li &#123; list-style: none; float: left; padding: 0px 10px; &#125; li:not(:last-of-type) &#123; border-right: 1px solid pink; &#125; &lt;/style&gt; &lt;!-- html代码： --&gt; &lt;body&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;first&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;second&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;third&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;fourth&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;fifth&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; 5. css3中的过渡5.1 第一是对过渡的介绍 主要有过渡时间、过渡样式、过渡形式、延迟时间 4 个样式。 总结的需要注意的地方有： 不是所有的属性都有过渡，比如：如果元素设置了display: none;，身上的过渡就不会发生。 过渡时间一定要加单位，否则整个过渡机制可能失效（当你是一个列表的时候，设置0，就会失效）。 当属性值的列表长度不一致时： 超出的情况下是会被全部截掉的！ 不够的时候，关于时间的会重复列表，过渡形式会使用默认值(ease)！ 5.2 对过渡中的一些坑的了解 坑1：鼠标移入之后添加一个新的过渡： 在鼠标移入后，新的过渡会触发；旧的过渡不会触发，旧的属性变化会在瞬间完成。 在鼠标移出后，旧的过渡会触发；新的过渡不会发生。 坑2：transition在元素首次渲染还没有结束的情况下是不会被触发的。 6.css3中的2d变形6.1 第一是对2d变形的介绍 主要有旋转(rotate)、平移(translate)、倾斜(skew)、缩放(scale)、基点的变换(transform-origin) 5 个样式。 transform 属性只对块级元素(一般都是div)生效，一般配合过渡使用。 其中平移一定要带单位。 6.2 第二就是变换组合 变换组合的顺序不同，变换结果不同。因为这些变换的底层原理是矩阵，矩阵的变换是不可逆的。 变换组合时，计算方向时从右向左的，也是矩阵的一些计算。 7.css3中的3d变形7.1 第一是对3d变形的介绍 主要有旋转、平移、缩放、景深、transform-style、 backface-visibility六点，3d变形中没有倾斜，因为它是没有意义的。 7.2 注意点 其中旋转包括4个功能函数：绕x轴旋转、绕y轴旋转、绕z轴旋转、3d旋转(3d旋转就是绕着圆心到指定点所形成的射线进行旋转)。 平移有X、Y、Z三种，其中translateZ()是不能用百分比的。 缩放有X、Y、Z、3d四种，单独使用scaleZ()是没有意义的(变换组合时，把它放在最前面也没有用（无意义）。) 景深： 是能够让3d场景有远大近小的效果的一个属性，不可继承，但可以作用于后代元素，使用时一般不作用于自身。 景深越大，灭点越远，元素变形越小；景深越小，灭点越近，元素变形越明显。 景深的基点perspective-origin是有默认值的，为：perspective-origin: 50% 50%;。 景深的叠加： 叠加：爷父子三个元素中，如果爷父都设置的有景深，作用到子身上以后不是父身上的景深了，而是会进行叠加。 要尽量避免景深叠加！因为不同的浏览器叠加计算的方式不同。 transform-style是一个用于营造有层级的3d舞台的属性，不可继承，但作用于子元素（只是子元素，而不是后代元素）。！就是景深负责远大近小，它负责层次感。 backface-visibility：是否显示元素的背面，默认是显示的。hidden和visible。 8.css3中的动画8.1 第一是对动画的介绍8.2 第二是注意点]]></content>
      <categories>
        <category>前端</category>
        <category>CSS</category>
        <category>CSS3</category>
      </categories>
      <tags>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[B-10-CSS3之新增UI方案]]></title>
    <url>%2F2019%2F10%2F14%2FB-10-CSS3%E4%B9%8B%E6%96%B0%E5%A2%9EUI%E6%96%B9%E6%A1%88%2F</url>
    <content type="text"><![CDATA[1. 文本新增属性1.1 opacity opacity属性指定了一个元素的透明度。 默认值：1.0 不可继承 可以简写为.1~.9，1.0是不透明，0是完全透明，值越小透明度越高。 1.2 rgba rgba(0,0,0,.8); 应用场景：背景透明文字不透明 1.3 文字阴影 text-shadow用来为文字添加阴影，而且可以添加多层，阴影值之间用逗号隔开。（多个阴影时，第一个阴影在最上边） 默认值：none 不可继承 值： – &lt;color&gt;可选。可以在偏移量之前或之后指定。如果没有指定颜色，则使用UA（用户代理）选择的颜色。 – &lt;offset-x&gt; &lt;offset-y&gt;必选。这些长度值指定阴影相对文字的偏移量。 ！ &lt;offset-x&gt; 指定水平偏移量，若是负值则阴影位于文字左边。 ！ &lt;offset-y&gt; 指定垂直偏移量，若是负值则阴影位于文字上面。 ！ 如果两者均为0，则阴影位于文字正后方(如果设置了&lt;blur- radius&gt; 则会产生模糊效果)。 – &lt;blur-radius&gt;可选。这是 &lt;length&gt; 值。如果没有指定，则默认为0。值越大，模糊半径越大，阴影也就越大越淡。 应用场景： – 浮雕文字 123456h1&#123; text-align: center; font: 100px/200px &quot;微软雅黑&quot;; color: white; text-shadow: black 1px 1px 100px;&#125; – 文字模糊 1234567891011h1&#123; text-align: center; font: 100px/200px &quot;微软雅黑&quot;; color: black; transition: 1s;&#125;h1:hover&#123; color: rgba(0,0,0,0); text-shadow: black 0 0 200px;&#125; – 模糊背景 12345678910111213141516171819202122232425262728&lt;!-- css代码 --&gt;#wrap&#123; height: 100px; background: rgba(0,0,0,.5); position: relative;&#125;#wrap #bg&#123; position: absolute; left: 0; right: 0; top: 0; bottom: 0; background: url(img/avatar.jpg) no-repeat; background-size:100% 100% ; z-index: -1; filter: blur(10px);&#125;img&#123; margin: 24px 0 0 24px;&#125;&lt;!-- html代码 --&gt;&lt;div id=&quot;wrap&quot;&gt; &lt;img src=&quot;img/avatar.jpg&quot; width=&quot;64px&quot; height=&quot;64px&quot;/&gt; &lt;div id=&quot;bg&quot;&gt;&lt;/div&gt;&lt;/div&gt; 1.4 文字描边 只有webkit内核才支持：-webkit-text-stroke（准确的来说不能算是css3的东西，但需要知道） -webkit-text-stroke: blue 4px;，描边里面的文字颜色可以设置为透明色rgba(0,0,0,0) 1.5 文字排版 direction:控制文字的方向(ltr/rtl)。 一定要配合unicode-bidi:bidi-override;来使用 text-overflow :确定如何向用户发出未显示的溢出内容信号。它可以被剪切，显示一个省略号（’…’）。 应用场景：文字溢出显示省略号 – white-space: nowrap; – overflow: hidden; – text-overflow: ellipsis; – 包裹区域必须不能让子元素撑开。 – 设置text-overflow: ellipsis;时，div的文字外面不能包裹p标签，否则文字只会溢出隐藏并不会显示省略号。（我自己加的） 1234567891011121314 &lt;!-- css代码 --&gt;div&#123; width: 200px; height: 200px; border: 1px solid; margin: 0 auto; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;&#125; &lt;!-- html代码 --&gt; &lt;div&gt;尚硅谷尚硅谷尚硅谷尚硅谷尚硅谷尚硅谷尚硅谷尚硅谷尚硅谷尚硅谷尚硅谷尚硅谷尚硅谷尚硅谷尚硅谷&lt;/div&gt; 2. 盒模型新增属性2.1 盒模型阴影 box-shadow ： – 以逗号分割列表来描述一个或多个阴影效果，可以用到几乎任何元素上。 – 如果元素同时设置了 border-radius ，阴影也会有圆角效果。多个阴影时和多个 text-shadow 规则相同(第一个阴影在最上面)。 默认值: none 不可继承 值： – inset：默认阴影在边框外。使用inset后，阴影在边框内。 – &lt;offset-x&gt; &lt;offset-y&gt;：这是头两个 &lt;length&gt; 值，用来设置阴影偏移量。 ! &lt;offset-x&gt; 设置水平偏移量，如果是负值则阴影位于元素左边。 ! &lt;offset-y&gt; 设置垂直偏移量，如果是负值则阴影位于元素上面。 ! 如果两者都是0，那么阴影位于元素后面。这时如果设置&lt;blur-radius&gt; 或&lt;spread-radius&gt; 则有模糊效果。 – &lt;blur-radius&gt;：这是第三个 &lt;length&gt; 值。值越大，模糊面积越大，阴影就越大越淡。 不能为负值。默认为0，此时阴影边缘锐利。 – &lt;spread-radius&gt;：这是第四个 &lt;length&gt; 值。取正值时，阴影扩大（阴影覆盖到元素上的距离）；取负值时，阴影收缩（阴影藏在元素下面的距离）。默认为0，此时阴影与元素同样大。 – &lt;color&gt;：阴影颜色，如果没有指定，则由浏览器决定。 2.2 盒模型倒影 -webkit-box-reflect : 设置元素的倒影（准确的来说不能算是css3的东西，但需要知道） 默认值:none 不可继承 值：（必须是123的顺序） – 倒影的方向：(第一个值) above, below, right, left– 倒影的距离：(第二个值) 长度单位– 渐变：(第三个值，可选值，可以不设置) 2.3 盒模型resize resize ：CSS 属性允许你控制一个元素的可调整大小性。 （一定要配合overflow：auto使用） 默认值：none 不可继承 值： – none：元素不能被用户缩放。 – both：允许用户在水平和垂直方向上调整元素的大小。 – horizontal：允许用户在水平方向上调整元素的大小。 – vertical：允许用户在垂直方向上调整元素的大小。 2.4 box-sizing(怪异盒模型) box-sizing属性定义了用户代理应该如何计算一个元素的总宽度和总高度。 可取值： box-sizing: content-box; border-box 告诉浏览器：你想要设置的边框和内边距的值是包含在width内的。注意: border-box不包含margin。 box-sizing: border-box; 默认值，标准盒子模型。width 与 height只包括内容的宽和高， 不包括边框（border），内边距（padding），外边距（margin）。注意: 内边距、边框和外边距都在这个盒子的外部。 box-sizing 属性用于更改用于计算元素宽度和高度的默认的 CSS 盒子模型。可以使用此属性来模拟不正确支持CSS盒子模型规范的浏览器的行为。 默认值：content-box 不可继承 3. 新增UI样式3.1 圆角 传统的圆角生成方案，必须使用多张图片作为背景图案。 CSS3圆角的出现，使得我们再也不必浪费时间去制作这些图片了，而且还有其他多个优点： – 减少维护的工作量。图片文件的生成、更新、编写网页代码，这些工作都不再需要了。 – 提高网页性能。由于不必再发出多余的HTTP请求，网页的载入速度将变快。 – 增加视觉可靠性。某些情况下（网络拥堵、服务器出错、网速过慢等等），背景图片会下载失败，导致视觉效果不佳。CSS3就不会发生这种情况。 border-radius：用来设置边框圆角。当使用一个半径时确定一个圆形；当使用两个半径时确定一个椭圆，这个(椭)圆与边框的交集形成圆角效果。 默认值 : 0 不可继承 值： 固定的px值定义圆形半径或椭圆的半长轴，半短轴。不能用负值 使用百分数定义圆形半径或椭圆的半长轴，半短轴。水平半轴相对于盒模型的宽度；垂直半轴相对于盒模型的高度。不能用负值 这是一个简写属性，用来设置 – border-top-left-radius, – border-top-right-radius, – border-bottom-right-radius, – border-bottom-left-radius 半径的第一个语法取值可取1~4个值: – border-radius: radius – border-radius: top-left-and-bottom-right top-right-and-bottom-left – border-radius: top-left top-right-and-bottom-left bottom-right – border-radius: top-left top-right bottom-right bottom-left 半径的第二个语法取值也可取1~4个值 – border-radius: (first radius values) / radius– border-radius: (first radius values) / top-left-and-bottom-right top-right-and-bottom-left – border-radius: (first radius values) / top-left top-right-and-bottom-left bottom-right – border-radius: (first radius values) / top-left top-right bottom-right bottom-left 注意 ! 百分比值: – 在旧版本的 Chrome 和 Safari 中不支持。(fixed in Sepember 2010) – 在 11.50 版本以前的 Opera 中实现有问题。 – Gecko 2.0 (Firefox 4) 版本前实现不标准：水平半轴和垂直半轴都相对于盒子模型的宽度。 – 在旧版本的 iOS (iOS 5 之前) 和 Android 中 (WebKit 532 之前) 不支持。 3.2 边框图片 border-image： CSS属性允许在元素的边框上绘制图像。 – 这使得绘制复杂的外观组件更加简单，使用 border-image 时，其将会替换掉 border-style 属性所设置的边框样式。 默认值： 不可继承 – border-image-source: none – border-image-slice: 100% – border-image-width: 1 – border-image-outset: none – border-image-repeat: stretch 3.3 背景3.3.1 css2 默认情况下，背景图片是从padding开始绘制的，超出的部分是从border开始剪裁的。背景颜色是除了margin。 background-color background-color 会设置元素的背景色。 默认值： transparent 不可继承 background-image background-image属性用于为一个元素设置一个或多个背景图像，图像在绘制时，以z轴方向堆叠的方式进行。先指定的图像会在之后指定的图像上面进行绘制。 注意：background-color会在image之下进行绘制，边框和内容会在image之上进行绘制。 默认值：none 不可继承 background-image可以设置多个背景图片，用逗号隔开[url(img1), url(img2)]； background-repeat background-repeat CSS 属性定义背景图像的重复方式。背景图像可以沿着水平轴，垂直轴，两个轴重复，或者根本不重复。 默认值：repeat 不可继承 值： – repeat-x = repeat no-repeat – repeat-y = no-repeat repeat – repeat = repeat repeat – no-repeat = no-repeat no-repeat – 第一个值代表水平方向。 – 第二个值代表垂直方向。 background-position background-position属性 ：指定背景位置的初始位置 默认值：0% 0% 不可继承 值： 数值：单位是px。正值右移下移，负值左移上移。 百分比：参照尺寸为背景图片定位区域的大小减去背景图片的大小【(盒子的宽高 - 图片的宽高) * 设置的百分比 = 数值（xxx px）】（不是参照图片也不是参照盒子）。 – 第一个值：元素在水平方向的位移。 – 第二个值：元素在垂直方向的位移 关键字： – top left and left top (！Same as ‘0% 0%’.) – top, top center, and center top (！Same as ‘50% 0%’.) – right top and top right (！Same as ‘100% 0%’.) – left, left center, and center left (！Same as ‘0% 50%’.) – center and center center (！Same as ‘50% 50%’.) – right, right center, and center right (！Same as ‘100% 50%’.) – bottom left and left bottom (！Same as ‘0% 100%’.) – bottom, bottom center, and center bottom (！Same as ‘50% 100%’.) – bottom right and right bottom (！Same as ‘100% 100%’.) 如果只有一个值被指定，则这个值就会默认设置背景图片位置中的水平方向，与此同时垂直方向的默认值被设置成50%。 background-attachment background-attachment 决定背景是在视口中固定的还是随包含它的区块滚动的。 默认值：scroll 不可继承 值： – fixed：此关键字表示背景相对于视口固定。即使一个元素拥有滚动机制，背景也不会随着元素的内容滚动。 – scroll：此关键字表示背景相对于元素本身固定， 而不是随着它的内容滚动。 3.3.2 css3 background-origin：设置背景的渲染的起始位置 border-box padding-box content-box background-clip：设置背景裁剪位置 取值：border-box 、padding-box、content-box、text 取值为text时，是从文本开始，要配合使用。 background-clip: text; -webkit-background-clip: text; color: transparent;颜色透明，这个不是必须的 background-size background-size：设置背景图片大小 默认值：auto auto 不可继承 值： – 百分比： 指定背景图片相对背景区（background positioning area）的百分比。 – 背景区由background-origin设置，默认为盒模型的内容区与内边距。 – auto： 以背景图片的比例缩放背景图片。 注意： ！单值时，这个值指定图片的宽度，图片的高度隐式的为auto。 ！两个值: 第一个值指定图片的宽度，第二个值指定图片的高度 。 background background是CSS简写属性，用来集中设置各种背景属性。 background 可以用来设置一个或多个属性:background-color, background-image, background-position, background-repeat, background-size, background-attachment。 默认值： 不可继承 – background-image: none – background-position: 0% 0% – background-size: auto auto – background-repeat: repeat – background-origin: padding-box – background-clip: border-box – background-attachment: scroll – background-color: transparent ！ 顺序无关 3.4 渐变3.4.1 概述 CSS 渐变 是在 CSS3 Image Module 中新增加的图片类型；使用 CSS 渐变可以在两种颜色间制造出平滑的渐变效果. 用它代替图片，可以加快页面的载入时间、减小带宽占用。同时，因为渐变是由浏览器直接生成的，它在页面缩放时的效果比图片更好，因此你可以更加灵活、便捷的调整页面布局。 浏览器支持两种类型的渐变：线性渐变 (linear)，通过 linear-gradient 函数定义，以及 径向渐变 (radial)，通过 radial-gradient 函数定义. 3.4.2 分类 线性渐变 为了创建一个线性渐变，需要设置一个起始点和一个方向（指定为一个角度）。 还要定义终止色。终止色就是你想让浏览器去平滑的过渡过去，并且必须指定至少两种，当然也会可以指定更多的颜色去创建更复杂的渐变效果。 默认从上到下发生渐变：background-image: linear-gradient(red,blue); 改变渐变方向：（top bottom left right） linear-gradient(to 结束的方向,red,blue); 使用角度：linear-gradient(角度,red,blue); 颜色节点的分布（第一个不写为0%，最后一个不写为100%）：linear-gradient(red 长度或者百分比,blue 长度或者百分比); 重复渐变： repeating-linear-gradient(60deg,red 0,blue 30%); 径向渐变 radial-gradient() 函数创建一个&lt;image&gt;，用来展示由原点（渐变中心）辐射开的颜色渐变 默认均匀分布: radial-gradient(red,blue); – 不均匀分布：radial-gradient(red 50%,blue 70%); 改变渐变的形状：radial-gradient(circle ,red,blue); – circle – ellipse（默认为椭圆） 渐变形状的大小(size): – radial-gradient(closest-corner circle ,red,blue) – closest-side 最近边 – farthest-side 最远边 – closest-corner 最近角 – farthest-corner 最远角 （默认值） 改变圆心：radial-gradient(closest-corner circle at 10px 10px,red,blue); 渐变使用总结：background-image:radial-gradient(大小 圆心/形状,颜色1 距离/百分比,颜色2 距离/百分,颜色3 距离/百分... );]]></content>
      <categories>
        <category>前端</category>
        <category>CSS</category>
        <category>CSS3</category>
      </categories>
      <tags>
        <tag>css新增UI方案</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS3之自定义字体]]></title>
    <url>%2F2019%2F10%2F14%2FB-09-CSS3%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AD%97%E4%BD%93%2F</url>
    <content type="text"><![CDATA[1. 自定义字体 @font-face:允许网页开发者为其网页指定在线字体。 通过这种作者自备字体的方式，@font-face可以消除对用户电脑字体的依赖。 font-family– 所指定的字体名字将会被用于font或font-family属性。 src– 字体资源 ！注意：不能在一个CSS选择器中定义@font-face 2. 字体图标 1.Adobe illustrator – AI是一种应用于出版、多媒体和在线图像的工业标准矢量插画的软件，是一款非常好的矢量图形处理工具。 – 该软件主要应用于印刷出版、海报书籍排版、专业插画、多媒体图像处理和互联网页面的制作等。 – 也可以为线稿提供较高的精度和控制，适合生产任何小型设计到大型的复杂项目 2.FontLab – FontLab是一个专业级的字体编辑软件，广泛应用于字体 设计人员和排版印刷业等专业场合。 – 它能够对已有的字体进行修改，也可以完全按照要求 重新设计需要的字体。 – 字体兼容处理网站： https://www.fontsquirrel.com/tools/webfont-generator – icomoon字体图标 https://icomoon.io/#home 3.字体图标基本思路 – 设计一套矢量图 – 将不同的矢量图绑定到不同的字符上生成自定义字体 – 一般通过工具或者站点来处理 – 在页面中运用]]></content>
      <categories>
        <category>前端</category>
        <category>CSS</category>
        <category>CSS3</category>
      </categories>
      <tags>
        <tag>css自定义字体</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS3之选择器]]></title>
    <url>%2F2019%2F10%2F14%2FB-08-CSS3%E4%B9%8B%E9%80%89%E6%8B%A9%E5%99%A8%2F</url>
    <content type="text"><![CDATA[1.相关地址 CSS3选择器规范地址：https://www.w3.org/TR/2011/REC-css3-selectors-20110929/ CSS3选择最新选择器规范: https://www.w3.org/TR/selectors 2.各种选择器 2.1 基本选择器 通配符选择器： * { margin: 0; padding: 0; border: none; 元素选择器： body { background: #eee; } 类选择器： .list { list-style: square; } ID选择器： #list { width: 500px; margin: 0 auto; } 后代选择器：.list li { margin-top: 10px; background: #abcdef; } 2.2 基本选择器扩展 子元素选择器：#wrap &gt; .inner {color: pink;} – 也可称为直接后代选择器,此类选择器只能匹配到直接后代，不能匹配到深层次的后代元素。 相邻兄弟选择器：#wrap #first + .inner {color: #f00;} – 它只会匹配紧跟着的兄弟元素。 通用兄弟选择器：#wrap #first ~ div { border: 1px solid;} – 它会匹配所有的兄弟元素(不需要紧跟)。 选择器分组：h1,h2,h3{color: pink;} – 此处的逗号我们称之为结合符。 2.3 属性选择器 存在和值属性选择器 – [attr]：该选择器选择包含 attr 属性的所有元素，不论 attr 的值为何。 – [attr=val]：该选择器仅选择 attr 属性被赋值为 val 的所有元素。 – [attr~=val]：表示带有以 attr 命名的属性的元素，并且该属性是一个以空格作为分隔的值列表，其中至少一个值为val。 子串值属性选择器 – [attr|=val] : 选择attr属性的值是val（包括val）或以val-开头的元素。 – [attr^=val] : 选择attr属性的值以val开头（包括val）的元素。 – [attr$=val] : 选择attr属性的值以val结尾（包括val）的元素。 – [attr*=val] : 选择attr属性的值中包含字符串val的元素。 2.4 伪类与伪元素选择器 链接伪类：注意:link，:visited，:target是作用于链接元素的！ – :link 表示作为超链接，并指向一个未访问的地址的所有锚。 – :visited 表示作为超链接，并指向一个已访问的地址的所有锚。 – :target 代表一个特殊的元素，它的id是URI的片段标识符 动态伪类：注意:hover，:active基本可以作用于所有的元素！ – :hover 表示悬浮到元素上。 – :active 表示匹配被用户激活的元素（点击按住时）。 – 由于a标签的:link和:visited可以覆盖了所有a标签的状态，所以当:link，:visited，:hover，:active同时出现在a标签身上时 :link和:visited不能放在最后！！！ – :visited选择器只有下列的属性才能被应用到已访问链接： color background-color border-color 表单相关伪类 – :enabled 匹配可编辑的表单。 – :disable 匹配被禁用的表单。 – :checked 匹配被选中的表单。 – :focus 匹配获焦的表单。 结构性伪类 ！ index的值从1开始计数！！ ！index可以为变量n(只能是n) ！index可以为even odd #wrap ele:nth-child(index) 表示匹配#wrap中第index的子元素 这个子元素必须是ele。 #wrap ele:nth-of-type(index) 表示匹配#wrap中第index的ele子元素。 除此之外:nth-child和:nth-of-type有一个很重要的区别：nth-of-type以元素为中心！！！ :nth-child(index)系列 – :first-child – :last-child – :nth-last-child(index) – :only-child (相对于:first-child:last-child 或者 :nth-child(1):nth-last-child(1)) :nth-of-type(index)系列 – :first-of-type – :last-of-type – :nth-last-type(index) – :only-of-type (相对于:first-of-type:last-of-type 或者 :nth-of-type(1):nth-last-of-type(1)) – :not -- :empty(内容必须是空的，有空格都不行，有attr[属性]没关系) 根元素伪类选择器 – ：root (有的根元素为html,有的为body) 伪元素 – ::after – ::before – ::firstLetter – ::firstLine – ::selection ! 一个元素只有两个伪元素(before 和 after) ！伪元素选择器建议写两个冒号。 3. css声明的优先级3.1 选择器的特殊性 选择器的特殊性由选择器本身的组件确定，特殊性值表述为4个部分，如 0,0,0,0。 一个选择器的具体特殊性如下确定： – 1.对于选择器中给定的ID属性值，加 0,1,0,0。 – 2.对于选择器中给定的各个类属性，属性选择，或伪类，加 0,0,1,0。 – 3.对于选择器中的给定的各个元素和伪元素，加0,0,0,1。 – 4.通配符选择器的特殊性为0,0,0,0。 – 5.结合符对选择器特殊性没有一点贡献。 – 6.内联声明的特殊性都是1,0,0,0。 – 7.继承没有特殊性 ！特殊性 1,0,0,0 大于所有以0开头的特殊性(不进位)。 ！选择器的特殊性最终都会授予给其对应的声明。 ！如果多个规则与同一个元素匹配，而且有些声明互相冲突时，特殊性越大的越占优势。 ！注意：id选择器和属性选择器： div[id=”test”]（0,0,1,1） #test（0,1,0,0） 3.2 重要声明 有时某个声明比较重要，超过了所有其他声明，css2.1就称之为重要声明，并允许在这些声明的结束分号之前插入 !important 来标志。 必须要准确的放置 !important 否则声明无效。 !important 总是要放在声明的最后，即分号的前面。 标志为 !important的声明并没有特殊的特殊性值，不过要与非重要声明分开考虑。 实际上所有的重要声明会被浏览器分为一组，重要声明的冲突会在其内部解决。 非重要声明也会被分为一组，非重要声明的冲突也会在其内部解决。 如果一个重要声明与非重要声明冲突，胜出的总是重要声明。 3.3 继承 继承没有特殊性，甚至连0特殊性都没有。 0特殊性要比无特殊性来的强。 3.4 来源 css样式的来源大致有三种 – 创作人员 – 读者 – 用户代理 权重： – 读者的重要声明 – 创作人员的重要声明 – 创作人员的正常声明 – 读者的正常声明 – 用户代理的声明 3.5 层叠 找出所有相关的规则，这些规则都包含一个选择器。 计算声明的优先级 – 先按来源排序 – 在按选择器的特殊性排序 – 最终按顺序]]></content>
      <categories>
        <category>前端</category>
        <category>CSS</category>
        <category>CSS3</category>
      </categories>
      <tags>
        <tag>css选择器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS2.1之CSS Hack]]></title>
    <url>%2F2019%2F10%2F11%2FB-07-CSS%E4%B9%8BCSS-Hack%2F</url>
    <content type="text"><![CDATA[1. css hack 用到时进行查阅即可。 不推荐使用 123456789101112131415161718192021222324 只在IE下生效: &lt;!--[if IE]&gt; 这段文字只在IE浏览器显示 &lt;![endif]--&gt; 只在IE6下生效 &lt;!--[if IE 6]&gt; 这段文字只在IE6浏览器显示 &lt;![endif]--&gt; 只在IE6以上版本生效&lt;!--[if gte IE 6]&gt; 这段文字只在IE6以上(包括)版本IE浏览器显示&lt;![endif]--&gt; 只在IE8上不生效&lt;!--[if ! IE 8]&gt; 这段文字在非IE8浏览器显示&lt;![endif]--&gt; 非IE浏览器生效&lt;!--[if !IE]&gt; 这段文字只在非IE浏览器显示&lt;![endif]--&gt; 2. 自定义检测低版本ie的函数 12345678910111213 &lt;script type=&quot;text/javascript&quot;&gt; console.log(isIE(8)); //js中的作用域都是函数作用域 function isIE(version)&#123; var b = document.createElement(&quot;b&quot;); b.innerHTML=&quot;&lt;!--[if IE &quot;+version+&quot;]&gt;&lt;i&gt;&lt;/i&gt;&lt;![endif]--&gt;&quot;; return b.getElementsByTagName(&quot;i&quot;).length == 1 ; &#125; //伪数组: 具有length属性的js对象// console.log(document.body.getElementsByTagName(&quot;i&quot;).length); &lt;/script&gt;]]></content>
      <categories>
        <category>前端</category>
        <category>CSS</category>
        <category>CSS2.1</category>
      </categories>
      <tags>
        <tag>css Hack</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PS基本操作]]></title>
    <url>%2F2019%2F10%2F11%2FB-06-CSS%E4%B9%8BPS%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[1. PS基本操作(1)1.1 设置PS的单位为像素(px) 进入PS –&gt; 界面选项 –&gt; 单位与标尺 –&gt; 像素 –&gt; 确定 1.2 标尺 ctrl + R 出现标尺，再按标尺消失。(要先放一张图片) 1.3 辅助线 鼠标放在标尺上，往下/右拖，就会出现辅助线，不需要的话再拖回去即可。(左边要选中拖动) ctrl + H ：隐藏辅助线，再按显示。 1.4 调整图片大小 alt + 滚轮 ：放大/缩小 ctrl + 1 ：恢复到100% ctrl + 0 ：适应屏幕大小 1.5 虚线框(4种) F8 ：显示虚线框选中部分的宽高等信息 ctrl + D ：让虚线框消失]]></content>
      <categories>
        <category>前端</category>
        <category>PS</category>
      </categories>
      <tags>
        <tag>ps基本操作</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS之IE兼容问题]]></title>
    <url>%2F2019%2F10%2F11%2FB-06-CSS%E4%B9%8BIE%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[1. IE6对图片格式png24支持度不高1.1 导致的问题 如果使用的图片格式是png24，则会导致透明效果无法正常显示。 1.2 解决方法 可以使用png8来代替png24，即可解决问题– 缺点：但是使用png8代替png24以后，图片的清晰度会有所下降。 使用JavaScript来解决该问题，需要向页面中引入一个外部的JavaScript文件，后在写一下简单的JS代码，来处理该问题。 123456&lt;!-- 在body标签的最后引入外部的JS文件 --&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;js/DD_belatedPNG_0.0.8a-min.js&quot;&gt;&lt;/script&gt;&lt;!--再创建一个新的script标签，并且编写一些js代码 --&gt;&lt;script type=&quot;text/javascript&quot;&gt; DD_belatedPNG.fix(&quot;*&quot;);&lt;/script&gt; CSS Hack – 同方法2，代码如下： 1234&lt;!--[if IE 6]&gt; &lt;script src=&quot;js/DD_belatedPNG_0.0.8a-min.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt;DD_belatedPNG.fix(&apos;img&apos;);&lt;/script&gt;&lt;![endif]--&gt;]]></content>
      <categories>
        <category>前端</category>
        <category>CSS</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>高度塌陷</tag>
        <tag>IE兼容问题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS之框架集]]></title>
    <url>%2F2019%2F10%2F11%2FB-05-CSS%E4%B9%8B%E6%A1%86%E6%9E%B6%E9%9B%86%2F</url>
    <content type="text"><![CDATA[1. 框架集1.1 概述 框架集和内联框架的作用类似，都是用于在一个页面中引入其他的外部的页面。 框架集可以同时引入多个页面，而内联框架只能引入一个，在h5标准中，推荐使用框架集，而不使用内联框架。 使用frameset来创建一个框架集，注意frameset不能和body出现在同一个页面中，所以要使用框架集，页面中就不可以使用body标签。 属性： – rows，指定框架集中的所有的框架，一行一行的排列。 – cols， 指定框架集中的所有的页面，一列一列的排列。 – 这两个属性frameset必须选择一个，并且需要在属性中指定每一部分所占的大小。 frameset中也可以再嵌套frameset。 frameset和iframe一样，它里边的内容都不会被搜索引擎所检索，所以如果搜索引擎检索到的页面是一个框架页的话，它是不能去判断里边的内容的。 使用框架集则意味着页面中不能有自己的内容，只能引入其他的页面，而每单独加载一个页面，浏览器都需要重新发送一次请求，引入几个页面就需要发送几次请求，用户的体验比较差。如果非得用建议使用frameset而不使用iframe。 演示： 123456789101112&lt;frameset cols=&quot;30% , * , 30%&quot;&gt; &lt;!-- 在frameset中使用frame子标签来指定要引入的页面 ,引入几个页面就写几个frame --&gt; &lt;frame src=&quot;01.表格.html&quot; /&gt; &lt;frame src=&quot;02.表格.html&quot; /&gt; &lt;!-- 嵌套一个frameset --&gt; &lt;frameset rows=&quot;30%,50%,*&quot;&gt; &lt;frame src=&quot;04.表格的布局.html&quot; /&gt; &lt;frame src=&quot;05.完善clearfix.html&quot; /&gt; &lt;frame src=&quot;06.表单.html&quot; /&gt; &lt;/frameset&gt;&lt;/frameset&gt;]]></content>
      <categories>
        <category>前端</category>
        <category>CSS</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>框架集</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS常见问题及解决方法]]></title>
    <url>%2F2019%2F10%2F10%2FB-00-CSS%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[1. 高度塌陷1.1 塌陷原因 在文档流中，父元素的高度默认是被子元素撑开的。但是当为子元素设置浮动以后，子会完全脱离文档流，此时将会导致子元素无法撑起父元素的高度，导致父元素的高度塌陷。由于父元素的高度塌陷了，则父元素下的所有元素都会向上移动，这样将会导致页面布局混乱。 1.2 解决方法（均为设置塌陷元素） 把父元素的高度写死 -缺点：不能自动适应子元素高度 根据W3C的标准，在页面中元素都一个隐含的属性叫做Block Formatting Context，简称BFC，该属性可以设置打开或者关闭，默认是关闭的。 *当开启元素的BFC以后，元素将会具有如下的特性： 1.父元素的垂直外边距不会和子元素重叠 2.开启BFC的元素不会被浮动元素所覆盖 3.开启BFC的元素可以包含浮动的子元素 *如何开启元素的BFC 1.设置元素浮动 -使用这种方式开启，虽然可以撑开父元素，但是会导致父元素的宽度丢失，而且使用这种方式也会导致下边的元素上移，不能解决问题 2.设置元素绝对定位 -与设置浮动效果相同 3.设置元素为inline-block -可以解决问题，但是会导致宽度丢失，不推荐使用这种方式 4.将元素的overflow设置为一个非visible的值 -具体代码： overflow: auto; overflow: hidden; -ie6代码： zoom: 1; *清除浮动（受的影响） 清除浮动1： 可以直接在高度塌陷的父元素的最后，添加一个空白的div，然后在对其进行清除浮动，这样可以通过这个空白的div来撑开父元素的高度，基本没有副作用。 在浮动的元素后面加一个空的兄弟元素，并给这个空元素设置清除浮动 clear: both; -缺点：使用这种方式虽然可以解决问题，但是会在页面中添加多余的结构。 清除浮动2： 可以通过after伪类向元素的最后添加一个空白的块元素，然后对其清除浮动，这样做和添加一个div的原理一样，可以达到一个相同的效果， 而且不会在页面中添加多余的div，这是我们最推荐使用的方式，几乎没有副作用 12345678910111213141516.clearfix:after&#123; /*添加一个内容*/ content: &quot;&quot;; /*转换为一个块元素*/ display: block; /*清除两侧的浮动*/ clear: both;&#125;/* * 在IE6中不支持after伪类, * 所以在IE6中还需要使用hasLayout来处理 */.clearfix&#123; zoom:1;&#125; 完善clearfix: 同时解决外边距重叠和高度塌陷 12345678910.clearfix:before,.clearfix:after&#123; content: &quot;&quot;; display: table; clear: both;&#125;.clearfix&#123; zoom: 1;&#125; 2. 父子元素的外边距重叠2.1 解决方法： 1234567.box1:before&#123; content: &quot;&quot;; /* display:table可以将一个元素设置为表格显示 */ display: table;&#125;]]></content>
      <categories>
        <category>前端</category>
        <category>CSS</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>css常见问题</tag>
        <tag>高度塌陷</tag>
        <tag>垂直外边距重叠</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我的博客搭建过程]]></title>
    <url>%2F2019%2F10%2F09%2F%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;在b站上看了codesheep和geekmubai的视频教程（视频是Mac系统），二者结合，搭建了自己的博客（我的是Windows系统），主题及修改则是到处查着修改，比较混乱，暂时还没整理。只整理了一下搭建的过程并记录了下来，如下所示： 1.去官网安装node.js 打开命令行(win + R –&gt; cmd –&gt; 回车) C:\Users\颖&gt;npm -v （查看npm是否安装好） 6.9.0 C:\Users\颖&gt;node -v （查看node是否安装好） 10.16.0 2.安装hexo博客框架 C:\Users\颖&gt;npm install -g cnpm –registry=https://registry.npm.taobao.org (用npm安装cnpm,把镜像源指向淘宝) C:\Users\颖&gt;cnpm C:\Users\颖&gt;cnpm -v （查看cnpm是否安装好） C:\Users\颖&gt;cnpm install -g hexo-cli （用cnpm安装hexo博客框架） 3.建立一个空的blog文件夹 C:\Users\颖&gt;cd blog （进入blog文件夹里） C:\Users\颖\blog&gt;hexo init （初始化一个博客，会生成一些东西可以在命令行用dir查看） C:\Users\颖\blog&gt;hexo s （在本地启动博客） 4.把博客部署到github 在github中新建一个仓库，这个仓库的名称必须是Git名字+github.io C:\Users\颖\blog&gt;cnpm install –save hexo-deployer-git （安装一个部署插件） 5.打开blog中的_config.yml文件，用记事本打开到最底部，做如下修改： deploy:&nbsp;&nbsp;&nbsp;type: git&nbsp;&nbsp;&nbsp;repo: https://github.com/geekying/geekying.github.io.git (github中新建的仓库的地址)&nbsp;&nbsp;&nbsp;branch: master 6.去官网下载git，安装完成后在git中做如下操作： $ git config –global user.name “geekying” $ git config –global user.email “congyingw@sina.com“ $ ssh-keygen -t rsa -C “congyingw@sina.com“ -在github中新建一个密钥，内容为刚才生成的.ssh中的id_rsa.pub文件中的密钥 7.回到命令行，完成部署 C:\Users\颖\blog&gt;hexo d （hexo deploy） 8.更换主题 C:\Users\颖\blog&gt;git clone https://github.com/kjhuanhao/HEXO-HHC-NEXT （克隆一下主题） -(我换成了next主题https://github.com/kjhuanhao/HEXO-HHC-NEXT) 打开blog中的.config文件，用记事本打开到最底部，做如下修改： themes：next回到命令行 C:\Users\颖\blog&gt;hexo clean C:\Users\颖\blog&gt;hexo g (generate生成) C:\Users\颖\blog&gt;hexo s (server) C:\Users\颖\blog&gt;hexo d (deploy) 9.新建一篇博客 C:\Users\颖\blog&gt;hexo n “标题” &emsp;&emsp;在blog文件夹里找到source/_post中的markdown文件，进行内容编辑，编辑好之后重复更换主题的最后四条语句即可。]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS之表格和表单]]></title>
    <url>%2F2019%2F10%2F09%2FB-04-CSS%E4%B9%8B%E8%A1%A8%E6%A0%BC%E5%92%8C%E8%A1%A8%E5%8D%95%2F</url>
    <content type="text"><![CDATA[1.表格1.1 表格概述 表格的作用就是用来表示格式化的数据。 1.2 表格标签 table、tr、th、td (表格) – 在table标签中使用tr来表示表格中的一行，有几行就有几个tr。 – 在tr中需要使用td来创建一个单元格，有几个单元格就有几个td。 – th表示表头。 caption、thead、tbody、tfoot (长表格) caption表示表格的标题 thead、tbody、tfoot – thead 表格的头部、tbody 表格主体、tfoot 表格底部 – 这三个标签的作用，就来区分表格的不同的部分，他们都是table的子标签，都需要直接写到table中，tr需要写在这些标签当中。 – thead中的内容，永远会显示在表格的头；tfoot中的内容，永远都会显示表格的底部；tbody中的内容，永远都会显示表格的中间。 – 如果表格中没有写tbody，浏览器会自动在表格中添加tbody。并且将所有的tr都放到tbody中。 ！ 注意tr并不是table的子元素，而是tbody的子元素。通过table &gt; tr 无法选中， 需要通过tbody &gt; tr 1.3 合并单元格 合并单元格指将两个或两个以上的单元格合并为一个单元格。 合并单元格可以通过在th或td中设置属性来完成。 – colspan：用来设置横向的合并单元格。 – rowspan：用来设置纵向的合并单元格。 1.4 表格的样式 之前学习的很多属性都可以用来设置表格的样式，比如color可以用 来设置文本的颜色。padding可以设置内容和表格边框的距离。 width：设置表格的宽度 margin: 0 auto; 让表格居中 border：边框 background-color：设置背景样式 text-align：设置文本的水平对齐 vertical-align：设置文本的垂直对齐 – 可选值：top、baseline、middle、bottom border-spacing：边框间距 – table和td边框之间默认有一个距离通过border-spacing属性可以设置这个距离 border-collapse：合并边框 – 可选值：collapse(合并边框)、separate(不合并边框) – 如果设置了边框合并，则border-spacing自动失效。 2. 表单2.1 表单概述 现实生活中的表单是用来提交信息的。 网页中表单的作用就是用来将用户信息提交给服务器的。比如：百度的搜索框 注册 登录这些操作都需要填写表单。最常用到的表单就是baidu的搜索框。 2.2 表单项12345文本框 &lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;密码框 &lt;input type=&quot;password&quot; name=&quot;pwd&quot;&gt;多选框 &lt;input type=&quot;checkbox&quot; name=&quot;sports&quot;&gt; 单选框 &lt;input type=&quot;radio&quot; name=&quot;gender&quot;&gt;提交按钮 &lt;input type=&quot;submit&quot; value=&quot; 提交 &quot;&gt;下拉列表 &lt;select&gt; &lt;option&gt;北京&lt;/option&gt; &lt;/select&gt; 2.3 表单标签 form – 使用form标签创建一个表单。 – form标签中必须指定一个 action 属性，该属性指向的是一个服务器的地址，当提交表单时将会提交到action属性对应的地址。 fieldset – 在表单中可以使用fieldset来为表单项进行分组，可以将表单项中的同一组放到一个fieldset中。 legend – 在fieldset可以使用legend子标签，来指定组名。 label – label标签专门用来选中表单中的提示文字的。 – 该标签可以指定一个for属性，该属性的值需要指定一个表单项的id值。 inpute input是使用的最多的表单项，它可以 根据不同的type属性呈现不同的状态。 type属性可选值： text：文本框 – 使用input来创建一个文本框，它的type属性是text。 password：密码框 – 使用input创建一个密码框，它的type属性值是password。 radio：单选按钮 – 使用input来创建一个单选按钮，它的type属性使用radio。 – 单选按钮通过name属性进行分组，name属性相同是一组按钮。 – 像这种需要用户选择但是不需要用户直接填写内容的表单项，还必须指定一个value属性，这样被选中的表单项value属性值将会最终提交给服务器。 – 如果希望在单选按钮中指定默认选中的选项，则可以在希望选中的项中添加checked=”checked”属性。 checkbox：多选框 – 使用input创建一个多选框，它的type属性使用checkbox。 – 多选框通过name属性进行分组，name属性相同是一组按钮。 – 像这种需要用户选择但是不需要用户直接填写内容的表单项，还必须指定一个value属性，这样被选中的表单项value属性值将会最终提交给服务器。 – 如果希望在多选框中指定默认选中的选项，则可以在希望选中的项中添加checked=”checked”属性。 submit：提交按钮 – 提交按钮可以将表单中的信息提交给服务器。 – 使用input创建一个提交按钮,它的type属性值是submit。 – 在提交按钮中可以通过value属性来指定按钮上的文字。 reset ：重置按钮 – 点击重置按钮以后表单中内容将会恢复为默认值。 – 使用input创建一个重置按钮,它的type属性值是reset。 – 在重置按钮中可以通过value属性来指定重置上的文字。 如果希望表单项中的数据会提交到服务器中，还必须给表单项指定一个name属性(name表示提交内容的名字)。 用户填写的信息会附在url地址的后边以查询字符串的形式发送给服务器。url地址?查询字符串 – 查询字符串的格式：属性名=属性值&amp;属性名=属性值&amp;属性名=属性值&amp;属性名=属性值 在文本框中也可以指定value属性值，该值将会作为文本框的默认值显示。 通过修改value属性值，可以修改按钮上的文字 fieldset、legend、label (长表单) -fieldset用来为表单项进行分组。 -legend用于指定每组的名字。 -label标签用来为表单项定义描述文字。 select、option、optgroup optgroup用于为列表项分组。 option表示下拉列表中的列表项。 使用select来创建一个下拉列表。 – 下拉列表的name属性需要指定给select，而value属性需要指定给option。 – 可以通过在option中添加selected=”selected”来将选项设置为默认选中。 – 当为select添加一个multiple=”multiple”，则下拉列表变为一个多选的下拉列表。 – 在select中可以使用optgroup对选项进行分组，同一个optgroup中的选项是一组，可以通过label属性来指定分组的名字。 textarea – textarea用来创建一个文本域，实际效果和 文本框类似，只是可以输入多行数据。 – 可用属性： *cols：文本域的列数 *rows：文本域的行数 button– 也可以使用button标签来创建按钮。这种方式和使用input类似，只不过由于它是成对出现的标签，使用起来更加的灵活。]]></content>
      <categories>
        <category>前端</category>
        <category>CSS</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>表格</tag>
        <tag>表单</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS盒子模型+元素背景设置]]></title>
    <url>%2F2019%2F10%2F09%2FB-03-CSS%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B%2B%E5%85%83%E7%B4%A0%E8%83%8C%E6%99%AF%E8%AE%BE%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[1. 盒子模型1.1 盒子概述 CSS处理网页时，它认为每个元素都包含在一 个不可见的盒子里，这样方便布局。 1.2 盒子模型 一个盒子我们会分成几个部分： – 内容区(content) – 内边距(padding) – 边框(border) – 外边距(margin) 1.3 内容区 内容区指的是盒子中放置内容的区域，也就是元素 中的文本内容，子元素都是存在于内容区中的。 如果没有为元素设置内边距和边框，则内容区大小 默认和盒子大小是一致的。 通过width和height两个属性可以设置内容区的大 小。 width和height属性只适用于块元素。 1.4 内边距 内边距指的就是元素内容区与边框以内 的空间。 默认情况下width和height不包含padding的大小。 使用padding属性来设置元素的内边距。 padding:10px 20px 30px 40px; –这样会设置元素的上、右、下、左四个方向的内边距。 padding:10px 20px 30px; –分别指定上、左右、下四个方向的内边距 padding:10px 20px; –分别指定上下、左右四个方向的内边距 padding:10px; – 同时指定上左右下四个方向的内边距 同时在css中还提供了padding-top、padding-right、paddingright、padding-bottom分别用来指定四个方向的内边距。 1.5 边框 可以在元素周围创建边框，边框是元素可见框的最外部。 可以使用border属性来设置盒子的边框： –- border:1px red solid; –- 上边的样式分别指定了边框的宽度、颜色和样式。 也可以使用border-top/left/right/bottom分别指定上右下左 四个方向的边框。 和padding一样，默认width和height并包括边框的宽度。 边框可以设置多种样式： – none（没有边框） – dotted（点线） – dashed（虚线） – solid（实线） – double（双线） – groove（槽线） – ridge（脊线） – inset（凹边） – outset（凸边） 1.6 外边距 外边距是元素边框与周围元素相距的空间。 使用margin属性可以设置外边距。 用法和padding类似，同样也提供了四个方向的 margin-top/right/bottom/left。 当将左右外边距设置为auto时，浏览器会将左右外 边距设置为相等，所以这行代码margin:0 auto可以使元素居中。2. 盒子的位置及大小相关 2.1 display 不能为行内元素设置width、height、 margin-top和margin-bottom。 可以通过修改display来修改元素的性 质。 可选值： – block：设置元素为块元素 – inline：设置元素为行内元素 – inline-block：设置元素为行内块元素 – none：隐藏元素（元素将在页面中完全消失） 2.2 visibility visibility属性主要用于元素是否可见。 和display不同，使用visibility隐藏一个元素，隐藏后其在文档中所占的位置会依然保持，不会被其他元素覆盖。 可选值： – visible：可见的 – hidden：隐藏的(占位) 2.3 overflow 当相关标签里面的内容超出了样式的宽度 和高度是，就会发生一些奇怪的事情，浏 览器会让内容溢出盒子。 可以通过overflow来控制内容溢出的情况。 可选值： – visible：默认值 – scroll：添加滚动条(不管是否溢出，并且水平和垂直都添加) – auto：根据需要添加滚动条 – hidden：隐藏超出盒子的内容 2.4 文档流 文档流指的是文档中可现实的对象在排列时所占用的位置。 2.5 浮动 浮动指的是使元素脱离原来的文本流，在父元素中浮动起来。 浮动使用float属性。 可选值： -none，默认值，不清除浮动。 -left，清除左侧浮动元素对当前元素的影响。 -right，清除右侧浮动元素对当前元素的影响。 -both，清除两侧浮动元素对当前元素的影响清除对他影响最大的那个元素的浮动。 块级元素和行内元素都可以浮动，当一个行内元素浮动以后将会自动变为一个块级元素。 当一个块级元素浮动以后，宽度会默认被内容撑开，所以当漂浮一个块级元素时我们都会为其指定一个宽度。 当一个元素浮动以后，其下方的元素会上移。元素中的内容将会围绕在元素的周围。- 浮动会使元素完全脱离文本流，也就是不再在文档中在占用位置。 元素设置浮动以后，会一直向上漂浮直到遇到父元素的边界或者其他 浮动元素。 元素浮动以后即完全脱离文档流，这时不会再影响父元素的高度。也就是浮动元素不会撑开父元素。 浮动元素默认会变为块元素，即使设置display:inline以后其依然是个块元素。 2.6 清除浮动 clear属性可以用于清除元素周围的浮动对元素的影响。 元素不会因为上方出现了浮动元素而改变位置。 可选值： – left：忽略左侧浮动 – right：忽略右侧浮动 – both：忽略全部浮动 – none：不忽略浮动，默认值 2.7 定位 定位：定位指的就是将指定的元素摆放到页面的任意位置，通过定位可以任意的摆放元素。 通过position属性来设置元素的定位 可选值： -static：默认值，元素没有开启定位 -relative：开启元素的相对定位 -absolute：开启元素的绝对定位 -fixed：开启元素的固定定位（也是绝对定位的一种） 当开启了元素的定位（position属性值是一个非static的值）时，可以通过left right top bottom四个属性来设置元素的偏移量– left：元素相对于其定位位置的左侧偏移量。 – right：元素相对于其定位位置的右侧偏移量。 – top：元素相对于其定位位置的上边的偏移量。 – bottom：元素相对于其定位位置下边的偏移量。 *通常偏移量只需要使用两个就可以对一个元素进行定位。一般选择水平方向的一个偏移量和垂直方向的偏移量来为一个元素进行定位。 */ 2.8 相对定位 每个元素在页面的文档流中都有一个自然位置。相对于这个位置对元素进行移动就称为相对定位。周围的元素完全不受此影响。 当元素的position属性设置为relative时，则开启了元素的相对定位。 开启了相对定位以后，可以使用top、right、bottom、left四个属性对元素进行定位。 相对定位的特点: – 当开启了元素的相对定位以后，而不设置偏移量时，元素不会发生任何变化。 – 相对定位是相对于元素在文档流中原来的位置进行定位。 – 相对定位的元素不会脱离文档流。 – 相对定位会使元素的层级提升，使元素可以覆盖文本流中的元素。 – 相对定位不会改变元素的性质，块还是块，内联还是内联 2.9 绝对定位 绝对定位指使元素相对于html元素或离他最近的祖先定位元素进行定位。 当position属性值设置为absolute时，则开启了元素的绝对定位。 开启了绝对定位以后，可以使用top、right、 bottom、left四个属性对元素进行定位。 绝对定位的特点： – 开启绝对定位，会使元素脱离文档流。 – 开启绝对定位以后，如果不设置偏移量，则元素的位置不会发生变化。 – 绝对定位是相对于离他最近的开启了定位的祖先元素进行定位的（一般情况，开启了子元素的绝对定位都会同时开启父元素的相对定位）。如果所有的祖先元素都没有开启定位，则会相对于浏览器窗口进行定位。 – 绝对定位会使元素提升一个层级。 – 绝对定位会改变元素的性质(内联元素变成块元素)。 – 块元素的宽度和高度默认都被内容撑开 2.10 固定定位 固定定位的元素会被锁定在屏幕的某个位置上，当访问者滚动网页时，固定元素会在屏幕上保持不动。 当将position属性设置为fixed时，则开启了元素的固定定位。 当开启了固定定位以后，可以使用top、right、bottom、left四个属性对元素进行定位。 绝对定位的特点： –固定定位也是一种绝对定位，它的大部分特点都和绝对定位一样。 –固定定位永远都会相对于浏览器窗口进行定位。 – 固定定位会固定在浏览器窗口某个位置，不会随滚动条滚动。 – IE6不支持固定定位。 后三条是不同之处。 2.11 层级 如果定位元素的层级是一样，则下边的元素会盖住上边的。 通过z-index属性可以用来设置元素的层级。可以为z-index指定一个正整数作为值，该值将会作为当前元素的层级。 层级越高，越优先显示。(也就是z-index 值较大的元素会显示在网页的最上层) 对于没有开启定位的元素不能使用z-index。 3. css背景设置3.0 background background是背景的简写属性，通过这个属性可以一次性设置多个样式，而且样式的顺序没有要求。 例如： background: green url(img/1.jpg) no-repeat center center fixed 3.1 background-color background-color属性用来为元素设置背景颜色。 需要指定一个颜色值，当指定了一个颜色以后，整个元素的可见区域都会使用这个颜色作为背景色。 如果不设置背景颜色，元素默认背景颜色为透明，实际上会显示父元素的背景颜色。 3.2 background-image 使用background-image来设置背景图片 语法：background-image:url(相对路径); 显示规则： – 如果背景图片大于元素，默认会显示图片的左上角。 – 如果背景图片和元素一样大，则会将背景图片全部显示。 – 如果背景图片小于元素大小，则会默认将背景图片平铺以充满元素。 可以同时为一个元素指定背景颜色和背景图片 – 这样背景颜色将会作为背景图片的底色。 – 一般情况下设置背景图片时都会同时指定一个背景颜色。 3.3 background-repeat background-repeat用于设置背景图片的重复方式。 可选值：– repeat：默认值，背景图片会双方向重复（平铺）。 – no-repeat：背景图片不会重复，有多大就显示多大。 – repeat-x：背景图片沿水平方向重复。 – repeat-y：背景图片沿垂直方向重复。 如果只设置背景图片默认背景图片将会使 用平铺的方式，可以通过该属性进行修改。 3.4 background-position 通过background-position可以调整背景图片在元素中的位置(背景图片默认是贴着元素的左上角显示)。 可选值：该属性可以使用 top right left bottom center中的两个值，来指定一个背景图片的位置 – top left 左上 – bottom right 右下 – 如果只给出一个值，则第二个值默认是center 也可以直接指定两个偏移量： 第一个值是水平偏移量 – 如果指定的是一个正值，则图片会向右移动指定的像素。 – 如果指定的是一个负值，则图片会向左移动指定的像素。 第二个是垂直偏移量 – 如果指定的是一个正值，则图片会向下移动指定的像素。 – 如果指定的是一个负值，则图片会向上移动指定的像素。 可以通过三种方式来确定图片在水平方向和垂直方向的起点。 – 关键字 – 数值 – 百分比 3.5 background-attachment background-attachment用来设置背景图片是否随页面一起滚动 可选值： – scroll：默认值，背景图片随着窗口滚动。 – fixed：背景图片会固定在某一位置，不随页面滚动。 当背景图片的background-attachment设置为fixed时， 背景图片的定位永远相对于浏览器的窗口。 不随窗口滚动的图片，一般都是设置给body，而不设置给其他元素。 3.6 CSS Sprite (雪碧图) CSS Sprites是一种网页图片应用处理方式。 通过这种方式我们可以将网页中的零星图 片集中放到一张大图上。 这样一来，一次请求便可以同时加载多张 图片，大大提高了图片的加载效率。 消除按钮闪烁(闪烁会造成一次不佳的用户体验)。 产生问题的原因： – 背景图片是以外部资源的形式加载进网页的，浏览器每加载一个外部资源就需要单独的发送一次请求。– 但是我们外部资源并不是同时加载，浏览器会在资源被使用才去加载资源。 – 由于加载图片需要一定的时间，所以在加载和显示过程会有一段时间，背景图片无法显示，导致出现闪烁的情况。 – 为了解决该问题，可以将三个图片整合为一张图片，这样可以同时将三张图片一起加载，就不会出现闪烁的问题了。 – 然后在通过background-position来切换要显示的图片的位置，这种技术叫做图片整合技术（CSS-Sprite）。 优点： – 将多个图片整合为一张图片里，浏览器只需要发送一次请求，可以同时加载多个图片，提高访问效率，提高了用户体验。 – 将多个图片整合为一张图片，减小了图片的总大小，提高请求的速度，增加了用户体验。]]></content>
      <categories>
        <category>前端</category>
        <category>CSS</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>css盒子模型</tag>
        <tag>溢出</tag>
        <tag>定位</tag>
        <tag>css背景设置</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS选择器]]></title>
    <url>%2F2019%2F10%2F09%2FB-02-CSS%E9%80%89%E6%8B%A9%E5%99%A8%2F</url>
    <content type="text"><![CDATA[1. css选择器选择器（selector），会告诉浏览器：网页 上的哪些元素需要设置什么样的样式。 1.1 元素选择器 元素选择器（标签选择器），可以根据标 签的名字来从页面中选取指定的元素。 语法： 标签名 { } 1.2 类选择器 类选择器，可以根据元素的class属性值选 取元素。 语法： .className { } 1.3 ID选择器 ID选择器，可以根据元素的id属性值选取元素。 语法：#id { } 1.4 复合选择器 (交集选择器) 复合选择器，可以同时使用多个选择器， 这样可以选择同时满足多个选择器的元素。 语法：选择器1选择器2{} 1.5 群组选择器(并集选择器) 群组选择器，可以同时使用多个选择器， 多个选择器将被同时应用指定的样式。 语法： 选择器1,选择器2,选择器3 { } 1.6 通用选择器 通用选择器，可以同时选中页面中的所有 元素。 语法： *{ } 1.7 后代选择器 后代选择器可以根据标签的关系，为处在 元素内部的代元素设置样式。 语法： 祖先元素 后代元素 后代元素 { } 1.8 伪类选择器 有四个伪类可以根据访问者与该链接的交互方式，将链接设置成4种不同的状态。 正常链接 a:link{ } 访问过的链接 a:visited{ }（只能定义字体颜色） 鼠标滑过的链接 a:hover{ } 正在点击的链接 a:active{ } 其他伪类： 获取焦点 :focus 指定元素前 :before 指定元素后 :after 选中的元素 ::selection 1.9 伪元素选择器 给段落定义样式： 首字母 :first-letter{ } 首行 :first-line{ } 1.10 属性选择器 属性选择器可以挑选带有特殊属性的标签。 语法: [属性名]{ } – 属性名可以是类名/id名等 [属性名=”属性值”]{ } – 属性为某个特定值的 [属性名~=”属性值”]{ } – 选取属性值中包含指定词汇的元素。 [属性名|=”属性值”]{ } – 选取带有以指定值开头的属性值的元素，该值必须是整个单词。 [属性名^=”属性值”]{ } – 属性值以XXX开头 [属性名$=”属性值”]{ } – 属性值以XXX结尾 [属性名*=”属性值”]{ } – 属性值包含XXX 1.11 直接子元素选择器 子元素选择器可以给另一个元素的子元素设置样式。 语法：父元素 &gt; 子元素{} 1.12 兄弟选择器 除了根据祖先父子关系，还可以根据兄弟 关系查找元素。 语法: 查找后边一个兄弟元素 ： 兄弟元素 + 兄弟元素{}查找后边所有的兄弟元素： 兄弟元素 ~ 兄弟元素{} 1.13 否定伪类选择器 否定伪类可以帮助我们选择不是其他东西 的某件东西。 语法: :not(选择器){} 比如： p:not(.hello)表示选择所有的p元素但 是class为hello的除外。 1.13 结构伪类选择器 #wrap ele:first-child – 选择#wrap下的第一个子元素，这个子元素必须是（ele)才可以 #wrap ele:last-child – 选择#wrap下的最后一个子元素，这个子元素必须是（ele)才可以 #wrap ele:nth-child(n) – 选择#wrap下指定位置子元素，这个子元素必须是（ele)才可以 ,n 是整数或odd(奇数位置)/even(偶数位置) #wrap ele:first-of-type 选择#wrap下指定(ele)类型的第一个子元素 #wrap ele:last-of-type 选择#wrap下指定(ele)类型的最后一个子元素 #wrap ele:nth(n)-of-type 选择#wrap下指定类型(ele)的第n个子元素 2. 选择器的权重2.1 权重概述 在页面中使用CSS选择器选中元素时，经常都是一个元素同时被多个选择器选中。如果两个选择器设置的是同一个样式则会产生冲突， 这样h1到底要应用那个样式呢？CSS中会默认使用权重较大的样式 2.2 权重的计算 不同的选择器有不同的权重值： 内联样式：权重是1000 id选择器：权重是100 类、属性、伪类选择器：权重是10 元素选择器：权重是1 通配符：权重是0 默认样式：没有权重 计算权重需要将一个样式的全部选择器相加，权重高的优先显示，权重相同的就后面的样式使用。 ！权重相加结果不会超过最大值]]></content>
      <categories>
        <category>前端</category>
        <category>CSS</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>css选择器</tag>
        <tag>标签关系</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[markdown常用语法]]></title>
    <url>%2F2019%2F10%2F09%2F00-markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[1.标题 # 一级标题一级标题 ## 二级标题二级标题 ### 三级标题三级标题 #### 四级标题四级标题 ##### 五级标题五级标题 ###### 六级标题六级标题 2.列表(注意空格) * ：无序列表 + ：无序列表 - ：无序列表 ：有序列表 ：有序列表 ：有序列表3.换行 按两次回车 html中的标签br &lt;可识别的内容&gt;4.分割线 --- 连续输入三个- *** 连续输入三个* 5.超链接 [超链接名字](超链接的地址src) wcy’blog 6.粗体和斜体 *内容* ：一个*号代表 斜体 这是斜体文字 **内容** ：两个*号代表 粗体 这是粗体文字 ***内容*** ：三个*号代表 斜体+粗体 这是斜体+粗体文字 7.引用 &gt; 引用一段话 这是引用的话的示例 &lt;!–￼0–&gt;]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>markdown常用语法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS基础]]></title>
    <url>%2F2019%2F10%2F09%2FB-01-CSS%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[1. CSS简介1.1 css概述 层叠样式表 (Cascading Style Sheets) css可以用来为网页创建样式表，通过样式表可以对网页进行装饰。 1.2 基本语法 CSS的样式表由一个一个的样式构成，一个样式又由 选择器 和 声明块 构成。 语法：选择器 {样式名:样式值；样式名:样式值; } 1.3 行内样式 可以直接将样式写到标签内部的style属性中，这种样式不用填写选择器，直接编写 声明即可。 &lt;p style=”color: red;font-size: 30px”&gt;&lt;/p&gt; 这种方式编写简单，定位准确。但是由于 直接将css代码写到了html标签的内部，导 致结构与表现耦合，同时导致样式不能够 复用，所以这种方式我们不使用。 1.4 内部样式表 可以直接将样式写到&lt;style&gt;标签中。 &lt;style&gt; p{color:red; font-size: 30px;} &lt;/style&gt; 这样使css独立于html代码，而且可以同时为 多个元素设置样式，这是我们使用的比较多的 一种方式。 但是这种方式，样式只能在一个页面中使用， 不能在多个页面中重复使用。 1.5 外部样式表 可以将所有的样式保存到一个外部的css文 件中，然后通过标签将样式表引入 到文件中。 &lt;link rel=”stylesheet” type=”text/css” href=”style.css”&gt; 这种方式将样式表放入到了页面的外部， 可以在多个页面中引入，同时浏览器加载 文件时可以使用缓存，这是我们开发中使 用的最多的方式。 2. 文本格式化2.1 单位 px 对于不同的显示器来说一个像素 的大小是不同的。 百分比 也可以使用一个百分数来表示一个大小，百分比是相对于父元素来说的。 em em和百分比类似，也是相对于父元素说的，1em就相 当于100%，2em相当于200%，1.5em相当于150%。 2.2 颜色 颜色英文单词 aqua、black、blue、fuchsia、gray、green、 lime、maroon、navy、olive、orange、 purple、red、silver、teal、white、yellow 十六进制颜色 颜色 是由指定浓度的红绿蓝混合而成的。比如：：#6600FF RGB值 –也可以使用计算机中常用的RGB值来表示 颜色。 –可以使用0255的数值，也可以使 用0%100%的百分比数。 RGB(100%,0%,0%) RGB(0,255,0) –第一个数表示红色的浓度，第二个数表示 绿色浓度，第三个数表示蓝色的浓度。 RGBA –RGBA表示一个颜色和RGB类似，只不过比 RGB多了一个A（alpha）来表示透明度， 透明度需要一个0-1的值。 RGBA(255,100,5,0.5) – 0表示完全透明， 1表示完全不透明。 2. 文字属性2.0 字体属性的简写 font可以一次性同时设置多个字体的样式。 语法： font:加粗 斜体 小型大写 大小/行高 字体 这里前边几个加粗、斜体和小型大写的顺 序无所谓，也可以不写，但是大小和字体 必须写且必须写到后两个。 2.1 文字大小 font-size用来指定文字的大小。 2.2 字体 font-family可以指定标签中文字使用 的字体。 例如：p{font-family:Arial} 通过font-family可以同时指定多个字体。 例如：p{font-family:Arial , Helvetica , sans-serif} 这里面sans-serif并不是指的具体某一个字体。而是一类字体。 2.3 字体分类 serif（衬线字体） sans-serif（非衬线字体） monospace （等宽字体） cursive （草书字体） fantasy （虚幻字体） 以上这些分类都是一些大的分类，并没有 涉及具体的类型，如果将字体指定为这些 格式，浏览器会自己选择指定类型的字体。 2.4 斜体和粗体 font-style用来指定文本的斜体。 – 指定斜体：font-style:italic – 指定非斜体：font-style:normal font-weight用来指定文本的粗体。 – 指定粗体：font-weight:bold – 指定非粗体：font-weight:normal 2.5 小型大写字母 font-variant属性可以将字母类型设置为小型大写。 – font-variant:small-caps 2.6 行间距 line-height用于设置行高，行高越大则行 间距越大。 行间距 = line-height – font-size 2.7 大写化 text-transform样式用于将元素中的字母全 都变成大小。 大写：text-transform:uppercase 小写：text-tansform:lowercase 首字母大写： text-transform:capitalize 正常：text-transform:none 2.8 文本的修饰 text-decoration属性，用来给文本添加各 种修饰。通过它可以为文本的上方、下方 或者中间添加线条。 可选值：underline / overline /line-through / none 2.9 字母间距和单词间距 letter-spacing用来设置字符之间的间距。 word-spacing用来设置单词之间的间距。 这两个属性都可以直接指定一个长度或百分数作为值。正数代表的是增加距离，而负数代表减少距离。 2.10 对齐文本 text-align用于设置文本的对齐方式。 可选值： – left：左对齐 – right：右对齐 – justify：两边对齐 – center：居中对齐 2.11 首行缩进 text-indent用来设置首行缩进。 该样式需要指定一个长度，并且只对第一 行生效。]]></content>
      <categories>
        <category>前端</category>
        <category>CSS</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>样式表</tag>
        <tag>css基本语法</tag>
        <tag>文本格式化</tag>
        <tag>文字属性</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTML基础]]></title>
    <url>%2F2019%2F10%2F09%2FA-01-HTML%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[1. HTML简介1.1 HTML概述 HTML(Hypertext Markup Language)：超文本标记语言。 它负责网页三要素中的 结构。 HTML使用标签的的形式来标识网页中的不 同组成部分。 所谓超文本指的是超链接，使用超链接可 以让我们从一个页面跳转到另一个页面。 1.2 标签 HTML中的标记指的就是标签 HTML使用标记标签来描述网页 结构： 1.&lt;标签名&gt;标签内容&lt;/标签&gt; 2.&lt;标签名 /&gt; 1.3 元素 我们还将一个完整的标签称为元素 父元素、子元素、祖先元素、后代元素1.4 属性 通过属性为HTML元素提供附加信息。 属性需要设置在开始标签或自结束标签中。 属性总是以名称/值对的形式出现。 有些属性可以是任意值，有些则必须是指定值。 常见属性 ：id、class、tittle 1.5 注释 HTML注释中的内容不会在网页中显示。 格式: &lt;!– 注释内容 –&gt; 注释不能嵌套！2. HTML的发展2.1 发展历史 1993年6月：HTML第一个版本发布。 1995年11月：HTML2.0 1997年1月：HTML3.2（W3C推荐） 1999年12月：HTML4.01（W3C推荐） 2000年底：XHTML1.0（W3C推荐） 2014年10月：HTML5（W3C推荐）2.2 doctype(文档声明) 说明：不进行文档声明或者不进行正确的文档声明浏览器有可能会出现 怪异模式，为避免这种情况，所以一定要进行正确的文档声明 html4 1.过渡版:&lt;!DOCTYPE HTML PUBLIC “-//W3C//DTD HTML 4.01 Transitional//EN” “http://www.w3.org/TR/html4/loose.dtd&quot;&gt; 2.严格版:&lt;!DOCTYPE HTML PUBLIC “-//W3C//DTD HTML 4.01//EN” “http://www.w3.org/TR/html4/strict.dtd&quot;&gt; 3.框架集:&lt;!DOCTYPE HTML PUBLIC “-//W3C//DTD HTML 4.01 Frameset//EN” “http://www.w3.org/TR/html4/frameset.dtd&quot;&gt; xhtml1.0 1.过渡版:&lt;!DOCTYPE html PUBLIC “-//W3C//DTD XHTML 1.0 Transitional//EN” “ http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt; 2.严格版:&lt;!DOCTYPE html PUBLIC “-//W3C//DTD XHTML 1.0 Strict//EN” “http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt; 3.框架集:&lt;!DOCTYPE html PUBLIC “-//W3C//DTD XHTML 1.0 Frameset//EN” “http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd&quot;&gt; html5 &lt;!DOCTYPE html&gt; 3. 编码3.1 编码问题 在计算机的内部，文件都是以二进制编码 保存的。 所谓的二进制编码就是指1和0，也就是我 们的所有内容都需要转换为1和0。 中国两个字在计算机的底层保存的可能要 转换为10100101这种二进制码，这一过程 称为编码。 计算机在读取文件时需要将10100101在转 换为中国给我们显示这一过程称为解码。 3.2 字符集 字 符集规定了如何将文本转换为二进制编码。 常见的字符集：ASKII、ISO8859-1、GBK、 GB2312、UTF-8。 如果编码和解码所用的字符集不一致，就会出现乱码问题。 为了避免乱码，我们统一使用utf-8。 &lt;meta charset=”utf-8” /&gt; 3.3 &lt;meta&gt; meta的作用： –&lt;meta&gt; 标签可提供有关页面的元信息，比如 针对搜索引擎和更新频度的描述和关键词。 –&lt;meta&gt; 标签位于文档的头部，不包含任何内 容。&lt;meta&gt; 标签的属性定义了与文档相关联 的名称/值对。 meta的用法: – 设置页面的字符集 :&lt;meta charset=”utf-8”&gt; – 设置网页的描 :&lt;meta name=”description” content=””&gt; – 设置页面的关键字 :&lt;meta name=”keywords” content=””&gt; – 请求的重定向 :&lt;meta http-equiv=”refresh” content=”5;url=地址”/&gt; 4. 常用标签4.1 &lt;html&gt; 作用：&lt;html&gt;标签用于告诉浏览器这个文档中包含 的信息是用HTML编写的。 用法：\ 所有的网页的内容都需要编写到html标签中， 一个页面中html标签只能有一个；html标签中有两个子标签head和body。 4.2 &lt;head&gt; 作用：&lt;head&gt;标签用来表示网页的元数据，head中 包含了浏览器和搜索引擎使用的其他不可见信 息。 用法： head标签作为html标签的子元素的出现，一 个网页中只能有一个head。 4.3 &lt;title&gt; 作用：&lt;title&gt;标签表示网页的标题，一般会在网页的标 题栏上显示；title标签中的文字，是页面优化的最重要因素。在 搜索引擎的搜索时最先看到的、最醒目的内容。 用法： 建议将title标签紧贴着head标签编写，这样搜索 引擎可以快速检索到标题标签； 网站中的多个页面的title也不应该重复，这样不利 于搜索隐藏检索。 4.4 &lt;body&gt; 作用：&lt;body&gt;标签用来设置网页的主体，所有在页 面中能看到的内容都应该编写到body标签中。 用法： body标签作为html的子标签使用。 4.5 &lt;h1&gt;~&lt;h6&gt; 作用：h1h6都是网页中的标题标签，用来表示网页 中的一个标题，不同的是，从h1h6重要性越 来越低； 标题标签相当于正文的标题，通常认为重要性 仅次于页面的title； 一般标题标签我们只会使用到h3，h3以后的标 题标签对于搜索引擎就没有什么意义了； 一个页面中只会使用一个h1标签。 4.6 &lt;p&gt; 作用：\ 标签表示网页中的一个段落； 一般浏览器会在段落的前和后各加上一个换行， 也就是段落会在页面中自成一行。 4.7 &lt;br /&gt; 作用：&lt;br /&gt;标签表示一个换行标签，使用br标签可 以使br标签后的内容另起一行。 4.8 &lt;hr /&gt; 作用：&lt;hr /&gt;标签是水平线标签，使用hr标签可以在 页面中打印一条水平线，水平线可以将页面分 成上下两个部分。 4.9 &lt;img /&gt; 作用：&lt; img /&gt;标签是图片标签，可以用来向页面中 引入一张外部的图片。 属性： src • 指向一个外部的图片的路径；alt • 图片的描述 4.10 &lt;a&gt; 作用：标签是超链接标签，通过a标签，可以快 速跳转到其他页面。 属性：href • 指向一个链接地址；– target • 设置打开目标页面的位置(可选值：_blank新窗口、 _self当前窗口)。5. 实体(转义字符)5.1 实体 在HTML中预留了一些字符，这些预留字符是不能在网页中直接使用的。 比如&lt;和&gt;,我们不能直接在页面中使用&lt;和 &gt;号，因为浏览器会将它解析为html标签 为了可以使用这些预留字符，我们必须在 html中使用字符实体。 语法: &amp;实体名;5.2 实体字符 小于号&lt; : &amp;lt; 大于号&gt; : &amp;gt; 空格 : &amp;nbsp; 和符号&amp; : &amp;amp 版权© : &amp;copy; 引号” : &amp;quot; 注册商标® : &amp;reg;商标™ : &amp;trade;6. 开发工具6.1 文本编辑器 记事本 Notepad++(免费) Sublime(收费)6.2 IDE(集成开发工具) DreamWeaver（收费） WebStorm（收费） Hbuilder（免费） 7. 文本标签7.1 &lt;em&gt;和&lt;strong&gt; em标签用于表示一段内容中的着重点。 strong标签用于表示一个内容的重要性。 通常em显示为斜体，而strong显示为粗体；这两个标签可以单独使用，也可以一起使用。7.2 &lt;i&gt;和&lt;b&gt; i标签会使文字变成斜体。 b标签会使文字变成粗体。 这两个标签和em和strong类似，但是这两个标签没有语义。 所以根据html5标准，当我们只想设置文本 特殊显示，而不需要强调内容时就可以使 用i和b标签。7.3 &lt;small&gt; small标签表示细则一类的旁注，通常包括 免责声明、注意事项、法律限制、版权信 息等。 浏览器在显示small标签时会显示一个比父 元素小的字号。7.4 &lt;cite&gt; 使用cite标签(《》)可以指明对某内容的引用或参 考。例如，戏剧、文章或图书的标题，歌 曲、电影、照片或雕塑的名称等。7.5 &lt;blockquote&gt;和&lt;q&gt; blockquote和q表示标记引用的文本。 blockquote用于长引用(“”)，q用于短引用。 在两个标签中还可以使用cite属性来表示引用的地址。7.6 &lt;sup&gt;和&lt;sub&gt; sup和sub用于定义上标和下标7.7 &lt;ins&gt;和&lt;del&gt; ins表示插入的内容，显示时通常会加上下 划线。 del表示删除的内容，显示时通常会加上删 除线。7.8 &lt;code&gt;和&lt;pre&gt; 如果你的内容包含代码示例或文件名，就 可以使用code元素。 pre元素表示的是预格式化文本，可以使用 pre包住code来表示一段代码。7.9 有序列表 使用ol和li来创建一个有序列表。7.10 无序列表 使用ul和li来创建一个有序列表。7.9 定义列表 使用dl、dd、dt来创建一个定义列表。12345678&lt;dl&gt; &lt;dt&gt;定义项1&lt;/dt&gt; &lt;dd&gt;定义描述1&lt;/dd&gt; &lt;dt&gt;定义项2&lt;/dt&gt; &lt;dd&gt;定义描述2&lt;/dd&gt; &lt;dt&gt;定义项3&lt;/dt&gt; &lt;dd&gt;定义描述3&lt;/dd&gt; &lt;/dl&gt;]]></content>
      <categories>
        <category>前端</category>
        <category>HTML</category>
        <category>HTML基础</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>html的发展</tag>
        <tag>html标签</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java循环语句语]]></title>
    <url>%2F2019%2F10%2F08%2F03-%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5%E8%AF%AD%2F</url>
    <content type="text"><![CDATA[1. switch语句1.1 switch语句结构（掌握） 格式 123456789101112switch (表达式) &#123; case 1: 语句体1; break; case 2: 语句体2; break; ... default: 语句体n+1; break;&#125; 执行流程： 首先计算出表达式的值 其次，和case依次比较，一旦有对应的值，就会执行相应的语句，在执行的过程中，遇到break就会结 束。 最后，如果所有的case都和表达式的值不匹配，就会执行default语句体部分，然后程序结束掉。 1.2 switch语句练习-春夏秋冬（应用） 需求：一年有12个月，分属于春夏秋冬4个季节，键盘录入一个月份，请用程序实现判断该月份属于哪个季节，并输出。 运行结果： 1234春：3、4、5夏：6、7、8秋：9、10、11冬：1、2、12 示例代码： 123456789101112131415161718192021222324252627282930313233public class Demo1 &#123; public static void main(String[] args) &#123; //键盘录入月份数据，使用变量接收 Scanner sc = new Scanner(System.in); System.out.println("请输入一个月份："); int month = sc.nextInt(); //case穿透 switch(month) &#123; case 1: case 2: case 12: System.out.println("冬季"); break; case 3: case 4: case 5: System.out.println("春季"); break; case 6: case 7: case 8: System.out.println("夏季"); break; case 9: case 10: case 11: System.out.println("秋季"); break; default: System.out.println("你输入的月份有误"); &#125; &#125;&#125; 注意：如果switch中得case，没有对应break的话，则会出现case穿透的现象。 2. for循环2.1 for循环结构（掌握） 循环： 循环语句可以在满足循环条件的情况下，反复执行某一段代码，这段被重复执行的代码被称为循环体语句，当反复 执行这个循环体时，需要在合适的时候把循环判断条件修改为false，从而结束循环，否则循环将一直执行下去，形 成死循环。 for循环格式： 123for (初始化语句;条件判断语句;条件控制语句) &#123; 循环体语句;&#125; 格式解释： 初始化语句： 用于表示循环开启时的起始状态，简单说就是循环开始的时候什么样 条件判断语句：用于表示循环反复执行的条件，简单说就是判断循环是否能一直执行下去 循环体语句： 用于表示循环反复执行的内容，简单说就是循环反复执行的事情 条件控制语句：用于表示循环执行中每次变化的内容，简单说就是控制循环是否能执行下去 执行流程： ①执行初始化语句 ②执行条件判断语句，看其结果是true还是false 如果是false，循环结束 如果是true，继续执行③执行循环体语句 ④执行条件控制语句 ⑤回到②继续 2.2 for循环练习-输出数据（应用） 需求：在控制台输出1-5和5-1的数据 示例代码： 12345678910111213public class ForTest01 &#123; public static void main(String[] args) &#123; //需求：输出数据1-5 for(int i=1; i&lt;=5; i++) &#123; System.out.println(i); &#125; System.out.println("--------"); //需求：输出数据5-1 for(int i=5; i&gt;=1; i--) &#123; System.out.println(i); &#125; &#125;&#125; 2.3 for循环练习-求和（应用） 需求：求1-5之间的数据和，并把求和结果在控制台输出 示例代码： 12345678910111213141516171819202122public class ForTest02 &#123; public static void main(String[] args) &#123; //求和的最终结果必须保存起来，需要定义一个变量，用于保存求和的结果，初始值为0 int sum = 0; //从1开始到5结束的数据，使用循环结构完成 for(int i=1; i&lt;=5; i++) &#123; //将反复进行的事情写入循环结构内部 // 此处反复进行的事情是将数据 i 加到用于保存最终求和的变量 sum 中 sum += i; /* sum += i; sum = sum + i; 第一次：sum = sum + i = 0 + 1 = 1; 第二次：sum = sum + i = 1 + 2 = 3; 第三次：sum = sum + i = 3 + 3 = 6; 第四次：sum = sum + i = 6 + 4 = 10; 第五次：sum = sum + i = 10 + 5 = 15; */ &#125; //当循环执行完毕时，将最终数据打印出来 System.out.println("1-5之间的数据和是：" + sum); &#125;&#125; 本题要点： 今后遇到的需求中，如果带有求和二字，请立即联想到求和变量 求和变量的定义位置，必须在循环外部，如果在循环内部则计算出的数据将是错误的 2.4 for循环练习-求偶数和（应用） 需求：求1-100之间的偶数和，并把求和结果在控制台输出 } 示例代码： 123456789101112131415public class ForTest03 &#123; public static void main(String[] args) &#123; //求和的最终结果必须保存起来，需要定义一个变量，用于保存求和的结果，初始值为0 int sum = 0; //对1-100的数据求和与1-5的数据求和几乎完全一样，仅仅是结束条件不同 for(int i=1; i&lt;=100; i++) &#123; //对1-100的偶数求和，需要对求和操作添加限制条件，判断是否是偶数 if(i%2 == 0) &#123; sum += i; &#125; &#125; //当循环执行完毕时，将最终数据打印出来 System.out.println("1-100之间的偶数和是：" + sum); &#125;&#125; 2.5 for循环练习-水仙花（应用） 需求：在控制台输出所有的“水仙花数” 解释：什么是水仙花数？ 水仙花数，指的是一个三位数，个位、十位、百位的数字立方和等于原数 例如153 3*3*3 + 5*5*5 + 1*1*1 = 153 思路： 获取所有的三位数，准备进行筛选，最小的三位数为100，最大的三位数为999，使用for循环获取 获取每一个三位数的个位，十位，百位，做if语句判断是否是水仙花数 示例代码 1234567891011121314151617public class ForTest04 &#123; public static void main(String[] args) &#123; //输出所有的水仙花数必然要使用到循环，遍历所有的三位数，三位数从100开始，到999结束 for(int i=100; i&lt;1000; i++) &#123; //在计算之前获取三位数中每个位上的值 int ge = i%10; int shi = i/10%10; int bai = i/10/10%10; //判定条件是将三位数中的每个数值取出来，计算立方和后与原始数字比较是否相等 if(ge*ge*ge + shi*shi*shi + bai*bai*bai == i) &#123; //输出满足条件的数字就是水仙花数 System.out.println(i); &#125; &#125; &#125;&#125; 2.6 for循环练习-统计水仙花数个数（应用） 需求：统计“水仙花数”一共有多少个，并在控制台输出个数 示例代码： 12345678910111213141516171819public class ForTest05 &#123; public static void main(String[] args) &#123; //定义变量count，用于保存“水仙花数”的数量，初始值为0 int count = 0; //输出所有的水仙花数必然要使用到循环，遍历所有的三位数，三位数从100开始，到999结束 for(int i=100; i&lt;1000; i++) &#123; //在计算之前获取三位数中每个位上的值 int ge = i%10; int shi = i/10%10; int bai = i/10/10%10; //在判定水仙花数的过程中，满足条件不再输出，更改为修改count的值，使count+1 if(ge*ge*ge + shi*shi*shi + bai*bai*bai == i) &#123; count++; &#125; &#125; //打印输出最终结果 System.out.println("水仙花共有：" + count + "个"); &#125;&#125; 本题要点： 今后如果需求带有统计xxx，请先想到计数器变量 计数器变量定义的位置，必须在循环外部 3. while循环3.1 while结构（掌握） while循环完整格式： 12345初始化语句;while (条件判断语句) &#123; 循环体语句; 条件控制语句;&#125; while循环执行流程： ①执行初始化语句 ②执行条件判断语句，看其结果是true还是false 如果是false，循环结束 如果是true，继续执行③执行循环体语句 ④执行条件控制语句 ⑤回到②继续 示例代码： 12345678910111213141516public class WhileDemo &#123; public static void main(String[] args) &#123; //需求：在控制台输出5次"HelloWorld" //for循环实现 for(int i=1; i&lt;=5; i++) &#123; System.out.println("HelloWorld"); &#125; System.out.println("--------"); //while循环实现 int j = 1; while(j&lt;=5) &#123; System.out.println("HelloWorld"); j++; &#125; &#125;&#125; 3.2 while循环练习-珠穆朗玛峰（应用） 需求：世界最高山峰是珠穆朗玛峰(8844.43米=8844430毫米)，假如我有一张足够大的纸，它的厚度是0.1毫米。请问，我折叠多少次，可以折成珠穆朗玛峰的高度? 示例代码： 1234567891011121314151617181920public class WhileTest &#123; public static void main(String[] args) &#123; //定义一个计数器，初始值为0 int count = 0; //定义纸张厚度 double paper = 0.1; //定义珠穆朗玛峰的高度 int zf = 8844430; //因为要反复折叠，所以要使用循环，但是不知道折叠多少次，这种情况下更适合使用while循环 //折叠的过程中当纸张厚度大于珠峰就停止了，因此继续执行的要求是纸张厚度小于珠峰高度 while(paper &lt;= zf) &#123; //循环的执行过程中每次纸张折叠，纸张的厚度要加倍 paper *= 2; //在循环中执行累加，对应折叠了多少次 count++; &#125; //打印计数器的值 System.out.println("需要折叠：" + count + "次"); &#125;&#125; 4. 循环细节4.1 do…while循环结构（掌握） 完整格式： 12345初始化语句;do &#123; 循环体语句; 条件控制语句;&#125;while(条件判断语句); 执行流程： ① 执行初始化语句 ② 执行循环体语句 ③ 执行条件控制语句 ④ 执行条件判断语句，看其结果是true还是false 如果是false，循环结束 如果是true，继续执行 ⑤ 回到②继续 示例代码： 12345678910111213141516public class DoWhileDemo &#123; public static void main(String[] args) &#123; //需求：在控制台输出5次"HelloWorld" //for循环实现 for(int i=1; i&lt;=5; i++) &#123; System.out.println("HelloWorld"); &#125; System.out.println("--------"); //do...while循环实现 int j = 1; do &#123; System.out.println("HelloWorld"); j++; &#125;while(j&lt;=5); &#125;&#125; 4.2 三种循环的区别（理解） 三种循环的区别 for循环和while循环先判断条件是否成立，然后决定是否执行循环体（先判断后执行） do…while循环先执行一次循环体，然后判断条件是否成立，是否继续执行循环体（先执行后判断） for循环和while的区别 条件控制语句所控制的自增变量，因为归属for循环的语法结构中，在for循环结束后，就不能再次被访问到了 条件控制语句所控制的自增变量，对于while循环来说不归属其语法结构中，在while循环结束后，该变量还可以继续使用 死循环（无限循环）的三种格式 for(;;){} while(true){} do {} while(true); 4.3 跳转控制语句（掌握） 跳转控制语句（break） 跳出循环，结束循环 跳转控制语句（continue） 跳过本次循环，继续下次循环 注意： continue只能在循环中进行使用！ 4.4 循环嵌套（理解） 循环嵌套概述：在循环中，继续定义循环 示例代码： 123456789public static void main(String[] args) &#123; //外循环控制小时的范围，内循环控制分钟的范围 for (int hour = 0; hour &lt; 24; hour++) &#123; for (int minute = 0; minute &lt; 60; minute++) &#123; System.out.println(hour + "时" + minute + "分"); &#125; System.out.println("--------"); &#125; &#125; 理解： 请反复理解这句话（整个内循环，就是外循环的一个循环体，内部循环体没有执行完毕，外循环是不会继续向下执行的） 结论： 外循环执行一次，内循环执行一圈 5. Random5.1 Random产生随机数（掌握） 概述： Random类似Scanner，也是Java提供好的API，内部提供了产生随机数的功能 API后续课程详细讲解，现在可以简单理解为Java已经写好的代码 使用步骤： 导入包 import java.util.Random; 创建对象 Random r = new Random(); 产生随机数 int num = r.nextInt(10); 解释： 10代表的是一个范围，如果括号写10，产生的随机数就是0-9，括号写20，参数的随机数则是0-19 示例代码： 12345678910111213141516import java.util.Random;public class RandomDemo &#123; public static void main(String[] args) &#123; //创建对象 Random r = new Random(); //用循环获取10个随机数 for(int i=0; i&lt;10; i++) &#123; //获取随机数 int number = r.nextInt(10); System.out.println("number:" + number); &#125; //需求：获取一个1-100之间的随机数 int x = r.nextInt(100) + 1; System.out.println(x); &#125;&#125; 5.3 Random练习-猜数字（应用） 需求： 程序自动生成一个1-100之间的数字，使用程序实现猜出这个数字是多少？ 当猜错的时候根据不同情况给出相应的提示 A. 如果猜的数字比真实数字大，提示你猜的数据大了 B. 如果猜的数字比真实数字小，提示你猜的数据小了 C. 如果猜的数字与真实数字相等，提示恭喜你猜中了 示例代码： 123456789101112131415161718192021222324252627282930import java.util.Random;import java.util.Scanner;public class RandomTest &#123; public static void main(String[] args) &#123; //要完成猜数字的游戏，首先需要有一个要猜的数字，使用随机数生成该数字，范围1到100 Random r = new Random(); int number = r.nextInt(100) + 1; while(true) &#123; //使用程序实现猜数字，每次均要输入猜测的数字值，需要使用键盘录入实现 Scanner sc = new Scanner(System.in); System.out.println("请输入你要猜的数字："); int guessNumber = sc.nextInt(); //比较输入的数字和系统产生的数据，需要使用分支语句。 //这里使用if..else..if..格式，根据不同情况进行猜测结果显示 if(guessNumber &gt; number) &#123; System.out.println("你猜的数字" + guessNumber + "大了"); &#125; else if(guessNumber &lt; number) &#123; System.out.println("你猜的数字" + guessNumber + "小了"); &#125; else &#123; System.out.println("恭喜你猜中了"); break; &#125; &#125; &#125;&#125;]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>流程控制语句</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java基础语法02]]></title>
    <url>%2F2019%2F10%2F08%2F02-Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[Java基础语法1. 运算符1.1 算术运算符（理解）1.1.1 运算符和表达式运算符：对常量或者变量进行操作的符号 表达式：用运算符把常量或者变量连接起来符合java语法的式子就可以称为表达式。 ​ 不同运算符连接的表达式体现的是不同类型的表达式。 举例说明： 123int a = 10;int b = 20;int c = a + b; +：是运算符，并且是算术运算符。 a + b：是表达式，由于+是算术运算符，所以这个表达式叫算术表达式。 1.1.2 算术运算符 符号 作用 说明 + 加 参看小学一年级 - 减 参看小学一年级 * 乘 参看小学二年级，与“×”相同 / 除 参看小学二年级，与“÷”相同 % 取余 获取的是两个数据做除法的余数 注意： /和%的区别：两个数据做除法，/取结果的商，%取结果的余数。 整数操作只能得到整数，要想得到小数，必须有浮点数参与运算。 1234int a = 10;int b = 3;System.out.println(a / b); // 输出结果3System.out.println(a % b); // 输出结果1 1.1.3 字符的“+”操作char类型参与算术运算，使用的是计算机底层对应的十进制数值。需要我们记住三个字符对应的数值： ‘a’ – 97 a-z是连续的，所以’b’对应的数值是98，’c’是99，依次递加 ‘A’ – 65 A-Z是连续的，所以’B’对应的数值是66，’C’是67，依次递加 ‘0’ – 48 0-9是连续的，所以’1’对应的数值是49，’2’是50，依次递加 123456789// 可以通过使用字符与整数做算术运算，得出字符对应的数值是多少char ch1 = 'a';System.out.println(ch1 + 1); // 输出98，97 + 1 = 98char ch2 = 'A';System.out.println(ch2 + 1); // 输出66，65 + 1 = 66char ch3 = '0';System.out.println(ch3 + 1); // 输出49，48 + 1 = 49 算术表达式中包含不同的基本数据类型的值的时候，整个算术表达式的类型会自动进行提升。 提升规则： byte类型，short类型和char类型将被提升到int类型，不管是否有其他类型参与运算。 整个表达式的类型自动提升到与表达式中最高等级的操作数相同的类型 ​ 等级顺序：byte,short,char –&gt; int –&gt; long –&gt; float –&gt; double 例如： 123456789byte b1 = 10;byte b2 = 20;// byte b3 = b1 + b2; // 该行报错，因为byte类型参与算术运算会自动提示为int，int赋值给byte可能损失精度int i3 = b1 + b2; // 应该使用int接收byte b3 = (byte) (b1 + b2); // 或者将结果强制转换为byte类型-------------------------------int num1 = 10;double num2 = 20.0;double num3 = num1 + num2; // 使用double接收，因为num1会自动提升为double类型 tips：正是由于上述原因，所以在程序开发中我们很少使用byte或者short类型定义整数。也很少会使用char类型定义字符，而使用字符串类型，更不会使用char类型做算术运算。 1.1.4 字符串的“+”操作当“+”操作中出现字符串时，这个”+”是字符串连接符，而不是算术运算。 1System.out.println("itheima"+ 666); // 输出：itheima666 在”+”操作中，如果出现了字符串，就是连接运算符，否则就是算术运算。当连续进行“+”操作时，从左到右逐个执行。 1234System.out.println(1 + 99 + "年黑马"); // 输出：199年黑马System.out.println(1 + 2 + "itheima" + 3 + 4); // 输出：3itheima34// 可以使用小括号改变运算的优先级 System.out.println(1 + 2 + "itheima" + (3 + 4)); // 输出：3itheima7 1.2 赋值运算符（应用）赋值运算符的作用是将一个表达式的值赋给左边，左边必须是可修改的，不能是常量。 符号 作用 说明 = 赋值 a=10，将10赋值给变量a += 加后赋值 a+=b，将a+b的值给a -= 减后赋值 a-=b，将a-b的值给a *= 乘后赋值 a*=b，将a×b的值给a /= 除后赋值 a/=b，将a÷b的商给a %= 取余后赋值 a%=b，将a÷b的余数给a 注意： 扩展的赋值运算符隐含了强制类型转换。 1234short s = 10;s = s + 10; // 此行代码报出，因为运算中s提升为int类型，运算结果int赋值给short可能损失精度s += 10; // 此行代码没有问题，隐含了强制类型转换，相当于 s = (short) (s + 10); 1.3 自增自减运算符（理解） 符号 作用 说明 ++ 自增 变量的值加1 – 自减 变量的值减1 注意事项： ​ ++和– 既可以放在变量的后边，也可以放在变量的前边。 ​ 单独使用的时候， ++和– 无论是放在变量的前边还是后边，结果是一样的。 ​ 参与操作的时候，如果放在变量的后边，先拿变量参与操作，后拿变量做++或者–。 ​ 参与操作的时候，如果放在变量的前边，先拿变量做++或者–，后拿变量参与操作。 ​ 最常见的用法：单独使用。 123456789101112131415int i = 10;i++; // 单独使用System.out.println("i:" + i); // i:11int j = 10;++j; // 单独使用System.out.println("j:" + j); // j:11int x = 10;int y = x++; // 赋值运算，++在后边，所以是使用x原来的值赋值给y，x本身自增1System.out.println("x:" + x + ", y:" + y); // x:11，y:10int m = 10;int n = ++m; // 赋值运算，++在前边，所以是使用m自增后的值赋值给n，m本身自增1System.out.println("m:" + m + ", m:" + m); // m:11，m:11 练习： 123456789int x = 10;int y = x++ + x++ + x++;System.out.println(y); // y的值是多少？/*解析，三个表达式都是++在后，所以每次使用的都是自增前的值，但程序自左至右执行，所以第一次自增时，使用的是10进行计算，但第二次自增时，x的值已经自增到11了，所以第二次使用的是11，然后再次自增。。。所以整个式子应该是：int y = 10 + 11 + 12;输出结果为33。*/注意：通过此练习深刻理解自增和自减的规律，但实际开发中强烈建议不要写这样的代码！小心挨打！ 1.4 关系运算符（应用）关系运算符有6种关系，分别为小于、小于等于、大于、等于、大于等于、不等于。 符号 说明 == a==b，判断a和b的值是否相等，成立为true，不成立为false != a!=b，判断a和b的值是否不相等，成立为true，不成立为false &gt; a&gt;b，判断a是否大于b，成立为true，不成立为false &gt;= a&gt;=b，判断a是否大于等于b，成立为true，不成立为false &lt; a&lt;b，判断a是否小于b，成立为true，不成立为false &lt;= a&lt;=b，判断a是否小于等于b，成立为true，不成立为false 注意事项： ​ 关系运算符的结果都是boolean类型，要么是true，要么是false。 ​ 千万不要把“==”误写成“=”，”==”是判断是否相等的关系，”=”是赋值。 123456789101112int a = 10;int b = 20;System.out.println(a == b); // falseSystem.out.println(a != b); // trueSystem.out.println(a &gt; b); // falseSystem.out.println(a &gt;= b); // falseSystem.out.println(a &lt; b); // trueSystem.out.println(a &lt;= b); // true// 关系运算的结果肯定是boolean类型，所以也可以将运算结果赋值给boolean类型的变量boolean flag = a &gt; b;System.out.println(flag); // 输出false 1.5 逻辑运算符（应用）逻辑运算符把各个运算的关系表达式连接起来组成一个复杂的逻辑表达式，以判断程序中的表达式是否成立，判断的结果是 true 或 false。 符号 作用 说明 &amp; 逻辑与 a&amp;b，a和b都是true，结果为true，否则为false | 逻辑或 a|b，a和b都是false，结果为false，否则为true ^ 逻辑异或 a^b，a和b结果不同为true，相同为false ! 逻辑非 !a，结果和a的结果正好相反 1234567891011121314151617181920212223242526272829//定义变量int i = 10;int j = 20;int k = 30;//&amp; “与”，并且的关系，只要表达式中有一个值为false，结果即为falseSystem.out.println((i &gt; j) &amp; (i &gt; k)); //false &amp; false,输出falseSystem.out.println((i &lt; j) &amp; (i &gt; k)); //true &amp; false,输出falseSystem.out.println((i &gt; j) &amp; (i &lt; k)); //false &amp; true,输出falseSystem.out.println((i &lt; j) &amp; (i &lt; k)); //true &amp; true,输出trueSystem.out.println("--------");//| “或”，或者的关系，只要表达式中有一个值为true，结果即为trueSystem.out.println((i &gt; j) | (i &gt; k)); //false | false,输出falseSystem.out.println((i &lt; j) | (i &gt; k)); //true | false,输出trueSystem.out.println((i &gt; j) | (i &lt; k)); //false | true,输出trueSystem.out.println((i &lt; j) | (i &lt; k)); //true | true,输出trueSystem.out.println("--------");//^ “异或”，相同为false，不同为trueSystem.out.println((i &gt; j) ^ (i &gt; k)); //false ^ false,输出falseSystem.out.println((i &lt; j) ^ (i &gt; k)); //true ^ false,输出trueSystem.out.println((i &gt; j) ^ (i &lt; k)); //false ^ true,输出trueSystem.out.println((i &lt; j) ^ (i &lt; k)); //true ^ true,输出falseSystem.out.println("--------");//! “非”，取反System.out.println((i &gt; j)); //falseSystem.out.println(!(i &gt; j)); //!false，,输出true 短路逻辑运算符 符号 作用 说明 &amp;&amp; 短路与 作用和&amp;相同，但是有短路效果 || 短路或 作用和|相同，但是有短路效果 在逻辑与运算中，只要有一个表达式的值为false，那么结果就可以判定为false了，没有必要将所有表达式的值都计算出来，短路与操作就有这样的效果，可以提高效率。同理在逻辑或运算中，一旦发现值为true，右边的表达式将不再参与运算。 逻辑与&amp;，无论左边真假，右边都要执行。 短路与&amp;&amp;，如果左边为真，右边执行；如果左边为假，右边不执行。 逻辑或|，无论左边真假，右边都要执行。 短路或||，如果左边为假，右边执行；如果左边为真，右边不执行。 123456789int x = 3;int y = 4;System.out.println((x++ &gt; 4) &amp; (y++ &gt; 5)); // 两个表达都会运算System.out.println(x); // 4System.out.println(y); // 5System.out.println((x++ &gt; 4) &amp;&amp; (y++ &gt; 5)); // 左边已经可以确定结果为false，右边不参与运算System.out.println(x); // 4System.out.println(y); // 4 1.6 三元运算符（理解）三元运算符语法格式： 1关系表达式 ? 表达式1 : 表达式2; 解释：问号前面的位置是判断的条件，判断结果为boolean型，为true时调用表达式1，为false时调用表达式2。其逻辑为：如果条件表达式成立或者满足则执行表达式1，否则执行第二个。 举例： 123int a = 10;int b = 20;int c = a &gt; b ? a : b; // 判断 a&gt;b 是否为真，如果为真取a的值，如果为假，取b的值 三元运算符案例： 1、需求：动物园里有两只老虎，已知两只老虎的体重分别为180kg、200kg，请用程序实现判断两只老虎的体重是否相同。 1234567891011public class OperatorTest01 &#123; public static void main(String[] args) &#123; //1：定义两个变量用于保存老虎的体重，单位为kg，这里仅仅体现数值即可。 int weight1 = 180; int weight2 = 200; //2：用三元运算符实现老虎体重的判断，体重相同，返回true，否则，返回false。 boolean b = weight1 == weight2 ? true : false; //3：输出结果 System.out.println("b:" + b); &#125;&#125; 2、需求：一座寺庙里住着三个和尚，已知他们的身高分别为150cm、210cm、165cm，请用程序实现获取这三个和尚的最高身高。 1234567891011121314public class OperatorTest02 &#123; public static void main(String[] args) &#123; //1：定义三个变量用于保存和尚的身高，单位为cm，这里仅仅体现数值即可。 int height1 = 150; int height2 = 210; int height3 = 165; //2：用三元运算符获取前两个和尚的较高身高值，并用临时身高变量保存起来。 int tempHeight = height1 &gt; height2 ? height1 : height2; //3：用三元运算符获取临时身高值和第三个和尚身高较高值，并用最大身高变量保存。 int maxHeight = tempHeight &gt; height3 ? tempHeight : height3; //4：输出结果 System.out.println("maxHeight:" + maxHeight); &#125;&#125; 2. 数据输入（应用）我们可以通过 Scanner 类来获取用户的输入。使用步骤如下： 1、导包。Scanner 类在java.util包下，所以需要将该类导入。导包的语句需要定义在类的上面。 1import java.util.Scanner; 2、创建Scanner对象。 1Scanner sc = new Scanner(System.in);// 创建Scanner对象，sc表示变量名，其他均不可变 3、接收数据 1int i = sc.nextInt(); // 表示将键盘录入的值作为int数返回。 示例： 1234567891011import java.util.Scanner;public class ScannerDemo &#123; public static void main(String[] args) &#123; //创建对象 Scanner sc = new Scanner(System.in); //接收数据 int x = sc.nextInt(); //输出数据 System.out.println("x:" + x); &#125;&#125; 改写三个和尚案例，数据使用键盘录入。 1234567891011121314151617181920import java.util.Scanner;public class ScannerTest &#123; public static void main(String[] args) &#123; //身高未知，采用键盘录入实现。首先导包，然后创建对象。 Scanner sc = new Scanner(System.in); //键盘录入三个身高分别赋值给三个变量。 System.out.println("请输入第一个和尚的身高："); int height1 = sc.nextInt(); System.out.println("请输入第二个和尚的身高："); int height2 = sc.nextInt(); System.out.println("请输入第三个和尚的身高："); int height3 = sc.nextInt(); //用三元运算符获取前两个和尚的较高身高值，并用临时身高变量保存起来。 int tempHeight = height1 &gt; height2 ? height1 : height2; //用三元运算符获取临时身高值和第三个和尚身高较高值，并用最大身高变量保存。 int maxHeight = tempHeight &gt; height3 ? tempHeight : height3; //输出结果。 System.out.println("这三个和尚中身高最高的是：" + maxHeight +"cm"); &#125;&#125; 3. 流程控制语句（应用）在一个程序执行的过程中，各条语句的执行顺序对程序的结果是有直接影响的。所以，我们必须清楚每条语句的执行流程。而且，很多时候要通过控制语句的执行顺序来实现我们想要的功能。 3.1 流程控制语句分类​ 顺序结构 ​ 分支结构(if, switch) ​ 循环结构(for, while, do…while) 3.2 顺序结构顺序结构是程序中最简单最基本的流程控制，没有特定的语法结构，按照代码的先后顺序，依次执行，程序中大多数的代码都是这样执行的。 顺序结构执行流程图： 3.3 分支结构之if语句if语句格式11234格式：if (关系表达式) &#123; 语句体; &#125; 执行流程： ①首先计算关系表达式的值 ②如果关系表达式的值为true就执行语句体 ③如果关系表达式的值为false就不执行语句体 ④继续执行后面的语句内容 示例： 123456789101112131415161718public class IfDemo &#123; public static void main(String[] args) &#123; System.out.println("开始"); //定义两个变量 int a = 10; int b = 20; //需求：判断a和b的值是否相等，如果相等，就在控制台输出：a等于b if(a == b) &#123; System.out.println("a等于b"); &#125; //需求：判断a和c的值是否相等，如果相等，就在控制台输出：a等于c int c = 10; if(a == c) &#123; System.out.println("a等于c"); &#125; System.out.println("结束"); &#125;&#125; if语句格式2123456格式：if (关系表达式) &#123; 语句体1; &#125; else &#123; 语句体2; &#125; 执行流程： ①首先计算关系表达式的值 ②如果关系表达式的值为true就执行语句体1 ③如果关系表达式的值为false就执行语句体2 ④继续执行后面的语句内容 示例： 12345678910111213141516public class IfDemo02 &#123; public static void main(String[] args) &#123; System.out.println("开始"); //定义两个变量 int a = 10; int b = 20; b = 5; //需求：判断a是否大于b，如果是，在控制台输出：a的值大于b，否则，在控制台输出：a的值不大于b if(a &gt; b) &#123; System.out.println("a的值大于b"); &#125; else &#123; System.out.println("a的值不大于b"); &#125; System.out.println("结束"); &#125;&#125; if语句案例：奇偶数 需求：任意给出一个整数，请用程序实现判断该整数是奇数还是偶数，并在控制台输出该整数是奇数还是偶数。 分析： ​ ①为了体现任意给出一个整数，采用键盘录入一个数据 ​ ②判断整数是偶数还是奇数要分两种情况进行判断，使用if..else结构 ​ ③判断是否偶数需要使用取余运算符实现该功能 number % 2 == 0 ​ ④根据判定情况，在控制台输出对应的内容 1234567891011121314151617import java.util.Scanner;public class IfTest01 &#123; public static void main(String[] args) &#123; //为了体现任意给出一个整数，采用键盘录入一个数据。(导包，创建对象，接收数据) Scanner sc = new Scanner(System.in); System.out.println("请输入一个整数："); int number = sc.nextInt(); //判断整数是偶数还是奇数要分两种情况进行判断，使用if..else结构 //判断是否偶数需要使用取余运算符实现该功能 number % 2 == 0 //根据判定情况，在控制台输出对应的内容 if(number%2 == 0) &#123; System.out.println(number + "是偶数"); &#125; else &#123; System.out.println(number + "是奇数"); &#125; &#125;&#125; if语句格式312345678910格式：if (关系表达式1) &#123; 语句体1; &#125; else if (关系表达式2) &#123; 语句体2; &#125; …else &#123; 语句体n+1;&#125; 执行流程： ①首先计算关系表达式1的值 ②如果值为true就执行语句体1；如果值为false就计算关系表达式2的值 ③如果值为true就执行语句体2；如果值为false就计算关系表达式3的值 ④… ⑤如果没有任何关系表达式为true，就执行语句体n+1。 示例：键盘录入一个星期数(1,2,…7)，输出对应的星期一，星期二，…星期日 1234567891011121314151617181920212223242526import java.util.Scanner;public class IfDemo03 &#123; public static void main(String[] args) &#123; System.out.println("开始"); // 需求：键盘录入一个星期数(1,2,...7)，输出对应的星期一，星期二，...星期日 Scanner sc = new Scanner(System.in); System.out.println("请输入一个星期数(1-7)："); int week = sc.nextInt(); if(week == 1) &#123; System.out.println("星期一"); &#125; else if(week == 2) &#123; System.out.println("星期二"); &#125; else if(week == 3) &#123; System.out.println("星期三"); &#125; else if(week == 4) &#123; System.out.println("星期四"); &#125; else if(week == 5) &#123; System.out.println("星期五"); &#125; else if(week == 6) &#123; System.out.println("星期六"); &#125; else &#123; System.out.println("星期日"); &#125; System.out.println("结束"); &#125;&#125; if语句格式3案例： 需求：小明快要期末考试了，小明爸爸对他说，会根据他不同的考试成绩，送他不同的礼物，假如你可以控制小明的得分，请用程序实现小明到底该获得什么样的礼物，并在控制台输出。 分析： ​ ①小明的考试成绩未知，可以使用键盘录入的方式获取值 ​ ②由于奖励种类较多，属于多种判断，采用if…else…if格式实现 ​ ③为每种判断设置对应的条件 ​ ④为每种判断设置对应的奖励 123456789101112131415161718192021222324import java.util.Scanner;public class IfTest02 &#123; public static void main(String[] args) &#123; //小明的考试成绩未知，可以使用键盘录入的方式获取值 Scanner sc = new Scanner(System.in); System.out.println("请输入一个分数："); int score = sc.nextInt(); //由于奖励种类较多，属于多种判断，采用if...else...if格式实现 //为每种判断设置对应的条件 //为每种判断设置对应的奖励 //数据测试：正确数据，边界数据，错误数据 if(score&gt;100 || score&lt;0) &#123; System.out.println("你输入的分数有误"); &#125; else if(score&gt;=95 &amp;&amp; score&lt;=100) &#123; System.out.println("山地自行车一辆"); &#125; else if(score&gt;=90 &amp;&amp; score&lt;=94) &#123; System.out.println("游乐场玩一次"); &#125; else if(score&gt;=80 &amp;&amp; score&lt;=89) &#123; System.out.println("变形金刚玩具一个"); &#125; else &#123; System.out.println("胖揍一顿"); &#125; &#125;&#125;]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>Path环境变量</tag>
        <tag>java基础语法</tag>
        <tag>流程控制语句</tag>
        <tag>运算符</tag>
        <tag>数据输入</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java基础语法01]]></title>
    <url>%2F2019%2F10%2F08%2F01-java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[1. Java概述1.1 Java语言发展史（了解）语言：人与人交流沟通的表达方式 计算机语言：人与计算机之间进行信息交流沟通的一种特殊语言 Java语言是美国Sun公司（Stanford University Network）在1995年推出的计算机语言 Java之父：詹姆斯·高斯林（James Gosling） 2009年，Sun公司被甲骨文公司收购，所以我们现在访问oracle官网即可：https://www.oracle.com 当前，我们课程使用的JDK版本：11.0 1.2 Java语言跨平台原理（理解）Java程序并非是直接运行的，Java编译器将Java源程序编译成与平台无关的字节码文件(class文件)，然后由Java虚拟机（JVM）对字节码文件解释执行。所以在不同的操作系统下，只需安装不同的Java虚拟机即可实现java程序的跨平台。 1.3 JRE和JDK（记忆）JVM（Java Virtual Machine），Java虚拟机 JRE（Java Runtime Environment），Java运行环境，包含了JVM和Java的核心类库（Java API） JDK（Java Development Kit）称为Java开发工具，包含了JRE和开发工具 总结：我们只需安装JDK即可，它包含了java的运行环境和虚拟机。 1.4 JDK的下载和安装（应用）1.4.1 下载通过官方网站获取JDK http://www.oracle.com 注意：针对不同的操作系统，需要下载对应版本的JDK。 具体下载步骤请参见《JDK下载及安装说明文档》 1.4.2 安装傻瓜式安装，下一步即可。但默认的安装路径是在C:\Program Files下，为方便统一管理建议修改安装路径，将与开发相关的软件都安装到一个目录下，例如：E:\develop。 注意：安装路径不要包含中文或者空格等特殊字符（使用纯英文目录）。 具体安装步骤请参见《JDK下载及安装说明文档》 1.4.3 JDK的安装目录介绍 目录名称 说明 bin 该路径下存放了JDK的各种工具命令。javac和java就放在这个目录。 conf 该路径下存放了JDK的相关配置文件。 include 该路径下存放了一些平台特定的头文件。 jmods 该路径下存放了JDK的各种模块。 legal 该路径下存放了JDK各模块的授权文档。 lib 该路径下存放了JDK工具的一些补充JAR包。 2. 第一个演示程序2.1 常用DOS命令（应用）在接触集成开发环境之前，我们需要使用命令行窗口对java程序进行编译和运行，所以需要知道一些常用DOS命令。 1、打开命令行窗口的方式：win + r打开运行窗口，输入cmd，回车。 2、常用命令及其作用 操作 说明 盘符名称: 盘符切换。E:回车，表示切换到E盘。 dir 查看当前路径下的内容。 cd 目录 进入单级目录。cd itheima cd .. 回退到上一级目录。 cd 目录1\目录2... 进入多级目录。cd itheima\JavaSE cd \ 回退到盘符目录。 cls 清屏。 exit 退出命令提示符窗口。 2.2 Path环境变量的配置（应用）2.2.1 为什么配置环境变量开发Java程序，需要使用JDK提供的开发工具（比如javac.exe、java.exe等命令），而这些工具在JDK的安装目录的bin目录下，如果不配置环境变量，那么这些命令只可以在该目录下执行。我们不可能把所有的java文件都放到JDK的bin目录下，所以配置环境变量的作用就是可以使bin目录下的java相关命令可以在任意目录下使用。 2.2.2 配置环境变量步骤具体配置步骤请参见《Java环境变量配置说明》文档。 2.3 HelloWorld案例（应用）HelloWorld案例是指在计算机屏幕上输出“HelloWorld”这行文字。各种计算机语言都习惯使用该案例作为第一个演示案例。 2.3.1 Java程序开发运行流程开发Java程序，需要三个步骤：编写程序，编译程序，运行程序。 2.3.2 HelloWorld案例的编写1、新建文本文档文件，修改名称为HelloWorld.java。 2、用记事本打开HelloWorld.java文件，输写程序内容。 12345public class HelloWorld &#123; public static void main(String[] args) &#123; System.out.println("HelloWorld"); &#125;&#125; 2.3.3 HelloWorld案例的编译和运行存文件，打开命令行窗口，将目录切换至java文件所在目录，编译java文件生成class文件，运行class文件。 编译：javac 文件名.java 范例：javac HelloWorld.java 执行：java 类名 范例：java HelloWorld 2.4 HelloWorld案例常见问题（理解）2.4.1 BUG在电脑系统或程序中，隐藏着的一些未被发现的缺陷或问题统称为bug（漏洞）。 2.4.2 BUG的解决1、具备识别BUG的能力：多看 2、具备分析BUG的能力：多思考，多查资料 3、具备解决BUG的能力：多尝试，多总结 2.4.3 HelloWorld案例常见问题1、非法字符问题。Java中的符号都是英文格式的。 2、大小写问题。Java语言对大小写敏感（区分大小写）。 3、在系统中显示文件的扩展名，避免出现HelloWorld.java.txt文件。 4、编译命令后的java文件名需要带文件后缀.java 5、运行命令后的class文件名（类名）不带文件后缀.class … 2.5 Notepad++软件的安装和使用（应用）2.5.1 什么要使用Notepad++软件Notepad++功能比windows中的自带记事本功能强大，除了可以用来制作一般的纯文字说明文件，也十分适合编写计算机程序代码。Notepad++有行号，能够快速定位问题位置，还有语法高亮度显示、代码折叠等功能。而且它是免费的。 2.5.2 Notepad++软件安装安装：傻瓜式安装，一直下一步即可。建议也安装到统一的开发软件目录下，比如E:\develop。 具体安装步骤请参见《Nodepad++软件安装及配置说明》文档。 2.5.3Notepad++软件配置安装完毕之后，为了使用方便，做一个简单的配置：修改默认语言和编码。 具体配置的说明请参见《Nodepad++软件安装及配置说明》文档。 3. java基础语法3.1 注释（理解）注释是对代码的解释和说明文字，可以提高程序的可读性，因此在程序中添加必要的注释文字十分重要。Java中的注释分为三种： 单行注释。单行注释的格式是使用//，从//开始至本行结尾的文字将作为注释文字。 1// 这是单行注释文字 多行注释。多行注释的格式是使用/* 和 */将一段较长的注释括起来。 123456/*这是多行注释文字这是多行注释文字这是多行注释文字*/注意：多行注释不能嵌套使用。 文档注释。文档注释以/**开始，以*/结束。（以后讲） 3.2 关键字（理解）关键字是指被java语言赋予了特殊含义的单词。 关键字的特点： ​ 关键字的字母全部小写。 ​ 常用的代码编辑器对关键字都有高亮显示，比如现在我们能看到的public、class、static等。 3.3 常量（应用）常量：在程序运行过程中，其值不可以发生改变的量。 Java中的常量分类： ​ 字符串常量 用双引号括起来的多个字符（可以包含0个、一个或多个），例如”a”、”abc”、”中国”等 ​ 整数常量 整数，例如：-10、0、88等 ​ 小数常量 小数，例如：-5.5、1.0、88.88等 ​ 字符常量 用单引号括起来的一个字符，例如：’a’、’5’、’B’、’中’等 ​ 布尔常量 布尔值，表示真假，只有两个值true和false ​ 空常量 一个特殊的值，空值，值为null 除空常量外，其他常量均可使用输出语句直接输出。 123456789public class Demo &#123; public static void main(String[] args) &#123; System.out.println(10); // 输出一个整数 System.out.println(5.5); // 输出一个小数 System.out.println('a'); // 输出一个字符 System.out.println(true); // 输出boolean值true System.out.println("欢迎来到黑马程序员"); // 输出字符串 &#125;&#125; 3.4 数据类型（记忆、应用）3.4.1 计算机存储单元我们知道计算机是可以用来存储数据的，但是无论是内存还是硬盘，计算机存储设备的最小信息单元叫“位（bit）”，我们又称之为“比特位”，通常用小写的字母”b”表示。而计算机中最基本的存储单元叫“字节（byte）”， 通常用大写字母”B”表示，字节是由连续的8个位组成。 除了字节外还有一些常用的存储单位，其换算单位如下： 1B（字节） = 8bit 1KB = 1024B 1MB = 1024KB 1GB = 1024MB 1TB = 1024GB 3.4.2 Java中的数据类型Java是一个强类型语言，Java中的数据必须明确数据类型。在Java中的数据类型包括基本数据类型和引用数据类型两种。 Java中的基本数据类型： 数据类型 关键字 内存占用 取值范围 整数类型 byte 1 -128~127 short 2 -32768~32767 int(默认) 4 -2的31次方到2的31次方-1 long 8 -2的63次方到2的63次方-1 浮点类型 float 4 负数：-3.402823E+38到-1.401298E-45 正数： 1.401298E-45到3.402823E+38 double(默认) 8 负数：-1.797693E+308到-4.9000000E-324 正数：4.9000000E-324 到1.797693E+308 字符类型 char 2 0-65535 布尔类型 boolean 1 true，false 说明： ​ e+38表示是乘以10的38次方，同样，e-45表示乘以10的负45次方。 ​ 在java中整数默认是int类型，浮点数默认是double类型。 3.5 变量（应用）3.5.1 变量的定义变量：在程序运行过程中，其值可以发生改变的量。 从本质上讲，变量是内存中的一小块区域，其值可以在一定范围内变化。 变量的定义格式： 123数据类型 变量名 = 初始化值; // 声明变量并赋值int age = 18;System.out.println(age); 或者 123456// 先声明，后赋值（使用前赋值即可）数据类型 变量名;变量名 = 初始化值;double money;money = 55.5;System.out.println(money); 还可以在同一行定义多个同一种数据类型的变量，中间使用逗号隔开。但不建议使用这种方式，降低程序的可读性。 123456789int a = 10, b = 20; // 定义int类型的变量a和b，中间使用逗号隔开System.out.println(a);System.out.println(b);int c,d; // 声明int类型的变量c和d，中间使用逗号隔开c = 30;d = 40;System.out.println(c);System.out.println(d); 变量的使用：通过变量名访问即可。 3.5.2 使用变量时的注意事项 在同一对花括号中，变量名不能重复。 变量在使用之前，必须初始化（赋值）。 定义long类型的变量时，需要在整数的后面加L（大小写均可，建议大写）。因为整数默认是int类型，整数太大可能超出int范围。 定义float类型的变量时，需要在小数的后面加F（大小写均可，建议大写）。因为浮点数的默认类型是double， double的取值范围是大于float的，类型不兼容。 3.6 标识符（记忆、理解）标识符是用户编程时使用的名字，用于给类、方法、变量、常量等命名。 Java中标识符的组成规则： ​ 由字母、数字、下划线“_”、美元符号“$”组成，第一个字符不能是数字。 ​ 不能使用java中的关键字作为标识符。 ​ 标识符对大小写敏感（区分大小写）。 Java中标识符的命名约定： ​ 小驼峰式命名：变量名、方法名 ​ 首字母小写，从第二个单词开始每个单词的首字母大写。 ​ 大驼峰式命名：类名 ​ 每个单词的首字母都大写。 ​ 另外，标识符的命名最好可以做到见名知意 ​ 例如：username、studentNumber等。 3.7 类型转换（理解）在Java中，一些数据类型之间是可以相互转换的。分为两种情况：自动类型转换和强制类型转换。 自动类型转换： ​ 把一个表示数据范围小的数值或者变量赋值给另一个表示数据范围大的变量。这种转换方式是自动的，直接书写即可。例如： 12double num = 10; // 将int类型的10直接赋值给double类型System.out.println(num); // 输出10.0 强制类型转换： ​ 把一个表示数据范围大的数值或者变量赋值给另一个表示数据范围小的变量。 ​ 强制类型转换格式：目标数据类型 变量名 = (目标数据类型)值或者变量; ​ 例如： 123double num1 = 5.5;int num2 = (int) num1; // 将double类型的num1强制转换为int类型System.out.println(num2); // 输出5（小数位直接舍弃） 说明： char类型的数据转换为int类型是按照码表中对应的int值进行计算的。比如在ASCII码表中，’a’对应97。 12int a = 'a';System.out.println(a); // 将输出97 整数默认是int类型，byte、short和char类型数据参与运算均会自动转换为int类型。 12345678byte b1 = 10;byte b2 = 20;byte b3 = b1 + b2; // 第三行代码会报错，b1和b2会自动转换为int类型，计算结果为int，int赋值给byte需要强制类型转换。// 修改为:int num = b1 + b2;// 或者：byte b3 = (byte) (b1 + b2); boolean类型不能与其他基本数据类型相互转换。]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java发展</tag>
        <tag>JRE和JDK</tag>
        <tag>DOS命令</tag>
        <tag>Path环境变量</tag>
        <tag>java基础语法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F10%2F08%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
