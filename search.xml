<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[00-markdown常用语法]]></title>
    <url>%2F2019%2F10%2F09%2F00-markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[1.标题 # 一级标题一级标题 ## 二级标题二级标题 ### 三级标题三级标题 #### 四级标题四级标题 ##### 五级标题五级标题 ###### 六级标题六级标题 2.列表(注意空格) * ：无序列表 + ：无序列表 - ：无序列表 ：有序列表 ：有序列表 ：有序列表3.换行 按两次回车 html中的标签br &lt;可识别的内容&gt;4.分割线 --- 连续输入三个- *** 连续输入三个* 5.超链接 [超链接名字](超链接的地址src) wcy’blog 6.粗体和斜体 *内容* ：一个*号代表 斜体 这是斜体文字 **内容** ：两个*号代表 粗体 这是粗体文字 ***内容*** ：三个*号代表 斜体+粗体 这是斜体+粗体文字 7.引用 &gt; 引用一段话 这是引用的话的示例 &lt;!–￼0–&gt;]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>markdown常用语法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[01-CSS基础]]></title>
    <url>%2F2019%2F10%2F09%2F01-CSS%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[01-HTML基础]]></title>
    <url>%2F2019%2F10%2F09%2F01-HTML%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[1. HTML简介1.1 HTML概述 HTML(Hypertext Markup Language)：超文本标记语言。 它负责网页三要素中的 结构。 HTML使用标签的的形式来标识网页中的不 同组成部分。 所谓超文本指的是超链接，使用超链接可 以让我们从一个页面跳转到另一个页面。 1.2 标签 HTML中的标记指的就是标签 HTML使用标记标签来描述网页 结构： 1.&lt;标签名&gt;标签内容&lt;/标签&gt; 2.&lt;标签名 /&gt; 1.3 元素 我们还将一个完整的标签称为元素 父元素、子元素、祖先元素、后代元素1.4 属性 通过属性为HTML元素提供附加信息。 属性需要设置在开始标签或自结束标签中。 属性总是以名称/值对的形式出现。 有些属性可以是任意值，有些则必须是指定值。 常见属性 ：id、class、tittle 1.5 注释 HTML注释中的内容不会在网页中显示。 格式: &lt;!– 注释内容 –&gt; 注释不能嵌套！2. HTML的发展2.1 发展历史 1993年6月：HTML第一个版本发布。 1995年11月：HTML2.0 1997年1月：HTML3.2（W3C推荐） 1999年12月：HTML4.01（W3C推荐） 2000年底：XHTML1.0（W3C推荐） 2014年10月：HTML5（W3C推荐）2.2 doctype(文档声明) 说明：不进行文档声明或者不进行正确的文档声明浏览器有可能会出现 怪异模式，为避免这种情况，所以一定要进行正确的文档声明 html4 1.过渡版:&lt;!DOCTYPE HTML PUBLIC “-//W3C//DTD HTML 4.01 Transitional//EN” “http://www.w3.org/TR/html4/loose.dtd&quot;&gt; 2.严格版:&lt;!DOCTYPE HTML PUBLIC “-//W3C//DTD HTML 4.01//EN” “http://www.w3.org/TR/html4/strict.dtd&quot;&gt; 3.框架集:&lt;!DOCTYPE HTML PUBLIC “-//W3C//DTD HTML 4.01 Frameset//EN” “http://www.w3.org/TR/html4/frameset.dtd&quot;&gt; xhtml1.0 1.过渡版:&lt;!DOCTYPE html PUBLIC “-//W3C//DTD XHTML 1.0 Transitional//EN” “ http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt; 2.严格版:&lt;!DOCTYPE html PUBLIC “-//W3C//DTD XHTML 1.0 Strict//EN” “http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt; 3.框架集:&lt;!DOCTYPE html PUBLIC “-//W3C//DTD XHTML 1.0 Frameset//EN” “http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd&quot;&gt; html5 &lt;!DOCTYPE html&gt; 3. 编码3.1 编码问题 在计算机的内部，文件都是以二进制编码 保存的。 所谓的二进制编码就是指1和0，也就是我 们的所有内容都需要转换为1和0。 中国两个字在计算机的底层保存的可能要 转换为10100101这种二进制码，这一过程 称为编码。 计算机在读取文件时需要将10100101在转 换为中国给我们显示这一过程称为解码。 3.2 字符集 字 符集规定了如何将文本转换为二进制编码。 常见的字符集：ASKII、ISO8859-1、GBK、 GB2312、UTF-8。 如果编码和解码所用的字符集不一致，就会出现乱码问题。 为了避免乱码，我们统一使用utf-8。 &lt;meta charset=”utf-8” /&gt; 3.3 &lt;meta&gt; meta的作用： –&lt;meta&gt; 标签可提供有关页面的元信息，比如 针对搜索引擎和更新频度的描述和关键词。 –&lt;meta&gt; 标签位于文档的头部，不包含任何内 容。&lt;meta&gt; 标签的属性定义了与文档相关联 的名称/值对。 meta的用法: – 设置页面的字符集 :&lt;meta charset=”utf-8”&gt; – 设置网页的描 :&lt;meta name=”description” content=””&gt; – 设置页面的关键字 :&lt;meta name=”keywords” content=””&gt; – 请求的重定向 :&lt;meta http-equiv=”refresh” content=”5;url=地址”/&gt; 4. 常用标签4.1 &lt;html&gt; 作用：&lt;html&gt;标签用于告诉浏览器这个文档中包含 的信息是用HTML编写的。 用法：\ 所有的网页的内容都需要编写到html标签中， 一个页面中html标签只能有一个；html标签中有两个子标签head和body。 4.2 &lt;head&gt; 作用：&lt;head&gt;标签用来表示网页的元数据，head中 包含了浏览器和搜索引擎使用的其他不可见信 息。 用法： head标签作为html标签的子元素的出现，一 个网页中只能有一个head。 4.3 &lt;title&gt; 作用：&lt;title&gt;标签表示网页的标题，一般会在网页的标 题栏上显示；title标签中的文字，是页面优化的最重要因素。在 搜索引擎的搜索时最先看到的、最醒目的内容。 用法： 建议将title标签紧贴着head标签编写，这样搜索 引擎可以快速检索到标题标签； 网站中的多个页面的title也不应该重复，这样不利 于搜索隐藏检索。 4.4 &lt;body&gt; 作用：&lt;body&gt;标签用来设置网页的主体，所有在页 面中能看到的内容都应该编写到body标签中。 用法： body标签作为html的子标签使用。 4.5 &lt;h1&gt;~&lt;h6&gt; 作用：h1h6都是网页中的标题标签，用来表示网页 中的一个标题，不同的是，从h1h6重要性越 来越低； 标题标签相当于正文的标题，通常认为重要性 仅次于页面的title； 一般标题标签我们只会使用到h3，h3以后的标 题标签对于搜索引擎就没有什么意义了； 一个页面中只会使用一个h1标签。 4.6 &lt;p&gt; 作用：\ 标签表示网页中的一个段落； 一般浏览器会在段落的前和后各加上一个换行， 也就是段落会在页面中自成一行。 4.7 &lt;br /&gt; 作用：&lt;br /&gt;标签表示一个换行标签，使用br标签可 以使br标签后的内容另起一行。 4.8 &lt;hr /&gt; 作用：&lt;hr /&gt;标签是水平线标签，使用hr标签可以在 页面中打印一条水平线，水平线可以将页面分 成上下两个部分。 4.9 &lt;img /&gt; 作用：&lt; img /&gt;标签是图片标签，可以用来向页面中 引入一张外部的图片。 属性： src • 指向一个外部的图片的路径；alt • 图片的描述 4.10 &lt;a&gt; 作用：标签是超链接标签，通过a标签，可以快 速跳转到其他页面。 属性：href • 指向一个链接地址；– target • 设置打开目标页面的位置(可选值：_blank新窗口、 _self当前窗口)。5. 实体(转义字符)5.1 实体 在HTML中预留了一些字符，这些预留字符是不能在网页中直接使用的。 比如&lt;和&gt;,我们不能直接在页面中使用&lt;和 &gt;号，因为浏览器会将它解析为html标签 为了可以使用这些预留字符，我们必须在 html中使用字符实体。 语法: &amp;实体名;5.2 实体字符 小于号&lt; : &amp;lt; 大于号&gt; : &amp;gt; 空格 : &amp;nbsp; 和符号&amp; : &amp;amp 版权© : &amp;copy; 引号” : &amp;quot; 注册商标® : &amp;reg;商标™ : &amp;trade;6. 开发工具6.1 文本编辑器 记事本 Notepad++(免费) Sublime(收费)6.2 IDE(集成开发工具) DreamWeaver（收费） WebStorm（收费） Hbuilder（免费）]]></content>
      <categories>
        <category>前端</category>
        <category>HTML</category>
        <category>HTML基础</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>html的发展</tag>
        <tag>编码</tag>
        <tag>Path环境变量</tag>
        <tag>java基础语法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[03-循环语句语]]></title>
    <url>%2F2019%2F10%2F08%2F03-%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5%E8%AF%AD%2F</url>
    <content type="text"><![CDATA[1. switch语句1.1 switch语句结构（掌握） 格式 123456789101112switch (表达式) &#123; case 1: 语句体1; break; case 2: 语句体2; break; ... default: 语句体n+1; break;&#125; 执行流程： 首先计算出表达式的值 其次，和case依次比较，一旦有对应的值，就会执行相应的语句，在执行的过程中，遇到break就会结 束。 最后，如果所有的case都和表达式的值不匹配，就会执行default语句体部分，然后程序结束掉。 1.2 switch语句练习-春夏秋冬（应用） 需求：一年有12个月，分属于春夏秋冬4个季节，键盘录入一个月份，请用程序实现判断该月份属于哪个季节，并输出。 运行结果： 1234春：3、4、5夏：6、7、8秋：9、10、11冬：1、2、12 示例代码： 123456789101112131415161718192021222324252627282930313233public class Demo1 &#123; public static void main(String[] args) &#123; //键盘录入月份数据，使用变量接收 Scanner sc = new Scanner(System.in); System.out.println("请输入一个月份："); int month = sc.nextInt(); //case穿透 switch(month) &#123; case 1: case 2: case 12: System.out.println("冬季"); break; case 3: case 4: case 5: System.out.println("春季"); break; case 6: case 7: case 8: System.out.println("夏季"); break; case 9: case 10: case 11: System.out.println("秋季"); break; default: System.out.println("你输入的月份有误"); &#125; &#125;&#125; 注意：如果switch中得case，没有对应break的话，则会出现case穿透的现象。 2. for循环2.1 for循环结构（掌握） 循环： 循环语句可以在满足循环条件的情况下，反复执行某一段代码，这段被重复执行的代码被称为循环体语句，当反复 执行这个循环体时，需要在合适的时候把循环判断条件修改为false，从而结束循环，否则循环将一直执行下去，形 成死循环。 for循环格式： 123for (初始化语句;条件判断语句;条件控制语句) &#123; 循环体语句;&#125; 格式解释： 初始化语句： 用于表示循环开启时的起始状态，简单说就是循环开始的时候什么样 条件判断语句：用于表示循环反复执行的条件，简单说就是判断循环是否能一直执行下去 循环体语句： 用于表示循环反复执行的内容，简单说就是循环反复执行的事情 条件控制语句：用于表示循环执行中每次变化的内容，简单说就是控制循环是否能执行下去 执行流程： ①执行初始化语句 ②执行条件判断语句，看其结果是true还是false 如果是false，循环结束 如果是true，继续执行③执行循环体语句 ④执行条件控制语句 ⑤回到②继续 2.2 for循环练习-输出数据（应用） 需求：在控制台输出1-5和5-1的数据 示例代码： 12345678910111213public class ForTest01 &#123; public static void main(String[] args) &#123; //需求：输出数据1-5 for(int i=1; i&lt;=5; i++) &#123; System.out.println(i); &#125; System.out.println("--------"); //需求：输出数据5-1 for(int i=5; i&gt;=1; i--) &#123; System.out.println(i); &#125; &#125;&#125; 2.3 for循环练习-求和（应用） 需求：求1-5之间的数据和，并把求和结果在控制台输出 示例代码： 12345678910111213141516171819202122public class ForTest02 &#123; public static void main(String[] args) &#123; //求和的最终结果必须保存起来，需要定义一个变量，用于保存求和的结果，初始值为0 int sum = 0; //从1开始到5结束的数据，使用循环结构完成 for(int i=1; i&lt;=5; i++) &#123; //将反复进行的事情写入循环结构内部 // 此处反复进行的事情是将数据 i 加到用于保存最终求和的变量 sum 中 sum += i; /* sum += i; sum = sum + i; 第一次：sum = sum + i = 0 + 1 = 1; 第二次：sum = sum + i = 1 + 2 = 3; 第三次：sum = sum + i = 3 + 3 = 6; 第四次：sum = sum + i = 6 + 4 = 10; 第五次：sum = sum + i = 10 + 5 = 15; */ &#125; //当循环执行完毕时，将最终数据打印出来 System.out.println("1-5之间的数据和是：" + sum); &#125;&#125; 本题要点： 今后遇到的需求中，如果带有求和二字，请立即联想到求和变量 求和变量的定义位置，必须在循环外部，如果在循环内部则计算出的数据将是错误的 2.4 for循环练习-求偶数和（应用） 需求：求1-100之间的偶数和，并把求和结果在控制台输出 } 示例代码： 123456789101112131415public class ForTest03 &#123; public static void main(String[] args) &#123; //求和的最终结果必须保存起来，需要定义一个变量，用于保存求和的结果，初始值为0 int sum = 0; //对1-100的数据求和与1-5的数据求和几乎完全一样，仅仅是结束条件不同 for(int i=1; i&lt;=100; i++) &#123; //对1-100的偶数求和，需要对求和操作添加限制条件，判断是否是偶数 if(i%2 == 0) &#123; sum += i; &#125; &#125; //当循环执行完毕时，将最终数据打印出来 System.out.println("1-100之间的偶数和是：" + sum); &#125;&#125; 2.5 for循环练习-水仙花（应用） 需求：在控制台输出所有的“水仙花数” 解释：什么是水仙花数？ 水仙花数，指的是一个三位数，个位、十位、百位的数字立方和等于原数 例如153 3*3*3 + 5*5*5 + 1*1*1 = 153 思路： 获取所有的三位数，准备进行筛选，最小的三位数为100，最大的三位数为999，使用for循环获取 获取每一个三位数的个位，十位，百位，做if语句判断是否是水仙花数 示例代码 1234567891011121314151617public class ForTest04 &#123; public static void main(String[] args) &#123; //输出所有的水仙花数必然要使用到循环，遍历所有的三位数，三位数从100开始，到999结束 for(int i=100; i&lt;1000; i++) &#123; //在计算之前获取三位数中每个位上的值 int ge = i%10; int shi = i/10%10; int bai = i/10/10%10; //判定条件是将三位数中的每个数值取出来，计算立方和后与原始数字比较是否相等 if(ge*ge*ge + shi*shi*shi + bai*bai*bai == i) &#123; //输出满足条件的数字就是水仙花数 System.out.println(i); &#125; &#125; &#125;&#125; 2.6 for循环练习-统计水仙花数个数（应用） 需求：统计“水仙花数”一共有多少个，并在控制台输出个数 示例代码： 12345678910111213141516171819public class ForTest05 &#123; public static void main(String[] args) &#123; //定义变量count，用于保存“水仙花数”的数量，初始值为0 int count = 0; //输出所有的水仙花数必然要使用到循环，遍历所有的三位数，三位数从100开始，到999结束 for(int i=100; i&lt;1000; i++) &#123; //在计算之前获取三位数中每个位上的值 int ge = i%10; int shi = i/10%10; int bai = i/10/10%10; //在判定水仙花数的过程中，满足条件不再输出，更改为修改count的值，使count+1 if(ge*ge*ge + shi*shi*shi + bai*bai*bai == i) &#123; count++; &#125; &#125; //打印输出最终结果 System.out.println("水仙花共有：" + count + "个"); &#125;&#125; 本题要点： 今后如果需求带有统计xxx，请先想到计数器变量 计数器变量定义的位置，必须在循环外部 3. while循环3.1 while结构（掌握） while循环完整格式： 12345初始化语句;while (条件判断语句) &#123; 循环体语句; 条件控制语句;&#125; while循环执行流程： ①执行初始化语句 ②执行条件判断语句，看其结果是true还是false 如果是false，循环结束 如果是true，继续执行③执行循环体语句 ④执行条件控制语句 ⑤回到②继续 示例代码： 12345678910111213141516public class WhileDemo &#123; public static void main(String[] args) &#123; //需求：在控制台输出5次"HelloWorld" //for循环实现 for(int i=1; i&lt;=5; i++) &#123; System.out.println("HelloWorld"); &#125; System.out.println("--------"); //while循环实现 int j = 1; while(j&lt;=5) &#123; System.out.println("HelloWorld"); j++; &#125; &#125;&#125; 3.2 while循环练习-珠穆朗玛峰（应用） 需求：世界最高山峰是珠穆朗玛峰(8844.43米=8844430毫米)，假如我有一张足够大的纸，它的厚度是0.1毫米。请问，我折叠多少次，可以折成珠穆朗玛峰的高度? 示例代码： 1234567891011121314151617181920public class WhileTest &#123; public static void main(String[] args) &#123; //定义一个计数器，初始值为0 int count = 0; //定义纸张厚度 double paper = 0.1; //定义珠穆朗玛峰的高度 int zf = 8844430; //因为要反复折叠，所以要使用循环，但是不知道折叠多少次，这种情况下更适合使用while循环 //折叠的过程中当纸张厚度大于珠峰就停止了，因此继续执行的要求是纸张厚度小于珠峰高度 while(paper &lt;= zf) &#123; //循环的执行过程中每次纸张折叠，纸张的厚度要加倍 paper *= 2; //在循环中执行累加，对应折叠了多少次 count++; &#125; //打印计数器的值 System.out.println("需要折叠：" + count + "次"); &#125;&#125; 4. 循环细节4.1 do…while循环结构（掌握） 完整格式： 12345初始化语句;do &#123; 循环体语句; 条件控制语句;&#125;while(条件判断语句); 执行流程： ① 执行初始化语句 ② 执行循环体语句 ③ 执行条件控制语句 ④ 执行条件判断语句，看其结果是true还是false 如果是false，循环结束 如果是true，继续执行 ⑤ 回到②继续 示例代码： 12345678910111213141516public class DoWhileDemo &#123; public static void main(String[] args) &#123; //需求：在控制台输出5次"HelloWorld" //for循环实现 for(int i=1; i&lt;=5; i++) &#123; System.out.println("HelloWorld"); &#125; System.out.println("--------"); //do...while循环实现 int j = 1; do &#123; System.out.println("HelloWorld"); j++; &#125;while(j&lt;=5); &#125;&#125; 4.2 三种循环的区别（理解） 三种循环的区别 for循环和while循环先判断条件是否成立，然后决定是否执行循环体（先判断后执行） do…while循环先执行一次循环体，然后判断条件是否成立，是否继续执行循环体（先执行后判断） for循环和while的区别 条件控制语句所控制的自增变量，因为归属for循环的语法结构中，在for循环结束后，就不能再次被访问到了 条件控制语句所控制的自增变量，对于while循环来说不归属其语法结构中，在while循环结束后，该变量还可以继续使用 死循环（无限循环）的三种格式 for(;;){} while(true){} do {} while(true); 4.3 跳转控制语句（掌握） 跳转控制语句（break） 跳出循环，结束循环 跳转控制语句（continue） 跳过本次循环，继续下次循环 注意： continue只能在循环中进行使用！ 4.4 循环嵌套（理解） 循环嵌套概述：在循环中，继续定义循环 示例代码： 123456789public static void main(String[] args) &#123; //外循环控制小时的范围，内循环控制分钟的范围 for (int hour = 0; hour &lt; 24; hour++) &#123; for (int minute = 0; minute &lt; 60; minute++) &#123; System.out.println(hour + "时" + minute + "分"); &#125; System.out.println("--------"); &#125; &#125; 理解： 请反复理解这句话（整个内循环，就是外循环的一个循环体，内部循环体没有执行完毕，外循环是不会继续向下执行的） 结论： 外循环执行一次，内循环执行一圈 5. Random5.1 Random产生随机数（掌握） 概述： Random类似Scanner，也是Java提供好的API，内部提供了产生随机数的功能 API后续课程详细讲解，现在可以简单理解为Java已经写好的代码 使用步骤： 导入包 import java.util.Random; 创建对象 Random r = new Random(); 产生随机数 int num = r.nextInt(10); 解释： 10代表的是一个范围，如果括号写10，产生的随机数就是0-9，括号写20，参数的随机数则是0-19 示例代码： 12345678910111213141516import java.util.Random;public class RandomDemo &#123; public static void main(String[] args) &#123; //创建对象 Random r = new Random(); //用循环获取10个随机数 for(int i=0; i&lt;10; i++) &#123; //获取随机数 int number = r.nextInt(10); System.out.println("number:" + number); &#125; //需求：获取一个1-100之间的随机数 int x = r.nextInt(100) + 1; System.out.println(x); &#125;&#125; 5.3 Random练习-猜数字（应用） 需求： 程序自动生成一个1-100之间的数字，使用程序实现猜出这个数字是多少？ 当猜错的时候根据不同情况给出相应的提示 A. 如果猜的数字比真实数字大，提示你猜的数据大了 B. 如果猜的数字比真实数字小，提示你猜的数据小了 C. 如果猜的数字与真实数字相等，提示恭喜你猜中了 示例代码： 123456789101112131415161718192021222324252627282930import java.util.Random;import java.util.Scanner;public class RandomTest &#123; public static void main(String[] args) &#123; //要完成猜数字的游戏，首先需要有一个要猜的数字，使用随机数生成该数字，范围1到100 Random r = new Random(); int number = r.nextInt(100) + 1; while(true) &#123; //使用程序实现猜数字，每次均要输入猜测的数字值，需要使用键盘录入实现 Scanner sc = new Scanner(System.in); System.out.println("请输入你要猜的数字："); int guessNumber = sc.nextInt(); //比较输入的数字和系统产生的数据，需要使用分支语句。 //这里使用if..else..if..格式，根据不同情况进行猜测结果显示 if(guessNumber &gt; number) &#123; System.out.println("你猜的数字" + guessNumber + "大了"); &#125; else if(guessNumber &lt; number) &#123; System.out.println("你猜的数字" + guessNumber + "小了"); &#125; else &#123; System.out.println("恭喜你猜中了"); break; &#125; &#125; &#125;&#125;]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>流程控制语句</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[02-Java基础语法]]></title>
    <url>%2F2019%2F10%2F08%2F02-Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[Java基础语法1. 运算符1.1 算术运算符（理解）1.1.1 运算符和表达式运算符：对常量或者变量进行操作的符号 表达式：用运算符把常量或者变量连接起来符合java语法的式子就可以称为表达式。 ​ 不同运算符连接的表达式体现的是不同类型的表达式。 举例说明： 123int a = 10;int b = 20;int c = a + b; +：是运算符，并且是算术运算符。 a + b：是表达式，由于+是算术运算符，所以这个表达式叫算术表达式。 1.1.2 算术运算符 符号 作用 说明 + 加 参看小学一年级 - 减 参看小学一年级 * 乘 参看小学二年级，与“×”相同 / 除 参看小学二年级，与“÷”相同 % 取余 获取的是两个数据做除法的余数 注意： /和%的区别：两个数据做除法，/取结果的商，%取结果的余数。 整数操作只能得到整数，要想得到小数，必须有浮点数参与运算。 1234int a = 10;int b = 3;System.out.println(a / b); // 输出结果3System.out.println(a % b); // 输出结果1 1.1.3 字符的“+”操作char类型参与算术运算，使用的是计算机底层对应的十进制数值。需要我们记住三个字符对应的数值： ‘a’ – 97 a-z是连续的，所以’b’对应的数值是98，’c’是99，依次递加 ‘A’ – 65 A-Z是连续的，所以’B’对应的数值是66，’C’是67，依次递加 ‘0’ – 48 0-9是连续的，所以’1’对应的数值是49，’2’是50，依次递加 123456789// 可以通过使用字符与整数做算术运算，得出字符对应的数值是多少char ch1 = 'a';System.out.println(ch1 + 1); // 输出98，97 + 1 = 98char ch2 = 'A';System.out.println(ch2 + 1); // 输出66，65 + 1 = 66char ch3 = '0';System.out.println(ch3 + 1); // 输出49，48 + 1 = 49 算术表达式中包含不同的基本数据类型的值的时候，整个算术表达式的类型会自动进行提升。 提升规则： byte类型，short类型和char类型将被提升到int类型，不管是否有其他类型参与运算。 整个表达式的类型自动提升到与表达式中最高等级的操作数相同的类型 ​ 等级顺序：byte,short,char –&gt; int –&gt; long –&gt; float –&gt; double 例如： 123456789byte b1 = 10;byte b2 = 20;// byte b3 = b1 + b2; // 该行报错，因为byte类型参与算术运算会自动提示为int，int赋值给byte可能损失精度int i3 = b1 + b2; // 应该使用int接收byte b3 = (byte) (b1 + b2); // 或者将结果强制转换为byte类型-------------------------------int num1 = 10;double num2 = 20.0;double num3 = num1 + num2; // 使用double接收，因为num1会自动提升为double类型 tips：正是由于上述原因，所以在程序开发中我们很少使用byte或者short类型定义整数。也很少会使用char类型定义字符，而使用字符串类型，更不会使用char类型做算术运算。 1.1.4 字符串的“+”操作当“+”操作中出现字符串时，这个”+”是字符串连接符，而不是算术运算。 1System.out.println("itheima"+ 666); // 输出：itheima666 在”+”操作中，如果出现了字符串，就是连接运算符，否则就是算术运算。当连续进行“+”操作时，从左到右逐个执行。 1234System.out.println(1 + 99 + "年黑马"); // 输出：199年黑马System.out.println(1 + 2 + "itheima" + 3 + 4); // 输出：3itheima34// 可以使用小括号改变运算的优先级 System.out.println(1 + 2 + "itheima" + (3 + 4)); // 输出：3itheima7 1.2 赋值运算符（应用）赋值运算符的作用是将一个表达式的值赋给左边，左边必须是可修改的，不能是常量。 符号 作用 说明 = 赋值 a=10，将10赋值给变量a += 加后赋值 a+=b，将a+b的值给a -= 减后赋值 a-=b，将a-b的值给a *= 乘后赋值 a*=b，将a×b的值给a /= 除后赋值 a/=b，将a÷b的商给a %= 取余后赋值 a%=b，将a÷b的余数给a 注意： 扩展的赋值运算符隐含了强制类型转换。 1234short s = 10;s = s + 10; // 此行代码报出，因为运算中s提升为int类型，运算结果int赋值给short可能损失精度s += 10; // 此行代码没有问题，隐含了强制类型转换，相当于 s = (short) (s + 10); 1.3 自增自减运算符（理解） 符号 作用 说明 ++ 自增 变量的值加1 – 自减 变量的值减1 注意事项： ​ ++和– 既可以放在变量的后边，也可以放在变量的前边。 ​ 单独使用的时候， ++和– 无论是放在变量的前边还是后边，结果是一样的。 ​ 参与操作的时候，如果放在变量的后边，先拿变量参与操作，后拿变量做++或者–。 ​ 参与操作的时候，如果放在变量的前边，先拿变量做++或者–，后拿变量参与操作。 ​ 最常见的用法：单独使用。 123456789101112131415int i = 10;i++; // 单独使用System.out.println("i:" + i); // i:11int j = 10;++j; // 单独使用System.out.println("j:" + j); // j:11int x = 10;int y = x++; // 赋值运算，++在后边，所以是使用x原来的值赋值给y，x本身自增1System.out.println("x:" + x + ", y:" + y); // x:11，y:10int m = 10;int n = ++m; // 赋值运算，++在前边，所以是使用m自增后的值赋值给n，m本身自增1System.out.println("m:" + m + ", m:" + m); // m:11，m:11 练习： 123456789int x = 10;int y = x++ + x++ + x++;System.out.println(y); // y的值是多少？/*解析，三个表达式都是++在后，所以每次使用的都是自增前的值，但程序自左至右执行，所以第一次自增时，使用的是10进行计算，但第二次自增时，x的值已经自增到11了，所以第二次使用的是11，然后再次自增。。。所以整个式子应该是：int y = 10 + 11 + 12;输出结果为33。*/注意：通过此练习深刻理解自增和自减的规律，但实际开发中强烈建议不要写这样的代码！小心挨打！ 1.4 关系运算符（应用）关系运算符有6种关系，分别为小于、小于等于、大于、等于、大于等于、不等于。 符号 说明 == a==b，判断a和b的值是否相等，成立为true，不成立为false != a!=b，判断a和b的值是否不相等，成立为true，不成立为false &gt; a&gt;b，判断a是否大于b，成立为true，不成立为false &gt;= a&gt;=b，判断a是否大于等于b，成立为true，不成立为false &lt; a&lt;b，判断a是否小于b，成立为true，不成立为false &lt;= a&lt;=b，判断a是否小于等于b，成立为true，不成立为false 注意事项： ​ 关系运算符的结果都是boolean类型，要么是true，要么是false。 ​ 千万不要把“==”误写成“=”，”==”是判断是否相等的关系，”=”是赋值。 123456789101112int a = 10;int b = 20;System.out.println(a == b); // falseSystem.out.println(a != b); // trueSystem.out.println(a &gt; b); // falseSystem.out.println(a &gt;= b); // falseSystem.out.println(a &lt; b); // trueSystem.out.println(a &lt;= b); // true// 关系运算的结果肯定是boolean类型，所以也可以将运算结果赋值给boolean类型的变量boolean flag = a &gt; b;System.out.println(flag); // 输出false 1.5 逻辑运算符（应用）逻辑运算符把各个运算的关系表达式连接起来组成一个复杂的逻辑表达式，以判断程序中的表达式是否成立，判断的结果是 true 或 false。 符号 作用 说明 &amp; 逻辑与 a&amp;b，a和b都是true，结果为true，否则为false | 逻辑或 a|b，a和b都是false，结果为false，否则为true ^ 逻辑异或 a^b，a和b结果不同为true，相同为false ! 逻辑非 !a，结果和a的结果正好相反 1234567891011121314151617181920212223242526272829//定义变量int i = 10;int j = 20;int k = 30;//&amp; “与”，并且的关系，只要表达式中有一个值为false，结果即为falseSystem.out.println((i &gt; j) &amp; (i &gt; k)); //false &amp; false,输出falseSystem.out.println((i &lt; j) &amp; (i &gt; k)); //true &amp; false,输出falseSystem.out.println((i &gt; j) &amp; (i &lt; k)); //false &amp; true,输出falseSystem.out.println((i &lt; j) &amp; (i &lt; k)); //true &amp; true,输出trueSystem.out.println("--------");//| “或”，或者的关系，只要表达式中有一个值为true，结果即为trueSystem.out.println((i &gt; j) | (i &gt; k)); //false | false,输出falseSystem.out.println((i &lt; j) | (i &gt; k)); //true | false,输出trueSystem.out.println((i &gt; j) | (i &lt; k)); //false | true,输出trueSystem.out.println((i &lt; j) | (i &lt; k)); //true | true,输出trueSystem.out.println("--------");//^ “异或”，相同为false，不同为trueSystem.out.println((i &gt; j) ^ (i &gt; k)); //false ^ false,输出falseSystem.out.println((i &lt; j) ^ (i &gt; k)); //true ^ false,输出trueSystem.out.println((i &gt; j) ^ (i &lt; k)); //false ^ true,输出trueSystem.out.println((i &lt; j) ^ (i &lt; k)); //true ^ true,输出falseSystem.out.println("--------");//! “非”，取反System.out.println((i &gt; j)); //falseSystem.out.println(!(i &gt; j)); //!false，,输出true 短路逻辑运算符 符号 作用 说明 &amp;&amp; 短路与 作用和&amp;相同，但是有短路效果 || 短路或 作用和|相同，但是有短路效果 在逻辑与运算中，只要有一个表达式的值为false，那么结果就可以判定为false了，没有必要将所有表达式的值都计算出来，短路与操作就有这样的效果，可以提高效率。同理在逻辑或运算中，一旦发现值为true，右边的表达式将不再参与运算。 逻辑与&amp;，无论左边真假，右边都要执行。 短路与&amp;&amp;，如果左边为真，右边执行；如果左边为假，右边不执行。 逻辑或|，无论左边真假，右边都要执行。 短路或||，如果左边为假，右边执行；如果左边为真，右边不执行。 123456789int x = 3;int y = 4;System.out.println((x++ &gt; 4) &amp; (y++ &gt; 5)); // 两个表达都会运算System.out.println(x); // 4System.out.println(y); // 5System.out.println((x++ &gt; 4) &amp;&amp; (y++ &gt; 5)); // 左边已经可以确定结果为false，右边不参与运算System.out.println(x); // 4System.out.println(y); // 4 1.6 三元运算符（理解）三元运算符语法格式： 1关系表达式 ? 表达式1 : 表达式2; 解释：问号前面的位置是判断的条件，判断结果为boolean型，为true时调用表达式1，为false时调用表达式2。其逻辑为：如果条件表达式成立或者满足则执行表达式1，否则执行第二个。 举例： 123int a = 10;int b = 20;int c = a &gt; b ? a : b; // 判断 a&gt;b 是否为真，如果为真取a的值，如果为假，取b的值 三元运算符案例： 1、需求：动物园里有两只老虎，已知两只老虎的体重分别为180kg、200kg，请用程序实现判断两只老虎的体重是否相同。 1234567891011public class OperatorTest01 &#123; public static void main(String[] args) &#123; //1：定义两个变量用于保存老虎的体重，单位为kg，这里仅仅体现数值即可。 int weight1 = 180; int weight2 = 200; //2：用三元运算符实现老虎体重的判断，体重相同，返回true，否则，返回false。 boolean b = weight1 == weight2 ? true : false; //3：输出结果 System.out.println("b:" + b); &#125;&#125; 2、需求：一座寺庙里住着三个和尚，已知他们的身高分别为150cm、210cm、165cm，请用程序实现获取这三个和尚的最高身高。 1234567891011121314public class OperatorTest02 &#123; public static void main(String[] args) &#123; //1：定义三个变量用于保存和尚的身高，单位为cm，这里仅仅体现数值即可。 int height1 = 150; int height2 = 210; int height3 = 165; //2：用三元运算符获取前两个和尚的较高身高值，并用临时身高变量保存起来。 int tempHeight = height1 &gt; height2 ? height1 : height2; //3：用三元运算符获取临时身高值和第三个和尚身高较高值，并用最大身高变量保存。 int maxHeight = tempHeight &gt; height3 ? tempHeight : height3; //4：输出结果 System.out.println("maxHeight:" + maxHeight); &#125;&#125; 2. 数据输入（应用）我们可以通过 Scanner 类来获取用户的输入。使用步骤如下： 1、导包。Scanner 类在java.util包下，所以需要将该类导入。导包的语句需要定义在类的上面。 1import java.util.Scanner; 2、创建Scanner对象。 1Scanner sc = new Scanner(System.in);// 创建Scanner对象，sc表示变量名，其他均不可变 3、接收数据 1int i = sc.nextInt(); // 表示将键盘录入的值作为int数返回。 示例： 1234567891011import java.util.Scanner;public class ScannerDemo &#123; public static void main(String[] args) &#123; //创建对象 Scanner sc = new Scanner(System.in); //接收数据 int x = sc.nextInt(); //输出数据 System.out.println("x:" + x); &#125;&#125; 改写三个和尚案例，数据使用键盘录入。 1234567891011121314151617181920import java.util.Scanner;public class ScannerTest &#123; public static void main(String[] args) &#123; //身高未知，采用键盘录入实现。首先导包，然后创建对象。 Scanner sc = new Scanner(System.in); //键盘录入三个身高分别赋值给三个变量。 System.out.println("请输入第一个和尚的身高："); int height1 = sc.nextInt(); System.out.println("请输入第二个和尚的身高："); int height2 = sc.nextInt(); System.out.println("请输入第三个和尚的身高："); int height3 = sc.nextInt(); //用三元运算符获取前两个和尚的较高身高值，并用临时身高变量保存起来。 int tempHeight = height1 &gt; height2 ? height1 : height2; //用三元运算符获取临时身高值和第三个和尚身高较高值，并用最大身高变量保存。 int maxHeight = tempHeight &gt; height3 ? tempHeight : height3; //输出结果。 System.out.println("这三个和尚中身高最高的是：" + maxHeight +"cm"); &#125;&#125; 3. 流程控制语句（应用）在一个程序执行的过程中，各条语句的执行顺序对程序的结果是有直接影响的。所以，我们必须清楚每条语句的执行流程。而且，很多时候要通过控制语句的执行顺序来实现我们想要的功能。 3.1 流程控制语句分类​ 顺序结构 ​ 分支结构(if, switch) ​ 循环结构(for, while, do…while) 3.2 顺序结构顺序结构是程序中最简单最基本的流程控制，没有特定的语法结构，按照代码的先后顺序，依次执行，程序中大多数的代码都是这样执行的。 顺序结构执行流程图： 3.3 分支结构之if语句if语句格式11234格式：if (关系表达式) &#123; 语句体; &#125; 执行流程： ①首先计算关系表达式的值 ②如果关系表达式的值为true就执行语句体 ③如果关系表达式的值为false就不执行语句体 ④继续执行后面的语句内容 示例： 123456789101112131415161718public class IfDemo &#123; public static void main(String[] args) &#123; System.out.println("开始"); //定义两个变量 int a = 10; int b = 20; //需求：判断a和b的值是否相等，如果相等，就在控制台输出：a等于b if(a == b) &#123; System.out.println("a等于b"); &#125; //需求：判断a和c的值是否相等，如果相等，就在控制台输出：a等于c int c = 10; if(a == c) &#123; System.out.println("a等于c"); &#125; System.out.println("结束"); &#125;&#125; if语句格式2123456格式：if (关系表达式) &#123; 语句体1; &#125; else &#123; 语句体2; &#125; 执行流程： ①首先计算关系表达式的值 ②如果关系表达式的值为true就执行语句体1 ③如果关系表达式的值为false就执行语句体2 ④继续执行后面的语句内容 示例： 12345678910111213141516public class IfDemo02 &#123; public static void main(String[] args) &#123; System.out.println("开始"); //定义两个变量 int a = 10; int b = 20; b = 5; //需求：判断a是否大于b，如果是，在控制台输出：a的值大于b，否则，在控制台输出：a的值不大于b if(a &gt; b) &#123; System.out.println("a的值大于b"); &#125; else &#123; System.out.println("a的值不大于b"); &#125; System.out.println("结束"); &#125;&#125; if语句案例：奇偶数 需求：任意给出一个整数，请用程序实现判断该整数是奇数还是偶数，并在控制台输出该整数是奇数还是偶数。 分析： ​ ①为了体现任意给出一个整数，采用键盘录入一个数据 ​ ②判断整数是偶数还是奇数要分两种情况进行判断，使用if..else结构 ​ ③判断是否偶数需要使用取余运算符实现该功能 number % 2 == 0 ​ ④根据判定情况，在控制台输出对应的内容 1234567891011121314151617import java.util.Scanner;public class IfTest01 &#123; public static void main(String[] args) &#123; //为了体现任意给出一个整数，采用键盘录入一个数据。(导包，创建对象，接收数据) Scanner sc = new Scanner(System.in); System.out.println("请输入一个整数："); int number = sc.nextInt(); //判断整数是偶数还是奇数要分两种情况进行判断，使用if..else结构 //判断是否偶数需要使用取余运算符实现该功能 number % 2 == 0 //根据判定情况，在控制台输出对应的内容 if(number%2 == 0) &#123; System.out.println(number + "是偶数"); &#125; else &#123; System.out.println(number + "是奇数"); &#125; &#125;&#125; if语句格式312345678910格式：if (关系表达式1) &#123; 语句体1; &#125; else if (关系表达式2) &#123; 语句体2; &#125; …else &#123; 语句体n+1;&#125; 执行流程： ①首先计算关系表达式1的值 ②如果值为true就执行语句体1；如果值为false就计算关系表达式2的值 ③如果值为true就执行语句体2；如果值为false就计算关系表达式3的值 ④… ⑤如果没有任何关系表达式为true，就执行语句体n+1。 示例：键盘录入一个星期数(1,2,…7)，输出对应的星期一，星期二，…星期日 1234567891011121314151617181920212223242526import java.util.Scanner;public class IfDemo03 &#123; public static void main(String[] args) &#123; System.out.println("开始"); // 需求：键盘录入一个星期数(1,2,...7)，输出对应的星期一，星期二，...星期日 Scanner sc = new Scanner(System.in); System.out.println("请输入一个星期数(1-7)："); int week = sc.nextInt(); if(week == 1) &#123; System.out.println("星期一"); &#125; else if(week == 2) &#123; System.out.println("星期二"); &#125; else if(week == 3) &#123; System.out.println("星期三"); &#125; else if(week == 4) &#123; System.out.println("星期四"); &#125; else if(week == 5) &#123; System.out.println("星期五"); &#125; else if(week == 6) &#123; System.out.println("星期六"); &#125; else &#123; System.out.println("星期日"); &#125; System.out.println("结束"); &#125;&#125; if语句格式3案例： 需求：小明快要期末考试了，小明爸爸对他说，会根据他不同的考试成绩，送他不同的礼物，假如你可以控制小明的得分，请用程序实现小明到底该获得什么样的礼物，并在控制台输出。 分析： ​ ①小明的考试成绩未知，可以使用键盘录入的方式获取值 ​ ②由于奖励种类较多，属于多种判断，采用if…else…if格式实现 ​ ③为每种判断设置对应的条件 ​ ④为每种判断设置对应的奖励 123456789101112131415161718192021222324import java.util.Scanner;public class IfTest02 &#123; public static void main(String[] args) &#123; //小明的考试成绩未知，可以使用键盘录入的方式获取值 Scanner sc = new Scanner(System.in); System.out.println("请输入一个分数："); int score = sc.nextInt(); //由于奖励种类较多，属于多种判断，采用if...else...if格式实现 //为每种判断设置对应的条件 //为每种判断设置对应的奖励 //数据测试：正确数据，边界数据，错误数据 if(score&gt;100 || score&lt;0) &#123; System.out.println("你输入的分数有误"); &#125; else if(score&gt;=95 &amp;&amp; score&lt;=100) &#123; System.out.println("山地自行车一辆"); &#125; else if(score&gt;=90 &amp;&amp; score&lt;=94) &#123; System.out.println("游乐场玩一次"); &#125; else if(score&gt;=80 &amp;&amp; score&lt;=89) &#123; System.out.println("变形金刚玩具一个"); &#125; else &#123; System.out.println("胖揍一顿"); &#125; &#125;&#125;]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>Path环境变量</tag>
        <tag>java基础语法</tag>
        <tag>流程控制语句</tag>
        <tag>运算符</tag>
        <tag>数据输入</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[01.java基础语法]]></title>
    <url>%2F2019%2F10%2F08%2F01-java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[1. Java概述1.1 Java语言发展史（了解）语言：人与人交流沟通的表达方式 计算机语言：人与计算机之间进行信息交流沟通的一种特殊语言 Java语言是美国Sun公司（Stanford University Network）在1995年推出的计算机语言 Java之父：詹姆斯·高斯林（James Gosling） 2009年，Sun公司被甲骨文公司收购，所以我们现在访问oracle官网即可：https://www.oracle.com 当前，我们课程使用的JDK版本：11.0 1.2 Java语言跨平台原理（理解）Java程序并非是直接运行的，Java编译器将Java源程序编译成与平台无关的字节码文件(class文件)，然后由Java虚拟机（JVM）对字节码文件解释执行。所以在不同的操作系统下，只需安装不同的Java虚拟机即可实现java程序的跨平台。 1.3 JRE和JDK（记忆）JVM（Java Virtual Machine），Java虚拟机 JRE（Java Runtime Environment），Java运行环境，包含了JVM和Java的核心类库（Java API） JDK（Java Development Kit）称为Java开发工具，包含了JRE和开发工具 总结：我们只需安装JDK即可，它包含了java的运行环境和虚拟机。 1.4 JDK的下载和安装（应用）1.4.1 下载通过官方网站获取JDK http://www.oracle.com 注意：针对不同的操作系统，需要下载对应版本的JDK。 具体下载步骤请参见《JDK下载及安装说明文档》 1.4.2 安装傻瓜式安装，下一步即可。但默认的安装路径是在C:\Program Files下，为方便统一管理建议修改安装路径，将与开发相关的软件都安装到一个目录下，例如：E:\develop。 注意：安装路径不要包含中文或者空格等特殊字符（使用纯英文目录）。 具体安装步骤请参见《JDK下载及安装说明文档》 1.4.3 JDK的安装目录介绍 目录名称 说明 bin 该路径下存放了JDK的各种工具命令。javac和java就放在这个目录。 conf 该路径下存放了JDK的相关配置文件。 include 该路径下存放了一些平台特定的头文件。 jmods 该路径下存放了JDK的各种模块。 legal 该路径下存放了JDK各模块的授权文档。 lib 该路径下存放了JDK工具的一些补充JAR包。 2. 第一个演示程序2.1 常用DOS命令（应用）在接触集成开发环境之前，我们需要使用命令行窗口对java程序进行编译和运行，所以需要知道一些常用DOS命令。 1、打开命令行窗口的方式：win + r打开运行窗口，输入cmd，回车。 2、常用命令及其作用 操作 说明 盘符名称: 盘符切换。E:回车，表示切换到E盘。 dir 查看当前路径下的内容。 cd 目录 进入单级目录。cd itheima cd .. 回退到上一级目录。 cd 目录1\目录2... 进入多级目录。cd itheima\JavaSE cd \ 回退到盘符目录。 cls 清屏。 exit 退出命令提示符窗口。 2.2 Path环境变量的配置（应用）2.2.1 为什么配置环境变量开发Java程序，需要使用JDK提供的开发工具（比如javac.exe、java.exe等命令），而这些工具在JDK的安装目录的bin目录下，如果不配置环境变量，那么这些命令只可以在该目录下执行。我们不可能把所有的java文件都放到JDK的bin目录下，所以配置环境变量的作用就是可以使bin目录下的java相关命令可以在任意目录下使用。 2.2.2 配置环境变量步骤具体配置步骤请参见《Java环境变量配置说明》文档。 2.3 HelloWorld案例（应用）HelloWorld案例是指在计算机屏幕上输出“HelloWorld”这行文字。各种计算机语言都习惯使用该案例作为第一个演示案例。 2.3.1 Java程序开发运行流程开发Java程序，需要三个步骤：编写程序，编译程序，运行程序。 2.3.2 HelloWorld案例的编写1、新建文本文档文件，修改名称为HelloWorld.java。 2、用记事本打开HelloWorld.java文件，输写程序内容。 12345public class HelloWorld &#123; public static void main(String[] args) &#123; System.out.println("HelloWorld"); &#125;&#125; 2.3.3 HelloWorld案例的编译和运行存文件，打开命令行窗口，将目录切换至java文件所在目录，编译java文件生成class文件，运行class文件。 编译：javac 文件名.java 范例：javac HelloWorld.java 执行：java 类名 范例：java HelloWorld 2.4 HelloWorld案例常见问题（理解）2.4.1 BUG在电脑系统或程序中，隐藏着的一些未被发现的缺陷或问题统称为bug（漏洞）。 2.4.2 BUG的解决1、具备识别BUG的能力：多看 2、具备分析BUG的能力：多思考，多查资料 3、具备解决BUG的能力：多尝试，多总结 2.4.3 HelloWorld案例常见问题1、非法字符问题。Java中的符号都是英文格式的。 2、大小写问题。Java语言对大小写敏感（区分大小写）。 3、在系统中显示文件的扩展名，避免出现HelloWorld.java.txt文件。 4、编译命令后的java文件名需要带文件后缀.java 5、运行命令后的class文件名（类名）不带文件后缀.class … 2.5 Notepad++软件的安装和使用（应用）2.5.1 什么要使用Notepad++软件Notepad++功能比windows中的自带记事本功能强大，除了可以用来制作一般的纯文字说明文件，也十分适合编写计算机程序代码。Notepad++有行号，能够快速定位问题位置，还有语法高亮度显示、代码折叠等功能。而且它是免费的。 2.5.2 Notepad++软件安装安装：傻瓜式安装，一直下一步即可。建议也安装到统一的开发软件目录下，比如E:\develop。 具体安装步骤请参见《Nodepad++软件安装及配置说明》文档。 2.5.3Notepad++软件配置安装完毕之后，为了使用方便，做一个简单的配置：修改默认语言和编码。 具体配置的说明请参见《Nodepad++软件安装及配置说明》文档。 3. java基础语法3.1 注释（理解）注释是对代码的解释和说明文字，可以提高程序的可读性，因此在程序中添加必要的注释文字十分重要。Java中的注释分为三种： 单行注释。单行注释的格式是使用//，从//开始至本行结尾的文字将作为注释文字。 1// 这是单行注释文字 多行注释。多行注释的格式是使用/* 和 */将一段较长的注释括起来。 123456/*这是多行注释文字这是多行注释文字这是多行注释文字*/注意：多行注释不能嵌套使用。 文档注释。文档注释以/**开始，以*/结束。（以后讲） 3.2 关键字（理解）关键字是指被java语言赋予了特殊含义的单词。 关键字的特点： ​ 关键字的字母全部小写。 ​ 常用的代码编辑器对关键字都有高亮显示，比如现在我们能看到的public、class、static等。 3.3 常量（应用）常量：在程序运行过程中，其值不可以发生改变的量。 Java中的常量分类： ​ 字符串常量 用双引号括起来的多个字符（可以包含0个、一个或多个），例如”a”、”abc”、”中国”等 ​ 整数常量 整数，例如：-10、0、88等 ​ 小数常量 小数，例如：-5.5、1.0、88.88等 ​ 字符常量 用单引号括起来的一个字符，例如：’a’、’5’、’B’、’中’等 ​ 布尔常量 布尔值，表示真假，只有两个值true和false ​ 空常量 一个特殊的值，空值，值为null 除空常量外，其他常量均可使用输出语句直接输出。 123456789public class Demo &#123; public static void main(String[] args) &#123; System.out.println(10); // 输出一个整数 System.out.println(5.5); // 输出一个小数 System.out.println('a'); // 输出一个字符 System.out.println(true); // 输出boolean值true System.out.println("欢迎来到黑马程序员"); // 输出字符串 &#125;&#125; 3.4 数据类型（记忆、应用）3.4.1 计算机存储单元我们知道计算机是可以用来存储数据的，但是无论是内存还是硬盘，计算机存储设备的最小信息单元叫“位（bit）”，我们又称之为“比特位”，通常用小写的字母”b”表示。而计算机中最基本的存储单元叫“字节（byte）”， 通常用大写字母”B”表示，字节是由连续的8个位组成。 除了字节外还有一些常用的存储单位，其换算单位如下： 1B（字节） = 8bit 1KB = 1024B 1MB = 1024KB 1GB = 1024MB 1TB = 1024GB 3.4.2 Java中的数据类型Java是一个强类型语言，Java中的数据必须明确数据类型。在Java中的数据类型包括基本数据类型和引用数据类型两种。 Java中的基本数据类型： 数据类型 关键字 内存占用 取值范围 整数类型 byte 1 -128~127 short 2 -32768~32767 int(默认) 4 -2的31次方到2的31次方-1 long 8 -2的63次方到2的63次方-1 浮点类型 float 4 负数：-3.402823E+38到-1.401298E-45 正数： 1.401298E-45到3.402823E+38 double(默认) 8 负数：-1.797693E+308到-4.9000000E-324 正数：4.9000000E-324 到1.797693E+308 字符类型 char 2 0-65535 布尔类型 boolean 1 true，false 说明： ​ e+38表示是乘以10的38次方，同样，e-45表示乘以10的负45次方。 ​ 在java中整数默认是int类型，浮点数默认是double类型。 3.5 变量（应用）3.5.1 变量的定义变量：在程序运行过程中，其值可以发生改变的量。 从本质上讲，变量是内存中的一小块区域，其值可以在一定范围内变化。 变量的定义格式： 123数据类型 变量名 = 初始化值; // 声明变量并赋值int age = 18;System.out.println(age); 或者 123456// 先声明，后赋值（使用前赋值即可）数据类型 变量名;变量名 = 初始化值;double money;money = 55.5;System.out.println(money); 还可以在同一行定义多个同一种数据类型的变量，中间使用逗号隔开。但不建议使用这种方式，降低程序的可读性。 123456789int a = 10, b = 20; // 定义int类型的变量a和b，中间使用逗号隔开System.out.println(a);System.out.println(b);int c,d; // 声明int类型的变量c和d，中间使用逗号隔开c = 30;d = 40;System.out.println(c);System.out.println(d); 变量的使用：通过变量名访问即可。 3.5.2 使用变量时的注意事项 在同一对花括号中，变量名不能重复。 变量在使用之前，必须初始化（赋值）。 定义long类型的变量时，需要在整数的后面加L（大小写均可，建议大写）。因为整数默认是int类型，整数太大可能超出int范围。 定义float类型的变量时，需要在小数的后面加F（大小写均可，建议大写）。因为浮点数的默认类型是double， double的取值范围是大于float的，类型不兼容。 3.6 标识符（记忆、理解）标识符是用户编程时使用的名字，用于给类、方法、变量、常量等命名。 Java中标识符的组成规则： ​ 由字母、数字、下划线“_”、美元符号“$”组成，第一个字符不能是数字。 ​ 不能使用java中的关键字作为标识符。 ​ 标识符对大小写敏感（区分大小写）。 Java中标识符的命名约定： ​ 小驼峰式命名：变量名、方法名 ​ 首字母小写，从第二个单词开始每个单词的首字母大写。 ​ 大驼峰式命名：类名 ​ 每个单词的首字母都大写。 ​ 另外，标识符的命名最好可以做到见名知意 ​ 例如：username、studentNumber等。 3.7 类型转换（理解）在Java中，一些数据类型之间是可以相互转换的。分为两种情况：自动类型转换和强制类型转换。 自动类型转换： ​ 把一个表示数据范围小的数值或者变量赋值给另一个表示数据范围大的变量。这种转换方式是自动的，直接书写即可。例如： 12double num = 10; // 将int类型的10直接赋值给double类型System.out.println(num); // 输出10.0 强制类型转换： ​ 把一个表示数据范围大的数值或者变量赋值给另一个表示数据范围小的变量。 ​ 强制类型转换格式：目标数据类型 变量名 = (目标数据类型)值或者变量; ​ 例如： 123double num1 = 5.5;int num2 = (int) num1; // 将double类型的num1强制转换为int类型System.out.println(num2); // 输出5（小数位直接舍弃） 说明： char类型的数据转换为int类型是按照码表中对应的int值进行计算的。比如在ASCII码表中，’a’对应97。 12int a = 'a';System.out.println(a); // 将输出97 整数默认是int类型，byte、short和char类型数据参与运算均会自动转换为int类型。 12345678byte b1 = 10;byte b2 = 20;byte b3 = b1 + b2; // 第三行代码会报错，b1和b2会自动转换为int类型，计算结果为int，int赋值给byte需要强制类型转换。// 修改为:int num = b1 + b2;// 或者：byte b3 = (byte) (b1 + b2); boolean类型不能与其他基本数据类型相互转换。]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>Path环境变量</tag>
        <tag>java基础语法</tag>
        <tag>java发展</tag>
        <tag>JRE和JDK</tag>
        <tag>DOS命令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F10%2F08%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
